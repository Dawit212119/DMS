
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model Budget
 * 
 */
export type Budget = $Result.DefaultSelection<Prisma.$BudgetPayload>
/**
 * Model Team
 * 
 */
export type Team = $Result.DefaultSelection<Prisma.$TeamPayload>
/**
 * Model UpcomingMilstone
 * 
 */
export type UpcomingMilstone = $Result.DefaultSelection<Prisma.$UpcomingMilstonePayload>
/**
 * Model CheckList
 * 
 */
export type CheckList = $Result.DefaultSelection<Prisma.$CheckListPayload>
/**
 * Model Documents
 * 
 */
export type Documents = $Result.DefaultSelection<Prisma.$DocumentsPayload>
/**
 * Model TheIncomingLetter
 * 
 */
export type TheIncomingLetter = $Result.DefaultSelection<Prisma.$TheIncomingLetterPayload>
/**
 * Model TheOutgoingLetter
 * 
 */
export type TheOutgoingLetter = $Result.DefaultSelection<Prisma.$TheOutgoingLetterPayload>
/**
 * Model Report
 * 
 */
export type Report = $Result.DefaultSelection<Prisma.$ReportPayload>
/**
 * Model ConstructionSiteImage
 * 
 */
export type ConstructionSiteImage = $Result.DefaultSelection<Prisma.$ConstructionSiteImagePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Status: {
  ontrack: 'ontrack',
  atrisk: 'atrisk'
};

export type Status = (typeof Status)[keyof typeof Status]


export const Priority: {
  high: 'high',
  medium: 'medium',
  low: 'low'
};

export type Priority = (typeof Priority)[keyof typeof Priority]


export const IncomingStatus: {
  read: 'read',
  unread: 'unread'
};

export type IncomingStatus = (typeof IncomingStatus)[keyof typeof IncomingStatus]


export const OutgoingStatus: {
  sent: 'sent',
  draft: 'draft'
};

export type OutgoingStatus = (typeof OutgoingStatus)[keyof typeof OutgoingStatus]


export const reportStatus: {
  approved: 'approved',
  rejected: 'rejected'
};

export type reportStatus = (typeof reportStatus)[keyof typeof reportStatus]


export const reportType: {
  daily: 'daily',
  weekly: 'weekly',
  monthly: 'monthly',
  annually: 'annually',
  quarterly: 'quarterly'
};

export type reportType = (typeof reportType)[keyof typeof reportType]


export const category: {
  foundation: 'foundation',
  structural: 'structural',
  electrical: 'electrical',
  plumbing: 'plumbing',
  exterior: 'exterior',
  aerial: 'aerial'
};

export type category = (typeof category)[keyof typeof category]

}

export type Status = $Enums.Status

export const Status: typeof $Enums.Status

export type Priority = $Enums.Priority

export const Priority: typeof $Enums.Priority

export type IncomingStatus = $Enums.IncomingStatus

export const IncomingStatus: typeof $Enums.IncomingStatus

export type OutgoingStatus = $Enums.OutgoingStatus

export const OutgoingStatus: typeof $Enums.OutgoingStatus

export type reportStatus = $Enums.reportStatus

export const reportStatus: typeof $Enums.reportStatus

export type reportType = $Enums.reportType

export const reportType: typeof $Enums.reportType

export type category = $Enums.category

export const category: typeof $Enums.category

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.budget`: Exposes CRUD operations for the **Budget** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Budgets
    * const budgets = await prisma.budget.findMany()
    * ```
    */
  get budget(): Prisma.BudgetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): Prisma.TeamDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.upcomingMilstone`: Exposes CRUD operations for the **UpcomingMilstone** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UpcomingMilstones
    * const upcomingMilstones = await prisma.upcomingMilstone.findMany()
    * ```
    */
  get upcomingMilstone(): Prisma.UpcomingMilstoneDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.checkList`: Exposes CRUD operations for the **CheckList** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CheckLists
    * const checkLists = await prisma.checkList.findMany()
    * ```
    */
  get checkList(): Prisma.CheckListDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.documents`: Exposes CRUD operations for the **Documents** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.documents.findMany()
    * ```
    */
  get documents(): Prisma.DocumentsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.theIncomingLetter`: Exposes CRUD operations for the **TheIncomingLetter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TheIncomingLetters
    * const theIncomingLetters = await prisma.theIncomingLetter.findMany()
    * ```
    */
  get theIncomingLetter(): Prisma.TheIncomingLetterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.theOutgoingLetter`: Exposes CRUD operations for the **TheOutgoingLetter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TheOutgoingLetters
    * const theOutgoingLetters = await prisma.theOutgoingLetter.findMany()
    * ```
    */
  get theOutgoingLetter(): Prisma.TheOutgoingLetterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.report`: Exposes CRUD operations for the **Report** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reports
    * const reports = await prisma.report.findMany()
    * ```
    */
  get report(): Prisma.ReportDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.constructionSiteImage`: Exposes CRUD operations for the **ConstructionSiteImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ConstructionSiteImages
    * const constructionSiteImages = await prisma.constructionSiteImage.findMany()
    * ```
    */
  get constructionSiteImage(): Prisma.ConstructionSiteImageDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.5.0
   * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Project: 'Project',
    Budget: 'Budget',
    Team: 'Team',
    UpcomingMilstone: 'UpcomingMilstone',
    CheckList: 'CheckList',
    Documents: 'Documents',
    TheIncomingLetter: 'TheIncomingLetter',
    TheOutgoingLetter: 'TheOutgoingLetter',
    Report: 'Report',
    ConstructionSiteImage: 'ConstructionSiteImage'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "project" | "budget" | "team" | "upcomingMilstone" | "checkList" | "documents" | "theIncomingLetter" | "theOutgoingLetter" | "report" | "constructionSiteImage"
      txIsolationLevel: never
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ProjectFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ProjectAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      Budget: {
        payload: Prisma.$BudgetPayload<ExtArgs>
        fields: Prisma.BudgetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BudgetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BudgetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetPayload>
          }
          findFirst: {
            args: Prisma.BudgetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BudgetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetPayload>
          }
          findMany: {
            args: Prisma.BudgetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetPayload>[]
          }
          create: {
            args: Prisma.BudgetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetPayload>
          }
          createMany: {
            args: Prisma.BudgetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BudgetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetPayload>
          }
          update: {
            args: Prisma.BudgetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetPayload>
          }
          deleteMany: {
            args: Prisma.BudgetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BudgetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BudgetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetPayload>
          }
          aggregate: {
            args: Prisma.BudgetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBudget>
          }
          groupBy: {
            args: Prisma.BudgetGroupByArgs<ExtArgs>
            result: $Utils.Optional<BudgetGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.BudgetFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.BudgetAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.BudgetCountArgs<ExtArgs>
            result: $Utils.Optional<BudgetCountAggregateOutputType> | number
          }
        }
      }
      Team: {
        payload: Prisma.$TeamPayload<ExtArgs>
        fields: Prisma.TeamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findFirst: {
            args: Prisma.TeamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findMany: {
            args: Prisma.TeamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          create: {
            args: Prisma.TeamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          createMany: {
            args: Prisma.TeamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TeamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          update: {
            args: Prisma.TeamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          deleteMany: {
            args: Prisma.TeamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TeamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          aggregate: {
            args: Prisma.TeamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeam>
          }
          groupBy: {
            args: Prisma.TeamGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.TeamFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.TeamAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.TeamCountArgs<ExtArgs>
            result: $Utils.Optional<TeamCountAggregateOutputType> | number
          }
        }
      }
      UpcomingMilstone: {
        payload: Prisma.$UpcomingMilstonePayload<ExtArgs>
        fields: Prisma.UpcomingMilstoneFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UpcomingMilstoneFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpcomingMilstonePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UpcomingMilstoneFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpcomingMilstonePayload>
          }
          findFirst: {
            args: Prisma.UpcomingMilstoneFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpcomingMilstonePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UpcomingMilstoneFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpcomingMilstonePayload>
          }
          findMany: {
            args: Prisma.UpcomingMilstoneFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpcomingMilstonePayload>[]
          }
          create: {
            args: Prisma.UpcomingMilstoneCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpcomingMilstonePayload>
          }
          createMany: {
            args: Prisma.UpcomingMilstoneCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UpcomingMilstoneDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpcomingMilstonePayload>
          }
          update: {
            args: Prisma.UpcomingMilstoneUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpcomingMilstonePayload>
          }
          deleteMany: {
            args: Prisma.UpcomingMilstoneDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UpcomingMilstoneUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UpcomingMilstoneUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UpcomingMilstonePayload>
          }
          aggregate: {
            args: Prisma.UpcomingMilstoneAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUpcomingMilstone>
          }
          groupBy: {
            args: Prisma.UpcomingMilstoneGroupByArgs<ExtArgs>
            result: $Utils.Optional<UpcomingMilstoneGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UpcomingMilstoneFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.UpcomingMilstoneAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.UpcomingMilstoneCountArgs<ExtArgs>
            result: $Utils.Optional<UpcomingMilstoneCountAggregateOutputType> | number
          }
        }
      }
      CheckList: {
        payload: Prisma.$CheckListPayload<ExtArgs>
        fields: Prisma.CheckListFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CheckListFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckListPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CheckListFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckListPayload>
          }
          findFirst: {
            args: Prisma.CheckListFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckListPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CheckListFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckListPayload>
          }
          findMany: {
            args: Prisma.CheckListFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckListPayload>[]
          }
          create: {
            args: Prisma.CheckListCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckListPayload>
          }
          createMany: {
            args: Prisma.CheckListCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CheckListDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckListPayload>
          }
          update: {
            args: Prisma.CheckListUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckListPayload>
          }
          deleteMany: {
            args: Prisma.CheckListDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CheckListUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CheckListUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CheckListPayload>
          }
          aggregate: {
            args: Prisma.CheckListAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCheckList>
          }
          groupBy: {
            args: Prisma.CheckListGroupByArgs<ExtArgs>
            result: $Utils.Optional<CheckListGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.CheckListFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.CheckListAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.CheckListCountArgs<ExtArgs>
            result: $Utils.Optional<CheckListCountAggregateOutputType> | number
          }
        }
      }
      Documents: {
        payload: Prisma.$DocumentsPayload<ExtArgs>
        fields: Prisma.DocumentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentsPayload>
          }
          findFirst: {
            args: Prisma.DocumentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentsPayload>
          }
          findMany: {
            args: Prisma.DocumentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentsPayload>[]
          }
          create: {
            args: Prisma.DocumentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentsPayload>
          }
          createMany: {
            args: Prisma.DocumentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DocumentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentsPayload>
          }
          update: {
            args: Prisma.DocumentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentsPayload>
          }
          deleteMany: {
            args: Prisma.DocumentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DocumentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentsPayload>
          }
          aggregate: {
            args: Prisma.DocumentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocuments>
          }
          groupBy: {
            args: Prisma.DocumentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentsGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.DocumentsFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.DocumentsAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.DocumentsCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentsCountAggregateOutputType> | number
          }
        }
      }
      TheIncomingLetter: {
        payload: Prisma.$TheIncomingLetterPayload<ExtArgs>
        fields: Prisma.TheIncomingLetterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TheIncomingLetterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TheIncomingLetterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TheIncomingLetterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TheIncomingLetterPayload>
          }
          findFirst: {
            args: Prisma.TheIncomingLetterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TheIncomingLetterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TheIncomingLetterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TheIncomingLetterPayload>
          }
          findMany: {
            args: Prisma.TheIncomingLetterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TheIncomingLetterPayload>[]
          }
          create: {
            args: Prisma.TheIncomingLetterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TheIncomingLetterPayload>
          }
          createMany: {
            args: Prisma.TheIncomingLetterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TheIncomingLetterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TheIncomingLetterPayload>
          }
          update: {
            args: Prisma.TheIncomingLetterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TheIncomingLetterPayload>
          }
          deleteMany: {
            args: Prisma.TheIncomingLetterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TheIncomingLetterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TheIncomingLetterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TheIncomingLetterPayload>
          }
          aggregate: {
            args: Prisma.TheIncomingLetterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTheIncomingLetter>
          }
          groupBy: {
            args: Prisma.TheIncomingLetterGroupByArgs<ExtArgs>
            result: $Utils.Optional<TheIncomingLetterGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.TheIncomingLetterFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.TheIncomingLetterAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.TheIncomingLetterCountArgs<ExtArgs>
            result: $Utils.Optional<TheIncomingLetterCountAggregateOutputType> | number
          }
        }
      }
      TheOutgoingLetter: {
        payload: Prisma.$TheOutgoingLetterPayload<ExtArgs>
        fields: Prisma.TheOutgoingLetterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TheOutgoingLetterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TheOutgoingLetterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TheOutgoingLetterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TheOutgoingLetterPayload>
          }
          findFirst: {
            args: Prisma.TheOutgoingLetterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TheOutgoingLetterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TheOutgoingLetterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TheOutgoingLetterPayload>
          }
          findMany: {
            args: Prisma.TheOutgoingLetterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TheOutgoingLetterPayload>[]
          }
          create: {
            args: Prisma.TheOutgoingLetterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TheOutgoingLetterPayload>
          }
          createMany: {
            args: Prisma.TheOutgoingLetterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TheOutgoingLetterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TheOutgoingLetterPayload>
          }
          update: {
            args: Prisma.TheOutgoingLetterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TheOutgoingLetterPayload>
          }
          deleteMany: {
            args: Prisma.TheOutgoingLetterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TheOutgoingLetterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TheOutgoingLetterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TheOutgoingLetterPayload>
          }
          aggregate: {
            args: Prisma.TheOutgoingLetterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTheOutgoingLetter>
          }
          groupBy: {
            args: Prisma.TheOutgoingLetterGroupByArgs<ExtArgs>
            result: $Utils.Optional<TheOutgoingLetterGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.TheOutgoingLetterFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.TheOutgoingLetterAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.TheOutgoingLetterCountArgs<ExtArgs>
            result: $Utils.Optional<TheOutgoingLetterCountAggregateOutputType> | number
          }
        }
      }
      Report: {
        payload: Prisma.$ReportPayload<ExtArgs>
        fields: Prisma.ReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findFirst: {
            args: Prisma.ReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findMany: {
            args: Prisma.ReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          create: {
            args: Prisma.ReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          createMany: {
            args: Prisma.ReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          update: {
            args: Prisma.ReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          deleteMany: {
            args: Prisma.ReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          aggregate: {
            args: Prisma.ReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReport>
          }
          groupBy: {
            args: Prisma.ReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ReportFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ReportAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ReportCountArgs<ExtArgs>
            result: $Utils.Optional<ReportCountAggregateOutputType> | number
          }
        }
      }
      ConstructionSiteImage: {
        payload: Prisma.$ConstructionSiteImagePayload<ExtArgs>
        fields: Prisma.ConstructionSiteImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConstructionSiteImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConstructionSiteImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConstructionSiteImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConstructionSiteImagePayload>
          }
          findFirst: {
            args: Prisma.ConstructionSiteImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConstructionSiteImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConstructionSiteImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConstructionSiteImagePayload>
          }
          findMany: {
            args: Prisma.ConstructionSiteImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConstructionSiteImagePayload>[]
          }
          create: {
            args: Prisma.ConstructionSiteImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConstructionSiteImagePayload>
          }
          createMany: {
            args: Prisma.ConstructionSiteImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ConstructionSiteImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConstructionSiteImagePayload>
          }
          update: {
            args: Prisma.ConstructionSiteImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConstructionSiteImagePayload>
          }
          deleteMany: {
            args: Prisma.ConstructionSiteImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConstructionSiteImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ConstructionSiteImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConstructionSiteImagePayload>
          }
          aggregate: {
            args: Prisma.ConstructionSiteImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConstructionSiteImage>
          }
          groupBy: {
            args: Prisma.ConstructionSiteImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConstructionSiteImageGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ConstructionSiteImageFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ConstructionSiteImageAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ConstructionSiteImageCountArgs<ExtArgs>
            result: $Utils.Optional<ConstructionSiteImageCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    project?: ProjectOmit
    budget?: BudgetOmit
    team?: TeamOmit
    upcomingMilstone?: UpcomingMilstoneOmit
    checkList?: CheckListOmit
    documents?: DocumentsOmit
    theIncomingLetter?: TheIncomingLetterOmit
    theOutgoingLetter?: TheOutgoingLetterOmit
    report?: ReportOmit
    constructionSiteImage?: ConstructionSiteImageOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    budget: number
    team: number
    checkList: number
    documents: number
    theIncomingLetter: number
    theOutgoingLetter: number
    report: number
    constructionSiteImage: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    budget?: boolean | ProjectCountOutputTypeCountBudgetArgs
    team?: boolean | ProjectCountOutputTypeCountTeamArgs
    checkList?: boolean | ProjectCountOutputTypeCountCheckListArgs
    documents?: boolean | ProjectCountOutputTypeCountDocumentsArgs
    theIncomingLetter?: boolean | ProjectCountOutputTypeCountTheIncomingLetterArgs
    theOutgoingLetter?: boolean | ProjectCountOutputTypeCountTheOutgoingLetterArgs
    report?: boolean | ProjectCountOutputTypeCountReportArgs
    constructionSiteImage?: boolean | ProjectCountOutputTypeCountConstructionSiteImageArgs
  }

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountBudgetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BudgetWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountCheckListArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CheckListWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentsWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountTheIncomingLetterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TheIncomingLetterWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountTheOutgoingLetterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TheOutgoingLetterWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountConstructionSiteImageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConstructionSiteImageWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    password: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "password" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      password: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: UserFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: UserAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User findRaw
   */
  export type UserFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User aggregateRaw
   */
  export type UserAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
  }


  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectAvgAggregateOutputType = {
    progress: number | null
  }

  export type ProjectSumAggregateOutputType = {
    progress: number | null
  }

  export type ProjectMinAggregateOutputType = {
    id: string | null
    projectName: string | null
    clientName: string | null
    location: string | null
    startDate: Date | null
    dueDate: Date | null
    progress: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: string | null
    projectName: string | null
    clientName: string | null
    location: string | null
    startDate: Date | null
    dueDate: Date | null
    progress: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    projectName: number
    clientName: number
    location: number
    startDate: number
    dueDate: number
    progress: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProjectAvgAggregateInputType = {
    progress?: true
  }

  export type ProjectSumAggregateInputType = {
    progress?: true
  }

  export type ProjectMinAggregateInputType = {
    id?: true
    projectName?: true
    clientName?: true
    location?: true
    startDate?: true
    dueDate?: true
    progress?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    projectName?: true
    clientName?: true
    location?: true
    startDate?: true
    dueDate?: true
    progress?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    projectName?: true
    clientName?: true
    location?: true
    startDate?: true
    dueDate?: true
    progress?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _avg?: ProjectAvgAggregateInputType
    _sum?: ProjectSumAggregateInputType
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    id: string
    projectName: string
    clientName: string
    location: string
    startDate: Date
    dueDate: Date
    progress: number
    createdAt: Date
    updatedAt: Date
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectName?: boolean
    clientName?: boolean
    location?: boolean
    startDate?: boolean
    dueDate?: boolean
    progress?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    budget?: boolean | Project$budgetArgs<ExtArgs>
    team?: boolean | Project$teamArgs<ExtArgs>
    upcomingMilstone?: boolean | Project$upcomingMilstoneArgs<ExtArgs>
    checkList?: boolean | Project$checkListArgs<ExtArgs>
    documents?: boolean | Project$documentsArgs<ExtArgs>
    theIncomingLetter?: boolean | Project$theIncomingLetterArgs<ExtArgs>
    theOutgoingLetter?: boolean | Project$theOutgoingLetterArgs<ExtArgs>
    report?: boolean | Project$reportArgs<ExtArgs>
    constructionSiteImage?: boolean | Project$constructionSiteImageArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>



  export type ProjectSelectScalar = {
    id?: boolean
    projectName?: boolean
    clientName?: boolean
    location?: boolean
    startDate?: boolean
    dueDate?: boolean
    progress?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "projectName" | "clientName" | "location" | "startDate" | "dueDate" | "progress" | "createdAt" | "updatedAt", ExtArgs["result"]["project"]>
  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    budget?: boolean | Project$budgetArgs<ExtArgs>
    team?: boolean | Project$teamArgs<ExtArgs>
    upcomingMilstone?: boolean | Project$upcomingMilstoneArgs<ExtArgs>
    checkList?: boolean | Project$checkListArgs<ExtArgs>
    documents?: boolean | Project$documentsArgs<ExtArgs>
    theIncomingLetter?: boolean | Project$theIncomingLetterArgs<ExtArgs>
    theOutgoingLetter?: boolean | Project$theOutgoingLetterArgs<ExtArgs>
    report?: boolean | Project$reportArgs<ExtArgs>
    constructionSiteImage?: boolean | Project$constructionSiteImageArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      budget: Prisma.$BudgetPayload<ExtArgs>[]
      team: Prisma.$TeamPayload<ExtArgs>[]
      upcomingMilstone: Prisma.$UpcomingMilstonePayload<ExtArgs> | null
      checkList: Prisma.$CheckListPayload<ExtArgs>[]
      documents: Prisma.$DocumentsPayload<ExtArgs>[]
      theIncomingLetter: Prisma.$TheIncomingLetterPayload<ExtArgs>[]
      theOutgoingLetter: Prisma.$TheOutgoingLetterPayload<ExtArgs>[]
      report: Prisma.$ReportPayload<ExtArgs>[]
      constructionSiteImage: Prisma.$ConstructionSiteImagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      projectName: string
      clientName: string
      location: string
      startDate: Date
      dueDate: Date
      progress: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["project"]>
    composites: {}
  }

  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectFindUniqueArgs>(args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectFindFirstArgs>(args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectFindManyArgs>(args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
     */
    create<T extends ProjectCreateArgs>(args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Projects.
     * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectCreateManyArgs>(args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
     */
    delete<T extends ProjectDeleteArgs>(args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectUpdateArgs>(args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectDeleteManyArgs>(args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectUpdateManyArgs>(args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     */
    upsert<T extends ProjectUpsertArgs>(args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Projects that matches the filter.
     * @param {ProjectFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const project = await prisma.project.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ProjectFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Project.
     * @param {ProjectAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const project = await prisma.project.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ProjectAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    budget<T extends Project$budgetArgs<ExtArgs> = {}>(args?: Subset<T, Project$budgetArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    team<T extends Project$teamArgs<ExtArgs> = {}>(args?: Subset<T, Project$teamArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    upcomingMilstone<T extends Project$upcomingMilstoneArgs<ExtArgs> = {}>(args?: Subset<T, Project$upcomingMilstoneArgs<ExtArgs>>): Prisma__UpcomingMilstoneClient<$Result.GetResult<Prisma.$UpcomingMilstonePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    checkList<T extends Project$checkListArgs<ExtArgs> = {}>(args?: Subset<T, Project$checkListArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckListPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documents<T extends Project$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Project$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    theIncomingLetter<T extends Project$theIncomingLetterArgs<ExtArgs> = {}>(args?: Subset<T, Project$theIncomingLetterArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TheIncomingLetterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    theOutgoingLetter<T extends Project$theOutgoingLetterArgs<ExtArgs> = {}>(args?: Subset<T, Project$theOutgoingLetterArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TheOutgoingLetterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    report<T extends Project$reportArgs<ExtArgs> = {}>(args?: Subset<T, Project$reportArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    constructionSiteImage<T extends Project$constructionSiteImageArgs<ExtArgs> = {}>(args?: Subset<T, Project$constructionSiteImageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConstructionSiteImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Project model
   */ 
  interface ProjectFieldRefs {
    readonly id: FieldRef<"Project", 'String'>
    readonly projectName: FieldRef<"Project", 'String'>
    readonly clientName: FieldRef<"Project", 'String'>
    readonly location: FieldRef<"Project", 'String'>
    readonly startDate: FieldRef<"Project", 'DateTime'>
    readonly dueDate: FieldRef<"Project", 'DateTime'>
    readonly progress: FieldRef<"Project", 'Int'>
    readonly createdAt: FieldRef<"Project", 'DateTime'>
    readonly updatedAt: FieldRef<"Project", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
  }

  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to update.
     */
    limit?: number
  }

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }

  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to delete.
     */
    limit?: number
  }

  /**
   * Project findRaw
   */
  export type ProjectFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Project aggregateRaw
   */
  export type ProjectAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Project.budget
   */
  export type Project$budgetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    where?: BudgetWhereInput
    orderBy?: BudgetOrderByWithRelationInput | BudgetOrderByWithRelationInput[]
    cursor?: BudgetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BudgetScalarFieldEnum | BudgetScalarFieldEnum[]
  }

  /**
   * Project.team
   */
  export type Project$teamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    cursor?: TeamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Project.upcomingMilstone
   */
  export type Project$upcomingMilstoneArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpcomingMilstone
     */
    select?: UpcomingMilstoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpcomingMilstone
     */
    omit?: UpcomingMilstoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpcomingMilstoneInclude<ExtArgs> | null
    where?: UpcomingMilstoneWhereInput
  }

  /**
   * Project.checkList
   */
  export type Project$checkListArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckList
     */
    select?: CheckListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckList
     */
    omit?: CheckListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckListInclude<ExtArgs> | null
    where?: CheckListWhereInput
    orderBy?: CheckListOrderByWithRelationInput | CheckListOrderByWithRelationInput[]
    cursor?: CheckListWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CheckListScalarFieldEnum | CheckListScalarFieldEnum[]
  }

  /**
   * Project.documents
   */
  export type Project$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documents
     */
    select?: DocumentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documents
     */
    omit?: DocumentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentsInclude<ExtArgs> | null
    where?: DocumentsWhereInput
    orderBy?: DocumentsOrderByWithRelationInput | DocumentsOrderByWithRelationInput[]
    cursor?: DocumentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentsScalarFieldEnum | DocumentsScalarFieldEnum[]
  }

  /**
   * Project.theIncomingLetter
   */
  export type Project$theIncomingLetterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TheIncomingLetter
     */
    select?: TheIncomingLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TheIncomingLetter
     */
    omit?: TheIncomingLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheIncomingLetterInclude<ExtArgs> | null
    where?: TheIncomingLetterWhereInput
    orderBy?: TheIncomingLetterOrderByWithRelationInput | TheIncomingLetterOrderByWithRelationInput[]
    cursor?: TheIncomingLetterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TheIncomingLetterScalarFieldEnum | TheIncomingLetterScalarFieldEnum[]
  }

  /**
   * Project.theOutgoingLetter
   */
  export type Project$theOutgoingLetterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TheOutgoingLetter
     */
    select?: TheOutgoingLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TheOutgoingLetter
     */
    omit?: TheOutgoingLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheOutgoingLetterInclude<ExtArgs> | null
    where?: TheOutgoingLetterWhereInput
    orderBy?: TheOutgoingLetterOrderByWithRelationInput | TheOutgoingLetterOrderByWithRelationInput[]
    cursor?: TheOutgoingLetterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TheOutgoingLetterScalarFieldEnum | TheOutgoingLetterScalarFieldEnum[]
  }

  /**
   * Project.report
   */
  export type Project$reportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Project.constructionSiteImage
   */
  export type Project$constructionSiteImageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConstructionSiteImage
     */
    select?: ConstructionSiteImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConstructionSiteImage
     */
    omit?: ConstructionSiteImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConstructionSiteImageInclude<ExtArgs> | null
    where?: ConstructionSiteImageWhereInput
    orderBy?: ConstructionSiteImageOrderByWithRelationInput | ConstructionSiteImageOrderByWithRelationInput[]
    cursor?: ConstructionSiteImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConstructionSiteImageScalarFieldEnum | ConstructionSiteImageScalarFieldEnum[]
  }

  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
  }


  /**
   * Model Budget
   */

  export type AggregateBudget = {
    _count: BudgetCountAggregateOutputType | null
    _avg: BudgetAvgAggregateOutputType | null
    _sum: BudgetSumAggregateOutputType | null
    _min: BudgetMinAggregateOutputType | null
    _max: BudgetMaxAggregateOutputType | null
  }

  export type BudgetAvgAggregateOutputType = {
    total: number | null
    spent: number | null
  }

  export type BudgetSumAggregateOutputType = {
    total: number | null
    spent: number | null
  }

  export type BudgetMinAggregateOutputType = {
    id: string | null
    total: number | null
    spent: number | null
    projectId: string | null
  }

  export type BudgetMaxAggregateOutputType = {
    id: string | null
    total: number | null
    spent: number | null
    projectId: string | null
  }

  export type BudgetCountAggregateOutputType = {
    id: number
    total: number
    spent: number
    projectId: number
    _all: number
  }


  export type BudgetAvgAggregateInputType = {
    total?: true
    spent?: true
  }

  export type BudgetSumAggregateInputType = {
    total?: true
    spent?: true
  }

  export type BudgetMinAggregateInputType = {
    id?: true
    total?: true
    spent?: true
    projectId?: true
  }

  export type BudgetMaxAggregateInputType = {
    id?: true
    total?: true
    spent?: true
    projectId?: true
  }

  export type BudgetCountAggregateInputType = {
    id?: true
    total?: true
    spent?: true
    projectId?: true
    _all?: true
  }

  export type BudgetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Budget to aggregate.
     */
    where?: BudgetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Budgets to fetch.
     */
    orderBy?: BudgetOrderByWithRelationInput | BudgetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BudgetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Budgets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Budgets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Budgets
    **/
    _count?: true | BudgetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BudgetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BudgetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BudgetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BudgetMaxAggregateInputType
  }

  export type GetBudgetAggregateType<T extends BudgetAggregateArgs> = {
        [P in keyof T & keyof AggregateBudget]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBudget[P]>
      : GetScalarType<T[P], AggregateBudget[P]>
  }




  export type BudgetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BudgetWhereInput
    orderBy?: BudgetOrderByWithAggregationInput | BudgetOrderByWithAggregationInput[]
    by: BudgetScalarFieldEnum[] | BudgetScalarFieldEnum
    having?: BudgetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BudgetCountAggregateInputType | true
    _avg?: BudgetAvgAggregateInputType
    _sum?: BudgetSumAggregateInputType
    _min?: BudgetMinAggregateInputType
    _max?: BudgetMaxAggregateInputType
  }

  export type BudgetGroupByOutputType = {
    id: string
    total: number
    spent: number
    projectId: string
    _count: BudgetCountAggregateOutputType | null
    _avg: BudgetAvgAggregateOutputType | null
    _sum: BudgetSumAggregateOutputType | null
    _min: BudgetMinAggregateOutputType | null
    _max: BudgetMaxAggregateOutputType | null
  }

  type GetBudgetGroupByPayload<T extends BudgetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BudgetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BudgetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BudgetGroupByOutputType[P]>
            : GetScalarType<T[P], BudgetGroupByOutputType[P]>
        }
      >
    >


  export type BudgetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    total?: boolean
    spent?: boolean
    projectId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["budget"]>



  export type BudgetSelectScalar = {
    id?: boolean
    total?: boolean
    spent?: boolean
    projectId?: boolean
  }

  export type BudgetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "total" | "spent" | "projectId", ExtArgs["result"]["budget"]>
  export type BudgetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $BudgetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Budget"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      total: number
      spent: number
      projectId: string
    }, ExtArgs["result"]["budget"]>
    composites: {}
  }

  type BudgetGetPayload<S extends boolean | null | undefined | BudgetDefaultArgs> = $Result.GetResult<Prisma.$BudgetPayload, S>

  type BudgetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BudgetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BudgetCountAggregateInputType | true
    }

  export interface BudgetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Budget'], meta: { name: 'Budget' } }
    /**
     * Find zero or one Budget that matches the filter.
     * @param {BudgetFindUniqueArgs} args - Arguments to find a Budget
     * @example
     * // Get one Budget
     * const budget = await prisma.budget.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BudgetFindUniqueArgs>(args: SelectSubset<T, BudgetFindUniqueArgs<ExtArgs>>): Prisma__BudgetClient<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Budget that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BudgetFindUniqueOrThrowArgs} args - Arguments to find a Budget
     * @example
     * // Get one Budget
     * const budget = await prisma.budget.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BudgetFindUniqueOrThrowArgs>(args: SelectSubset<T, BudgetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BudgetClient<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Budget that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetFindFirstArgs} args - Arguments to find a Budget
     * @example
     * // Get one Budget
     * const budget = await prisma.budget.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BudgetFindFirstArgs>(args?: SelectSubset<T, BudgetFindFirstArgs<ExtArgs>>): Prisma__BudgetClient<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Budget that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetFindFirstOrThrowArgs} args - Arguments to find a Budget
     * @example
     * // Get one Budget
     * const budget = await prisma.budget.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BudgetFindFirstOrThrowArgs>(args?: SelectSubset<T, BudgetFindFirstOrThrowArgs<ExtArgs>>): Prisma__BudgetClient<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Budgets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Budgets
     * const budgets = await prisma.budget.findMany()
     * 
     * // Get first 10 Budgets
     * const budgets = await prisma.budget.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const budgetWithIdOnly = await prisma.budget.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BudgetFindManyArgs>(args?: SelectSubset<T, BudgetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Budget.
     * @param {BudgetCreateArgs} args - Arguments to create a Budget.
     * @example
     * // Create one Budget
     * const Budget = await prisma.budget.create({
     *   data: {
     *     // ... data to create a Budget
     *   }
     * })
     * 
     */
    create<T extends BudgetCreateArgs>(args: SelectSubset<T, BudgetCreateArgs<ExtArgs>>): Prisma__BudgetClient<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Budgets.
     * @param {BudgetCreateManyArgs} args - Arguments to create many Budgets.
     * @example
     * // Create many Budgets
     * const budget = await prisma.budget.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BudgetCreateManyArgs>(args?: SelectSubset<T, BudgetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Budget.
     * @param {BudgetDeleteArgs} args - Arguments to delete one Budget.
     * @example
     * // Delete one Budget
     * const Budget = await prisma.budget.delete({
     *   where: {
     *     // ... filter to delete one Budget
     *   }
     * })
     * 
     */
    delete<T extends BudgetDeleteArgs>(args: SelectSubset<T, BudgetDeleteArgs<ExtArgs>>): Prisma__BudgetClient<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Budget.
     * @param {BudgetUpdateArgs} args - Arguments to update one Budget.
     * @example
     * // Update one Budget
     * const budget = await prisma.budget.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BudgetUpdateArgs>(args: SelectSubset<T, BudgetUpdateArgs<ExtArgs>>): Prisma__BudgetClient<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Budgets.
     * @param {BudgetDeleteManyArgs} args - Arguments to filter Budgets to delete.
     * @example
     * // Delete a few Budgets
     * const { count } = await prisma.budget.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BudgetDeleteManyArgs>(args?: SelectSubset<T, BudgetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Budgets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Budgets
     * const budget = await prisma.budget.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BudgetUpdateManyArgs>(args: SelectSubset<T, BudgetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Budget.
     * @param {BudgetUpsertArgs} args - Arguments to update or create a Budget.
     * @example
     * // Update or create a Budget
     * const budget = await prisma.budget.upsert({
     *   create: {
     *     // ... data to create a Budget
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Budget we want to update
     *   }
     * })
     */
    upsert<T extends BudgetUpsertArgs>(args: SelectSubset<T, BudgetUpsertArgs<ExtArgs>>): Prisma__BudgetClient<$Result.GetResult<Prisma.$BudgetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Budgets that matches the filter.
     * @param {BudgetFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const budget = await prisma.budget.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: BudgetFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Budget.
     * @param {BudgetAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const budget = await prisma.budget.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: BudgetAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Budgets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetCountArgs} args - Arguments to filter Budgets to count.
     * @example
     * // Count the number of Budgets
     * const count = await prisma.budget.count({
     *   where: {
     *     // ... the filter for the Budgets we want to count
     *   }
     * })
    **/
    count<T extends BudgetCountArgs>(
      args?: Subset<T, BudgetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BudgetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Budget.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BudgetAggregateArgs>(args: Subset<T, BudgetAggregateArgs>): Prisma.PrismaPromise<GetBudgetAggregateType<T>>

    /**
     * Group by Budget.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BudgetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BudgetGroupByArgs['orderBy'] }
        : { orderBy?: BudgetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BudgetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBudgetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Budget model
   */
  readonly fields: BudgetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Budget.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BudgetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Budget model
   */ 
  interface BudgetFieldRefs {
    readonly id: FieldRef<"Budget", 'String'>
    readonly total: FieldRef<"Budget", 'Float'>
    readonly spent: FieldRef<"Budget", 'Float'>
    readonly projectId: FieldRef<"Budget", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Budget findUnique
   */
  export type BudgetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    /**
     * Filter, which Budget to fetch.
     */
    where: BudgetWhereUniqueInput
  }

  /**
   * Budget findUniqueOrThrow
   */
  export type BudgetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    /**
     * Filter, which Budget to fetch.
     */
    where: BudgetWhereUniqueInput
  }

  /**
   * Budget findFirst
   */
  export type BudgetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    /**
     * Filter, which Budget to fetch.
     */
    where?: BudgetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Budgets to fetch.
     */
    orderBy?: BudgetOrderByWithRelationInput | BudgetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Budgets.
     */
    cursor?: BudgetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Budgets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Budgets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Budgets.
     */
    distinct?: BudgetScalarFieldEnum | BudgetScalarFieldEnum[]
  }

  /**
   * Budget findFirstOrThrow
   */
  export type BudgetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    /**
     * Filter, which Budget to fetch.
     */
    where?: BudgetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Budgets to fetch.
     */
    orderBy?: BudgetOrderByWithRelationInput | BudgetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Budgets.
     */
    cursor?: BudgetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Budgets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Budgets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Budgets.
     */
    distinct?: BudgetScalarFieldEnum | BudgetScalarFieldEnum[]
  }

  /**
   * Budget findMany
   */
  export type BudgetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    /**
     * Filter, which Budgets to fetch.
     */
    where?: BudgetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Budgets to fetch.
     */
    orderBy?: BudgetOrderByWithRelationInput | BudgetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Budgets.
     */
    cursor?: BudgetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Budgets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Budgets.
     */
    skip?: number
    distinct?: BudgetScalarFieldEnum | BudgetScalarFieldEnum[]
  }

  /**
   * Budget create
   */
  export type BudgetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    /**
     * The data needed to create a Budget.
     */
    data: XOR<BudgetCreateInput, BudgetUncheckedCreateInput>
  }

  /**
   * Budget createMany
   */
  export type BudgetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Budgets.
     */
    data: BudgetCreateManyInput | BudgetCreateManyInput[]
  }

  /**
   * Budget update
   */
  export type BudgetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    /**
     * The data needed to update a Budget.
     */
    data: XOR<BudgetUpdateInput, BudgetUncheckedUpdateInput>
    /**
     * Choose, which Budget to update.
     */
    where: BudgetWhereUniqueInput
  }

  /**
   * Budget updateMany
   */
  export type BudgetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Budgets.
     */
    data: XOR<BudgetUpdateManyMutationInput, BudgetUncheckedUpdateManyInput>
    /**
     * Filter which Budgets to update
     */
    where?: BudgetWhereInput
    /**
     * Limit how many Budgets to update.
     */
    limit?: number
  }

  /**
   * Budget upsert
   */
  export type BudgetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    /**
     * The filter to search for the Budget to update in case it exists.
     */
    where: BudgetWhereUniqueInput
    /**
     * In case the Budget found by the `where` argument doesn't exist, create a new Budget with this data.
     */
    create: XOR<BudgetCreateInput, BudgetUncheckedCreateInput>
    /**
     * In case the Budget was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BudgetUpdateInput, BudgetUncheckedUpdateInput>
  }

  /**
   * Budget delete
   */
  export type BudgetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
    /**
     * Filter which Budget to delete.
     */
    where: BudgetWhereUniqueInput
  }

  /**
   * Budget deleteMany
   */
  export type BudgetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Budgets to delete
     */
    where?: BudgetWhereInput
    /**
     * Limit how many Budgets to delete.
     */
    limit?: number
  }

  /**
   * Budget findRaw
   */
  export type BudgetFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Budget aggregateRaw
   */
  export type BudgetAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Budget without action
   */
  export type BudgetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budget
     */
    select?: BudgetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budget
     */
    omit?: BudgetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetInclude<ExtArgs> | null
  }


  /**
   * Model Team
   */

  export type AggregateTeam = {
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  export type TeamAvgAggregateOutputType = {
    totalWorker: number | null
  }

  export type TeamSumAggregateOutputType = {
    totalWorker: number | null
  }

  export type TeamMinAggregateOutputType = {
    id: string | null
    projectManger: string | null
    siteManger: string | null
    civilManger: string | null
    architecturalLoad: string | null
    totalWorker: number | null
    projectId: string | null
  }

  export type TeamMaxAggregateOutputType = {
    id: string | null
    projectManger: string | null
    siteManger: string | null
    civilManger: string | null
    architecturalLoad: string | null
    totalWorker: number | null
    projectId: string | null
  }

  export type TeamCountAggregateOutputType = {
    id: number
    projectManger: number
    siteManger: number
    civilManger: number
    architecturalLoad: number
    totalWorker: number
    projectId: number
    _all: number
  }


  export type TeamAvgAggregateInputType = {
    totalWorker?: true
  }

  export type TeamSumAggregateInputType = {
    totalWorker?: true
  }

  export type TeamMinAggregateInputType = {
    id?: true
    projectManger?: true
    siteManger?: true
    civilManger?: true
    architecturalLoad?: true
    totalWorker?: true
    projectId?: true
  }

  export type TeamMaxAggregateInputType = {
    id?: true
    projectManger?: true
    siteManger?: true
    civilManger?: true
    architecturalLoad?: true
    totalWorker?: true
    projectId?: true
  }

  export type TeamCountAggregateInputType = {
    id?: true
    projectManger?: true
    siteManger?: true
    civilManger?: true
    architecturalLoad?: true
    totalWorker?: true
    projectId?: true
    _all?: true
  }

  export type TeamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Team to aggregate.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMaxAggregateInputType
  }

  export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam[P]>
      : GetScalarType<T[P], AggregateTeam[P]>
  }




  export type TeamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithAggregationInput | TeamOrderByWithAggregationInput[]
    by: TeamScalarFieldEnum[] | TeamScalarFieldEnum
    having?: TeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCountAggregateInputType | true
    _avg?: TeamAvgAggregateInputType
    _sum?: TeamSumAggregateInputType
    _min?: TeamMinAggregateInputType
    _max?: TeamMaxAggregateInputType
  }

  export type TeamGroupByOutputType = {
    id: string
    projectManger: string
    siteManger: string
    civilManger: string
    architecturalLoad: string
    totalWorker: number
    projectId: string
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  type GetTeamGroupByPayload<T extends TeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamGroupByOutputType[P]>
            : GetScalarType<T[P], TeamGroupByOutputType[P]>
        }
      >
    >


  export type TeamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectManger?: boolean
    siteManger?: boolean
    civilManger?: boolean
    architecturalLoad?: boolean
    totalWorker?: boolean
    projectId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>



  export type TeamSelectScalar = {
    id?: boolean
    projectManger?: boolean
    siteManger?: boolean
    civilManger?: boolean
    architecturalLoad?: boolean
    totalWorker?: boolean
    projectId?: boolean
  }

  export type TeamOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "projectManger" | "siteManger" | "civilManger" | "architecturalLoad" | "totalWorker" | "projectId", ExtArgs["result"]["team"]>
  export type TeamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $TeamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Team"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      projectManger: string
      siteManger: string
      civilManger: string
      architecturalLoad: string
      totalWorker: number
      projectId: string
    }, ExtArgs["result"]["team"]>
    composites: {}
  }

  type TeamGetPayload<S extends boolean | null | undefined | TeamDefaultArgs> = $Result.GetResult<Prisma.$TeamPayload, S>

  type TeamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamCountAggregateInputType | true
    }

  export interface TeamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Team'], meta: { name: 'Team' } }
    /**
     * Find zero or one Team that matches the filter.
     * @param {TeamFindUniqueArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamFindUniqueArgs>(args: SelectSubset<T, TeamFindUniqueArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Team that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamFindUniqueOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Team that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamFindFirstArgs>(args?: SelectSubset<T, TeamFindFirstArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Team that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.team.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.team.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamWithIdOnly = await prisma.team.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamFindManyArgs>(args?: SelectSubset<T, TeamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Team.
     * @param {TeamCreateArgs} args - Arguments to create a Team.
     * @example
     * // Create one Team
     * const Team = await prisma.team.create({
     *   data: {
     *     // ... data to create a Team
     *   }
     * })
     * 
     */
    create<T extends TeamCreateArgs>(args: SelectSubset<T, TeamCreateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Teams.
     * @param {TeamCreateManyArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamCreateManyArgs>(args?: SelectSubset<T, TeamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Team.
     * @param {TeamDeleteArgs} args - Arguments to delete one Team.
     * @example
     * // Delete one Team
     * const Team = await prisma.team.delete({
     *   where: {
     *     // ... filter to delete one Team
     *   }
     * })
     * 
     */
    delete<T extends TeamDeleteArgs>(args: SelectSubset<T, TeamDeleteArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Team.
     * @param {TeamUpdateArgs} args - Arguments to update one Team.
     * @example
     * // Update one Team
     * const team = await prisma.team.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamUpdateArgs>(args: SelectSubset<T, TeamUpdateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Teams.
     * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.team.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamDeleteManyArgs>(args?: SelectSubset<T, TeamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamUpdateManyArgs>(args: SelectSubset<T, TeamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Team.
     * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
     * @example
     * // Update or create a Team
     * const team = await prisma.team.upsert({
     *   create: {
     *     // ... data to create a Team
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team we want to update
     *   }
     * })
     */
    upsert<T extends TeamUpsertArgs>(args: SelectSubset<T, TeamUpsertArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Teams that matches the filter.
     * @param {TeamFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const team = await prisma.team.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: TeamFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Team.
     * @param {TeamAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const team = await prisma.team.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: TeamAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.team.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamCountArgs>(
      args?: Subset<T, TeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAggregateArgs>(args: Subset<T, TeamAggregateArgs>): Prisma.PrismaPromise<GetTeamAggregateType<T>>

    /**
     * Group by Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamGroupByArgs['orderBy'] }
        : { orderBy?: TeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Team model
   */
  readonly fields: TeamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Team.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Team model
   */ 
  interface TeamFieldRefs {
    readonly id: FieldRef<"Team", 'String'>
    readonly projectManger: FieldRef<"Team", 'String'>
    readonly siteManger: FieldRef<"Team", 'String'>
    readonly civilManger: FieldRef<"Team", 'String'>
    readonly architecturalLoad: FieldRef<"Team", 'String'>
    readonly totalWorker: FieldRef<"Team", 'Int'>
    readonly projectId: FieldRef<"Team", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Team findUnique
   */
  export type TeamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findUniqueOrThrow
   */
  export type TeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findFirst
   */
  export type TeamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findFirstOrThrow
   */
  export type TeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findMany
   */
  export type TeamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team create
   */
  export type TeamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to create a Team.
     */
    data: XOR<TeamCreateInput, TeamUncheckedCreateInput>
  }

  /**
   * Team createMany
   */
  export type TeamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
  }

  /**
   * Team update
   */
  export type TeamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to update a Team.
     */
    data: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
    /**
     * Choose, which Team to update.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team updateMany
   */
  export type TeamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to update.
     */
    limit?: number
  }

  /**
   * Team upsert
   */
  export type TeamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The filter to search for the Team to update in case it exists.
     */
    where: TeamWhereUniqueInput
    /**
     * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
     */
    create: XOR<TeamCreateInput, TeamUncheckedCreateInput>
    /**
     * In case the Team was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
  }

  /**
   * Team delete
   */
  export type TeamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter which Team to delete.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team deleteMany
   */
  export type TeamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to delete
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to delete.
     */
    limit?: number
  }

  /**
   * Team findRaw
   */
  export type TeamFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Team aggregateRaw
   */
  export type TeamAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Team without action
   */
  export type TeamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
  }


  /**
   * Model UpcomingMilstone
   */

  export type AggregateUpcomingMilstone = {
    _count: UpcomingMilstoneCountAggregateOutputType | null
    _min: UpcomingMilstoneMinAggregateOutputType | null
    _max: UpcomingMilstoneMaxAggregateOutputType | null
  }

  export type UpcomingMilstoneMinAggregateOutputType = {
    id: string | null
    title: string | null
    date: Date | null
    status: $Enums.Status | null
    projectId: string | null
  }

  export type UpcomingMilstoneMaxAggregateOutputType = {
    id: string | null
    title: string | null
    date: Date | null
    status: $Enums.Status | null
    projectId: string | null
  }

  export type UpcomingMilstoneCountAggregateOutputType = {
    id: number
    title: number
    date: number
    status: number
    projectId: number
    _all: number
  }


  export type UpcomingMilstoneMinAggregateInputType = {
    id?: true
    title?: true
    date?: true
    status?: true
    projectId?: true
  }

  export type UpcomingMilstoneMaxAggregateInputType = {
    id?: true
    title?: true
    date?: true
    status?: true
    projectId?: true
  }

  export type UpcomingMilstoneCountAggregateInputType = {
    id?: true
    title?: true
    date?: true
    status?: true
    projectId?: true
    _all?: true
  }

  export type UpcomingMilstoneAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UpcomingMilstone to aggregate.
     */
    where?: UpcomingMilstoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UpcomingMilstones to fetch.
     */
    orderBy?: UpcomingMilstoneOrderByWithRelationInput | UpcomingMilstoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UpcomingMilstoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UpcomingMilstones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UpcomingMilstones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UpcomingMilstones
    **/
    _count?: true | UpcomingMilstoneCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UpcomingMilstoneMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UpcomingMilstoneMaxAggregateInputType
  }

  export type GetUpcomingMilstoneAggregateType<T extends UpcomingMilstoneAggregateArgs> = {
        [P in keyof T & keyof AggregateUpcomingMilstone]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUpcomingMilstone[P]>
      : GetScalarType<T[P], AggregateUpcomingMilstone[P]>
  }




  export type UpcomingMilstoneGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UpcomingMilstoneWhereInput
    orderBy?: UpcomingMilstoneOrderByWithAggregationInput | UpcomingMilstoneOrderByWithAggregationInput[]
    by: UpcomingMilstoneScalarFieldEnum[] | UpcomingMilstoneScalarFieldEnum
    having?: UpcomingMilstoneScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UpcomingMilstoneCountAggregateInputType | true
    _min?: UpcomingMilstoneMinAggregateInputType
    _max?: UpcomingMilstoneMaxAggregateInputType
  }

  export type UpcomingMilstoneGroupByOutputType = {
    id: string
    title: string
    date: Date
    status: $Enums.Status
    projectId: string
    _count: UpcomingMilstoneCountAggregateOutputType | null
    _min: UpcomingMilstoneMinAggregateOutputType | null
    _max: UpcomingMilstoneMaxAggregateOutputType | null
  }

  type GetUpcomingMilstoneGroupByPayload<T extends UpcomingMilstoneGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UpcomingMilstoneGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UpcomingMilstoneGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UpcomingMilstoneGroupByOutputType[P]>
            : GetScalarType<T[P], UpcomingMilstoneGroupByOutputType[P]>
        }
      >
    >


  export type UpcomingMilstoneSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    date?: boolean
    status?: boolean
    projectId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["upcomingMilstone"]>



  export type UpcomingMilstoneSelectScalar = {
    id?: boolean
    title?: boolean
    date?: boolean
    status?: boolean
    projectId?: boolean
  }

  export type UpcomingMilstoneOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "date" | "status" | "projectId", ExtArgs["result"]["upcomingMilstone"]>
  export type UpcomingMilstoneInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $UpcomingMilstonePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UpcomingMilstone"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      date: Date
      status: $Enums.Status
      projectId: string
    }, ExtArgs["result"]["upcomingMilstone"]>
    composites: {}
  }

  type UpcomingMilstoneGetPayload<S extends boolean | null | undefined | UpcomingMilstoneDefaultArgs> = $Result.GetResult<Prisma.$UpcomingMilstonePayload, S>

  type UpcomingMilstoneCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UpcomingMilstoneFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UpcomingMilstoneCountAggregateInputType | true
    }

  export interface UpcomingMilstoneDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UpcomingMilstone'], meta: { name: 'UpcomingMilstone' } }
    /**
     * Find zero or one UpcomingMilstone that matches the filter.
     * @param {UpcomingMilstoneFindUniqueArgs} args - Arguments to find a UpcomingMilstone
     * @example
     * // Get one UpcomingMilstone
     * const upcomingMilstone = await prisma.upcomingMilstone.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UpcomingMilstoneFindUniqueArgs>(args: SelectSubset<T, UpcomingMilstoneFindUniqueArgs<ExtArgs>>): Prisma__UpcomingMilstoneClient<$Result.GetResult<Prisma.$UpcomingMilstonePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UpcomingMilstone that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UpcomingMilstoneFindUniqueOrThrowArgs} args - Arguments to find a UpcomingMilstone
     * @example
     * // Get one UpcomingMilstone
     * const upcomingMilstone = await prisma.upcomingMilstone.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UpcomingMilstoneFindUniqueOrThrowArgs>(args: SelectSubset<T, UpcomingMilstoneFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UpcomingMilstoneClient<$Result.GetResult<Prisma.$UpcomingMilstonePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UpcomingMilstone that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpcomingMilstoneFindFirstArgs} args - Arguments to find a UpcomingMilstone
     * @example
     * // Get one UpcomingMilstone
     * const upcomingMilstone = await prisma.upcomingMilstone.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UpcomingMilstoneFindFirstArgs>(args?: SelectSubset<T, UpcomingMilstoneFindFirstArgs<ExtArgs>>): Prisma__UpcomingMilstoneClient<$Result.GetResult<Prisma.$UpcomingMilstonePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UpcomingMilstone that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpcomingMilstoneFindFirstOrThrowArgs} args - Arguments to find a UpcomingMilstone
     * @example
     * // Get one UpcomingMilstone
     * const upcomingMilstone = await prisma.upcomingMilstone.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UpcomingMilstoneFindFirstOrThrowArgs>(args?: SelectSubset<T, UpcomingMilstoneFindFirstOrThrowArgs<ExtArgs>>): Prisma__UpcomingMilstoneClient<$Result.GetResult<Prisma.$UpcomingMilstonePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UpcomingMilstones that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpcomingMilstoneFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UpcomingMilstones
     * const upcomingMilstones = await prisma.upcomingMilstone.findMany()
     * 
     * // Get first 10 UpcomingMilstones
     * const upcomingMilstones = await prisma.upcomingMilstone.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const upcomingMilstoneWithIdOnly = await prisma.upcomingMilstone.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UpcomingMilstoneFindManyArgs>(args?: SelectSubset<T, UpcomingMilstoneFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UpcomingMilstonePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UpcomingMilstone.
     * @param {UpcomingMilstoneCreateArgs} args - Arguments to create a UpcomingMilstone.
     * @example
     * // Create one UpcomingMilstone
     * const UpcomingMilstone = await prisma.upcomingMilstone.create({
     *   data: {
     *     // ... data to create a UpcomingMilstone
     *   }
     * })
     * 
     */
    create<T extends UpcomingMilstoneCreateArgs>(args: SelectSubset<T, UpcomingMilstoneCreateArgs<ExtArgs>>): Prisma__UpcomingMilstoneClient<$Result.GetResult<Prisma.$UpcomingMilstonePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UpcomingMilstones.
     * @param {UpcomingMilstoneCreateManyArgs} args - Arguments to create many UpcomingMilstones.
     * @example
     * // Create many UpcomingMilstones
     * const upcomingMilstone = await prisma.upcomingMilstone.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UpcomingMilstoneCreateManyArgs>(args?: SelectSubset<T, UpcomingMilstoneCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UpcomingMilstone.
     * @param {UpcomingMilstoneDeleteArgs} args - Arguments to delete one UpcomingMilstone.
     * @example
     * // Delete one UpcomingMilstone
     * const UpcomingMilstone = await prisma.upcomingMilstone.delete({
     *   where: {
     *     // ... filter to delete one UpcomingMilstone
     *   }
     * })
     * 
     */
    delete<T extends UpcomingMilstoneDeleteArgs>(args: SelectSubset<T, UpcomingMilstoneDeleteArgs<ExtArgs>>): Prisma__UpcomingMilstoneClient<$Result.GetResult<Prisma.$UpcomingMilstonePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UpcomingMilstone.
     * @param {UpcomingMilstoneUpdateArgs} args - Arguments to update one UpcomingMilstone.
     * @example
     * // Update one UpcomingMilstone
     * const upcomingMilstone = await prisma.upcomingMilstone.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UpcomingMilstoneUpdateArgs>(args: SelectSubset<T, UpcomingMilstoneUpdateArgs<ExtArgs>>): Prisma__UpcomingMilstoneClient<$Result.GetResult<Prisma.$UpcomingMilstonePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UpcomingMilstones.
     * @param {UpcomingMilstoneDeleteManyArgs} args - Arguments to filter UpcomingMilstones to delete.
     * @example
     * // Delete a few UpcomingMilstones
     * const { count } = await prisma.upcomingMilstone.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UpcomingMilstoneDeleteManyArgs>(args?: SelectSubset<T, UpcomingMilstoneDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UpcomingMilstones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpcomingMilstoneUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UpcomingMilstones
     * const upcomingMilstone = await prisma.upcomingMilstone.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UpcomingMilstoneUpdateManyArgs>(args: SelectSubset<T, UpcomingMilstoneUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UpcomingMilstone.
     * @param {UpcomingMilstoneUpsertArgs} args - Arguments to update or create a UpcomingMilstone.
     * @example
     * // Update or create a UpcomingMilstone
     * const upcomingMilstone = await prisma.upcomingMilstone.upsert({
     *   create: {
     *     // ... data to create a UpcomingMilstone
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UpcomingMilstone we want to update
     *   }
     * })
     */
    upsert<T extends UpcomingMilstoneUpsertArgs>(args: SelectSubset<T, UpcomingMilstoneUpsertArgs<ExtArgs>>): Prisma__UpcomingMilstoneClient<$Result.GetResult<Prisma.$UpcomingMilstonePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UpcomingMilstones that matches the filter.
     * @param {UpcomingMilstoneFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const upcomingMilstone = await prisma.upcomingMilstone.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: UpcomingMilstoneFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a UpcomingMilstone.
     * @param {UpcomingMilstoneAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const upcomingMilstone = await prisma.upcomingMilstone.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: UpcomingMilstoneAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of UpcomingMilstones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpcomingMilstoneCountArgs} args - Arguments to filter UpcomingMilstones to count.
     * @example
     * // Count the number of UpcomingMilstones
     * const count = await prisma.upcomingMilstone.count({
     *   where: {
     *     // ... the filter for the UpcomingMilstones we want to count
     *   }
     * })
    **/
    count<T extends UpcomingMilstoneCountArgs>(
      args?: Subset<T, UpcomingMilstoneCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UpcomingMilstoneCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UpcomingMilstone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpcomingMilstoneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UpcomingMilstoneAggregateArgs>(args: Subset<T, UpcomingMilstoneAggregateArgs>): Prisma.PrismaPromise<GetUpcomingMilstoneAggregateType<T>>

    /**
     * Group by UpcomingMilstone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UpcomingMilstoneGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UpcomingMilstoneGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UpcomingMilstoneGroupByArgs['orderBy'] }
        : { orderBy?: UpcomingMilstoneGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UpcomingMilstoneGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUpcomingMilstoneGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UpcomingMilstone model
   */
  readonly fields: UpcomingMilstoneFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UpcomingMilstone.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UpcomingMilstoneClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UpcomingMilstone model
   */ 
  interface UpcomingMilstoneFieldRefs {
    readonly id: FieldRef<"UpcomingMilstone", 'String'>
    readonly title: FieldRef<"UpcomingMilstone", 'String'>
    readonly date: FieldRef<"UpcomingMilstone", 'DateTime'>
    readonly status: FieldRef<"UpcomingMilstone", 'Status'>
    readonly projectId: FieldRef<"UpcomingMilstone", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UpcomingMilstone findUnique
   */
  export type UpcomingMilstoneFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpcomingMilstone
     */
    select?: UpcomingMilstoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpcomingMilstone
     */
    omit?: UpcomingMilstoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpcomingMilstoneInclude<ExtArgs> | null
    /**
     * Filter, which UpcomingMilstone to fetch.
     */
    where: UpcomingMilstoneWhereUniqueInput
  }

  /**
   * UpcomingMilstone findUniqueOrThrow
   */
  export type UpcomingMilstoneFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpcomingMilstone
     */
    select?: UpcomingMilstoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpcomingMilstone
     */
    omit?: UpcomingMilstoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpcomingMilstoneInclude<ExtArgs> | null
    /**
     * Filter, which UpcomingMilstone to fetch.
     */
    where: UpcomingMilstoneWhereUniqueInput
  }

  /**
   * UpcomingMilstone findFirst
   */
  export type UpcomingMilstoneFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpcomingMilstone
     */
    select?: UpcomingMilstoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpcomingMilstone
     */
    omit?: UpcomingMilstoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpcomingMilstoneInclude<ExtArgs> | null
    /**
     * Filter, which UpcomingMilstone to fetch.
     */
    where?: UpcomingMilstoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UpcomingMilstones to fetch.
     */
    orderBy?: UpcomingMilstoneOrderByWithRelationInput | UpcomingMilstoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UpcomingMilstones.
     */
    cursor?: UpcomingMilstoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UpcomingMilstones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UpcomingMilstones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UpcomingMilstones.
     */
    distinct?: UpcomingMilstoneScalarFieldEnum | UpcomingMilstoneScalarFieldEnum[]
  }

  /**
   * UpcomingMilstone findFirstOrThrow
   */
  export type UpcomingMilstoneFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpcomingMilstone
     */
    select?: UpcomingMilstoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpcomingMilstone
     */
    omit?: UpcomingMilstoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpcomingMilstoneInclude<ExtArgs> | null
    /**
     * Filter, which UpcomingMilstone to fetch.
     */
    where?: UpcomingMilstoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UpcomingMilstones to fetch.
     */
    orderBy?: UpcomingMilstoneOrderByWithRelationInput | UpcomingMilstoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UpcomingMilstones.
     */
    cursor?: UpcomingMilstoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UpcomingMilstones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UpcomingMilstones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UpcomingMilstones.
     */
    distinct?: UpcomingMilstoneScalarFieldEnum | UpcomingMilstoneScalarFieldEnum[]
  }

  /**
   * UpcomingMilstone findMany
   */
  export type UpcomingMilstoneFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpcomingMilstone
     */
    select?: UpcomingMilstoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpcomingMilstone
     */
    omit?: UpcomingMilstoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpcomingMilstoneInclude<ExtArgs> | null
    /**
     * Filter, which UpcomingMilstones to fetch.
     */
    where?: UpcomingMilstoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UpcomingMilstones to fetch.
     */
    orderBy?: UpcomingMilstoneOrderByWithRelationInput | UpcomingMilstoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UpcomingMilstones.
     */
    cursor?: UpcomingMilstoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UpcomingMilstones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UpcomingMilstones.
     */
    skip?: number
    distinct?: UpcomingMilstoneScalarFieldEnum | UpcomingMilstoneScalarFieldEnum[]
  }

  /**
   * UpcomingMilstone create
   */
  export type UpcomingMilstoneCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpcomingMilstone
     */
    select?: UpcomingMilstoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpcomingMilstone
     */
    omit?: UpcomingMilstoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpcomingMilstoneInclude<ExtArgs> | null
    /**
     * The data needed to create a UpcomingMilstone.
     */
    data: XOR<UpcomingMilstoneCreateInput, UpcomingMilstoneUncheckedCreateInput>
  }

  /**
   * UpcomingMilstone createMany
   */
  export type UpcomingMilstoneCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UpcomingMilstones.
     */
    data: UpcomingMilstoneCreateManyInput | UpcomingMilstoneCreateManyInput[]
  }

  /**
   * UpcomingMilstone update
   */
  export type UpcomingMilstoneUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpcomingMilstone
     */
    select?: UpcomingMilstoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpcomingMilstone
     */
    omit?: UpcomingMilstoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpcomingMilstoneInclude<ExtArgs> | null
    /**
     * The data needed to update a UpcomingMilstone.
     */
    data: XOR<UpcomingMilstoneUpdateInput, UpcomingMilstoneUncheckedUpdateInput>
    /**
     * Choose, which UpcomingMilstone to update.
     */
    where: UpcomingMilstoneWhereUniqueInput
  }

  /**
   * UpcomingMilstone updateMany
   */
  export type UpcomingMilstoneUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UpcomingMilstones.
     */
    data: XOR<UpcomingMilstoneUpdateManyMutationInput, UpcomingMilstoneUncheckedUpdateManyInput>
    /**
     * Filter which UpcomingMilstones to update
     */
    where?: UpcomingMilstoneWhereInput
    /**
     * Limit how many UpcomingMilstones to update.
     */
    limit?: number
  }

  /**
   * UpcomingMilstone upsert
   */
  export type UpcomingMilstoneUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpcomingMilstone
     */
    select?: UpcomingMilstoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpcomingMilstone
     */
    omit?: UpcomingMilstoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpcomingMilstoneInclude<ExtArgs> | null
    /**
     * The filter to search for the UpcomingMilstone to update in case it exists.
     */
    where: UpcomingMilstoneWhereUniqueInput
    /**
     * In case the UpcomingMilstone found by the `where` argument doesn't exist, create a new UpcomingMilstone with this data.
     */
    create: XOR<UpcomingMilstoneCreateInput, UpcomingMilstoneUncheckedCreateInput>
    /**
     * In case the UpcomingMilstone was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UpcomingMilstoneUpdateInput, UpcomingMilstoneUncheckedUpdateInput>
  }

  /**
   * UpcomingMilstone delete
   */
  export type UpcomingMilstoneDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpcomingMilstone
     */
    select?: UpcomingMilstoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpcomingMilstone
     */
    omit?: UpcomingMilstoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpcomingMilstoneInclude<ExtArgs> | null
    /**
     * Filter which UpcomingMilstone to delete.
     */
    where: UpcomingMilstoneWhereUniqueInput
  }

  /**
   * UpcomingMilstone deleteMany
   */
  export type UpcomingMilstoneDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UpcomingMilstones to delete
     */
    where?: UpcomingMilstoneWhereInput
    /**
     * Limit how many UpcomingMilstones to delete.
     */
    limit?: number
  }

  /**
   * UpcomingMilstone findRaw
   */
  export type UpcomingMilstoneFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * UpcomingMilstone aggregateRaw
   */
  export type UpcomingMilstoneAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * UpcomingMilstone without action
   */
  export type UpcomingMilstoneDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UpcomingMilstone
     */
    select?: UpcomingMilstoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UpcomingMilstone
     */
    omit?: UpcomingMilstoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UpcomingMilstoneInclude<ExtArgs> | null
  }


  /**
   * Model CheckList
   */

  export type AggregateCheckList = {
    _count: CheckListCountAggregateOutputType | null
    _min: CheckListMinAggregateOutputType | null
    _max: CheckListMaxAggregateOutputType | null
  }

  export type CheckListMinAggregateOutputType = {
    id: string | null
    task: $Enums.Status | null
    assignedTo: string | null
    dueData: Date | null
    priority: $Enums.Priority | null
    completed: boolean | null
    projectId: string | null
  }

  export type CheckListMaxAggregateOutputType = {
    id: string | null
    task: $Enums.Status | null
    assignedTo: string | null
    dueData: Date | null
    priority: $Enums.Priority | null
    completed: boolean | null
    projectId: string | null
  }

  export type CheckListCountAggregateOutputType = {
    id: number
    task: number
    assignedTo: number
    dueData: number
    priority: number
    completed: number
    projectId: number
    _all: number
  }


  export type CheckListMinAggregateInputType = {
    id?: true
    task?: true
    assignedTo?: true
    dueData?: true
    priority?: true
    completed?: true
    projectId?: true
  }

  export type CheckListMaxAggregateInputType = {
    id?: true
    task?: true
    assignedTo?: true
    dueData?: true
    priority?: true
    completed?: true
    projectId?: true
  }

  export type CheckListCountAggregateInputType = {
    id?: true
    task?: true
    assignedTo?: true
    dueData?: true
    priority?: true
    completed?: true
    projectId?: true
    _all?: true
  }

  export type CheckListAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CheckList to aggregate.
     */
    where?: CheckListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckLists to fetch.
     */
    orderBy?: CheckListOrderByWithRelationInput | CheckListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CheckListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CheckLists
    **/
    _count?: true | CheckListCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CheckListMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CheckListMaxAggregateInputType
  }

  export type GetCheckListAggregateType<T extends CheckListAggregateArgs> = {
        [P in keyof T & keyof AggregateCheckList]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCheckList[P]>
      : GetScalarType<T[P], AggregateCheckList[P]>
  }




  export type CheckListGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CheckListWhereInput
    orderBy?: CheckListOrderByWithAggregationInput | CheckListOrderByWithAggregationInput[]
    by: CheckListScalarFieldEnum[] | CheckListScalarFieldEnum
    having?: CheckListScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CheckListCountAggregateInputType | true
    _min?: CheckListMinAggregateInputType
    _max?: CheckListMaxAggregateInputType
  }

  export type CheckListGroupByOutputType = {
    id: string
    task: $Enums.Status
    assignedTo: string
    dueData: Date
    priority: $Enums.Priority
    completed: boolean
    projectId: string
    _count: CheckListCountAggregateOutputType | null
    _min: CheckListMinAggregateOutputType | null
    _max: CheckListMaxAggregateOutputType | null
  }

  type GetCheckListGroupByPayload<T extends CheckListGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CheckListGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CheckListGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CheckListGroupByOutputType[P]>
            : GetScalarType<T[P], CheckListGroupByOutputType[P]>
        }
      >
    >


  export type CheckListSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    task?: boolean
    assignedTo?: boolean
    dueData?: boolean
    priority?: boolean
    completed?: boolean
    projectId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checkList"]>



  export type CheckListSelectScalar = {
    id?: boolean
    task?: boolean
    assignedTo?: boolean
    dueData?: boolean
    priority?: boolean
    completed?: boolean
    projectId?: boolean
  }

  export type CheckListOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "task" | "assignedTo" | "dueData" | "priority" | "completed" | "projectId", ExtArgs["result"]["checkList"]>
  export type CheckListInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $CheckListPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CheckList"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      task: $Enums.Status
      assignedTo: string
      dueData: Date
      priority: $Enums.Priority
      completed: boolean
      projectId: string
    }, ExtArgs["result"]["checkList"]>
    composites: {}
  }

  type CheckListGetPayload<S extends boolean | null | undefined | CheckListDefaultArgs> = $Result.GetResult<Prisma.$CheckListPayload, S>

  type CheckListCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CheckListFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CheckListCountAggregateInputType | true
    }

  export interface CheckListDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CheckList'], meta: { name: 'CheckList' } }
    /**
     * Find zero or one CheckList that matches the filter.
     * @param {CheckListFindUniqueArgs} args - Arguments to find a CheckList
     * @example
     * // Get one CheckList
     * const checkList = await prisma.checkList.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CheckListFindUniqueArgs>(args: SelectSubset<T, CheckListFindUniqueArgs<ExtArgs>>): Prisma__CheckListClient<$Result.GetResult<Prisma.$CheckListPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CheckList that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CheckListFindUniqueOrThrowArgs} args - Arguments to find a CheckList
     * @example
     * // Get one CheckList
     * const checkList = await prisma.checkList.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CheckListFindUniqueOrThrowArgs>(args: SelectSubset<T, CheckListFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CheckListClient<$Result.GetResult<Prisma.$CheckListPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CheckList that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckListFindFirstArgs} args - Arguments to find a CheckList
     * @example
     * // Get one CheckList
     * const checkList = await prisma.checkList.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CheckListFindFirstArgs>(args?: SelectSubset<T, CheckListFindFirstArgs<ExtArgs>>): Prisma__CheckListClient<$Result.GetResult<Prisma.$CheckListPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CheckList that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckListFindFirstOrThrowArgs} args - Arguments to find a CheckList
     * @example
     * // Get one CheckList
     * const checkList = await prisma.checkList.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CheckListFindFirstOrThrowArgs>(args?: SelectSubset<T, CheckListFindFirstOrThrowArgs<ExtArgs>>): Prisma__CheckListClient<$Result.GetResult<Prisma.$CheckListPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CheckLists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckListFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CheckLists
     * const checkLists = await prisma.checkList.findMany()
     * 
     * // Get first 10 CheckLists
     * const checkLists = await prisma.checkList.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const checkListWithIdOnly = await prisma.checkList.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CheckListFindManyArgs>(args?: SelectSubset<T, CheckListFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheckListPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CheckList.
     * @param {CheckListCreateArgs} args - Arguments to create a CheckList.
     * @example
     * // Create one CheckList
     * const CheckList = await prisma.checkList.create({
     *   data: {
     *     // ... data to create a CheckList
     *   }
     * })
     * 
     */
    create<T extends CheckListCreateArgs>(args: SelectSubset<T, CheckListCreateArgs<ExtArgs>>): Prisma__CheckListClient<$Result.GetResult<Prisma.$CheckListPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CheckLists.
     * @param {CheckListCreateManyArgs} args - Arguments to create many CheckLists.
     * @example
     * // Create many CheckLists
     * const checkList = await prisma.checkList.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CheckListCreateManyArgs>(args?: SelectSubset<T, CheckListCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CheckList.
     * @param {CheckListDeleteArgs} args - Arguments to delete one CheckList.
     * @example
     * // Delete one CheckList
     * const CheckList = await prisma.checkList.delete({
     *   where: {
     *     // ... filter to delete one CheckList
     *   }
     * })
     * 
     */
    delete<T extends CheckListDeleteArgs>(args: SelectSubset<T, CheckListDeleteArgs<ExtArgs>>): Prisma__CheckListClient<$Result.GetResult<Prisma.$CheckListPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CheckList.
     * @param {CheckListUpdateArgs} args - Arguments to update one CheckList.
     * @example
     * // Update one CheckList
     * const checkList = await prisma.checkList.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CheckListUpdateArgs>(args: SelectSubset<T, CheckListUpdateArgs<ExtArgs>>): Prisma__CheckListClient<$Result.GetResult<Prisma.$CheckListPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CheckLists.
     * @param {CheckListDeleteManyArgs} args - Arguments to filter CheckLists to delete.
     * @example
     * // Delete a few CheckLists
     * const { count } = await prisma.checkList.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CheckListDeleteManyArgs>(args?: SelectSubset<T, CheckListDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CheckLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckListUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CheckLists
     * const checkList = await prisma.checkList.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CheckListUpdateManyArgs>(args: SelectSubset<T, CheckListUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CheckList.
     * @param {CheckListUpsertArgs} args - Arguments to update or create a CheckList.
     * @example
     * // Update or create a CheckList
     * const checkList = await prisma.checkList.upsert({
     *   create: {
     *     // ... data to create a CheckList
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CheckList we want to update
     *   }
     * })
     */
    upsert<T extends CheckListUpsertArgs>(args: SelectSubset<T, CheckListUpsertArgs<ExtArgs>>): Prisma__CheckListClient<$Result.GetResult<Prisma.$CheckListPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CheckLists that matches the filter.
     * @param {CheckListFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const checkList = await prisma.checkList.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: CheckListFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a CheckList.
     * @param {CheckListAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const checkList = await prisma.checkList.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: CheckListAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of CheckLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckListCountArgs} args - Arguments to filter CheckLists to count.
     * @example
     * // Count the number of CheckLists
     * const count = await prisma.checkList.count({
     *   where: {
     *     // ... the filter for the CheckLists we want to count
     *   }
     * })
    **/
    count<T extends CheckListCountArgs>(
      args?: Subset<T, CheckListCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CheckListCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CheckList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckListAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CheckListAggregateArgs>(args: Subset<T, CheckListAggregateArgs>): Prisma.PrismaPromise<GetCheckListAggregateType<T>>

    /**
     * Group by CheckList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheckListGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CheckListGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CheckListGroupByArgs['orderBy'] }
        : { orderBy?: CheckListGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CheckListGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCheckListGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CheckList model
   */
  readonly fields: CheckListFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CheckList.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CheckListClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CheckList model
   */ 
  interface CheckListFieldRefs {
    readonly id: FieldRef<"CheckList", 'String'>
    readonly task: FieldRef<"CheckList", 'Status'>
    readonly assignedTo: FieldRef<"CheckList", 'String'>
    readonly dueData: FieldRef<"CheckList", 'DateTime'>
    readonly priority: FieldRef<"CheckList", 'Priority'>
    readonly completed: FieldRef<"CheckList", 'Boolean'>
    readonly projectId: FieldRef<"CheckList", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CheckList findUnique
   */
  export type CheckListFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckList
     */
    select?: CheckListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckList
     */
    omit?: CheckListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckListInclude<ExtArgs> | null
    /**
     * Filter, which CheckList to fetch.
     */
    where: CheckListWhereUniqueInput
  }

  /**
   * CheckList findUniqueOrThrow
   */
  export type CheckListFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckList
     */
    select?: CheckListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckList
     */
    omit?: CheckListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckListInclude<ExtArgs> | null
    /**
     * Filter, which CheckList to fetch.
     */
    where: CheckListWhereUniqueInput
  }

  /**
   * CheckList findFirst
   */
  export type CheckListFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckList
     */
    select?: CheckListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckList
     */
    omit?: CheckListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckListInclude<ExtArgs> | null
    /**
     * Filter, which CheckList to fetch.
     */
    where?: CheckListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckLists to fetch.
     */
    orderBy?: CheckListOrderByWithRelationInput | CheckListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CheckLists.
     */
    cursor?: CheckListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CheckLists.
     */
    distinct?: CheckListScalarFieldEnum | CheckListScalarFieldEnum[]
  }

  /**
   * CheckList findFirstOrThrow
   */
  export type CheckListFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckList
     */
    select?: CheckListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckList
     */
    omit?: CheckListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckListInclude<ExtArgs> | null
    /**
     * Filter, which CheckList to fetch.
     */
    where?: CheckListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckLists to fetch.
     */
    orderBy?: CheckListOrderByWithRelationInput | CheckListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CheckLists.
     */
    cursor?: CheckListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CheckLists.
     */
    distinct?: CheckListScalarFieldEnum | CheckListScalarFieldEnum[]
  }

  /**
   * CheckList findMany
   */
  export type CheckListFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckList
     */
    select?: CheckListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckList
     */
    omit?: CheckListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckListInclude<ExtArgs> | null
    /**
     * Filter, which CheckLists to fetch.
     */
    where?: CheckListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CheckLists to fetch.
     */
    orderBy?: CheckListOrderByWithRelationInput | CheckListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CheckLists.
     */
    cursor?: CheckListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CheckLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CheckLists.
     */
    skip?: number
    distinct?: CheckListScalarFieldEnum | CheckListScalarFieldEnum[]
  }

  /**
   * CheckList create
   */
  export type CheckListCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckList
     */
    select?: CheckListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckList
     */
    omit?: CheckListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckListInclude<ExtArgs> | null
    /**
     * The data needed to create a CheckList.
     */
    data: XOR<CheckListCreateInput, CheckListUncheckedCreateInput>
  }

  /**
   * CheckList createMany
   */
  export type CheckListCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CheckLists.
     */
    data: CheckListCreateManyInput | CheckListCreateManyInput[]
  }

  /**
   * CheckList update
   */
  export type CheckListUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckList
     */
    select?: CheckListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckList
     */
    omit?: CheckListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckListInclude<ExtArgs> | null
    /**
     * The data needed to update a CheckList.
     */
    data: XOR<CheckListUpdateInput, CheckListUncheckedUpdateInput>
    /**
     * Choose, which CheckList to update.
     */
    where: CheckListWhereUniqueInput
  }

  /**
   * CheckList updateMany
   */
  export type CheckListUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CheckLists.
     */
    data: XOR<CheckListUpdateManyMutationInput, CheckListUncheckedUpdateManyInput>
    /**
     * Filter which CheckLists to update
     */
    where?: CheckListWhereInput
    /**
     * Limit how many CheckLists to update.
     */
    limit?: number
  }

  /**
   * CheckList upsert
   */
  export type CheckListUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckList
     */
    select?: CheckListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckList
     */
    omit?: CheckListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckListInclude<ExtArgs> | null
    /**
     * The filter to search for the CheckList to update in case it exists.
     */
    where: CheckListWhereUniqueInput
    /**
     * In case the CheckList found by the `where` argument doesn't exist, create a new CheckList with this data.
     */
    create: XOR<CheckListCreateInput, CheckListUncheckedCreateInput>
    /**
     * In case the CheckList was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CheckListUpdateInput, CheckListUncheckedUpdateInput>
  }

  /**
   * CheckList delete
   */
  export type CheckListDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckList
     */
    select?: CheckListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckList
     */
    omit?: CheckListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckListInclude<ExtArgs> | null
    /**
     * Filter which CheckList to delete.
     */
    where: CheckListWhereUniqueInput
  }

  /**
   * CheckList deleteMany
   */
  export type CheckListDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CheckLists to delete
     */
    where?: CheckListWhereInput
    /**
     * Limit how many CheckLists to delete.
     */
    limit?: number
  }

  /**
   * CheckList findRaw
   */
  export type CheckListFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * CheckList aggregateRaw
   */
  export type CheckListAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * CheckList without action
   */
  export type CheckListDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CheckList
     */
    select?: CheckListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CheckList
     */
    omit?: CheckListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheckListInclude<ExtArgs> | null
  }


  /**
   * Model Documents
   */

  export type AggregateDocuments = {
    _count: DocumentsCountAggregateOutputType | null
    _min: DocumentsMinAggregateOutputType | null
    _max: DocumentsMaxAggregateOutputType | null
  }

  export type DocumentsMinAggregateOutputType = {
    id: string | null
    name: string | null
    date: Date | null
    projectId: string | null
  }

  export type DocumentsMaxAggregateOutputType = {
    id: string | null
    name: string | null
    date: Date | null
    projectId: string | null
  }

  export type DocumentsCountAggregateOutputType = {
    id: number
    name: number
    date: number
    projectId: number
    _all: number
  }


  export type DocumentsMinAggregateInputType = {
    id?: true
    name?: true
    date?: true
    projectId?: true
  }

  export type DocumentsMaxAggregateInputType = {
    id?: true
    name?: true
    date?: true
    projectId?: true
  }

  export type DocumentsCountAggregateInputType = {
    id?: true
    name?: true
    date?: true
    projectId?: true
    _all?: true
  }

  export type DocumentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documents to aggregate.
     */
    where?: DocumentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentsOrderByWithRelationInput | DocumentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documents
    **/
    _count?: true | DocumentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentsMaxAggregateInputType
  }

  export type GetDocumentsAggregateType<T extends DocumentsAggregateArgs> = {
        [P in keyof T & keyof AggregateDocuments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocuments[P]>
      : GetScalarType<T[P], AggregateDocuments[P]>
  }




  export type DocumentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentsWhereInput
    orderBy?: DocumentsOrderByWithAggregationInput | DocumentsOrderByWithAggregationInput[]
    by: DocumentsScalarFieldEnum[] | DocumentsScalarFieldEnum
    having?: DocumentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentsCountAggregateInputType | true
    _min?: DocumentsMinAggregateInputType
    _max?: DocumentsMaxAggregateInputType
  }

  export type DocumentsGroupByOutputType = {
    id: string
    name: string
    date: Date
    projectId: string
    _count: DocumentsCountAggregateOutputType | null
    _min: DocumentsMinAggregateOutputType | null
    _max: DocumentsMaxAggregateOutputType | null
  }

  type GetDocumentsGroupByPayload<T extends DocumentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentsGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentsGroupByOutputType[P]>
        }
      >
    >


  export type DocumentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    date?: boolean
    projectId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documents"]>



  export type DocumentsSelectScalar = {
    id?: boolean
    name?: boolean
    date?: boolean
    projectId?: boolean
  }

  export type DocumentsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "date" | "projectId", ExtArgs["result"]["documents"]>
  export type DocumentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $DocumentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Documents"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      date: Date
      projectId: string
    }, ExtArgs["result"]["documents"]>
    composites: {}
  }

  type DocumentsGetPayload<S extends boolean | null | undefined | DocumentsDefaultArgs> = $Result.GetResult<Prisma.$DocumentsPayload, S>

  type DocumentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DocumentsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentsCountAggregateInputType | true
    }

  export interface DocumentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Documents'], meta: { name: 'Documents' } }
    /**
     * Find zero or one Documents that matches the filter.
     * @param {DocumentsFindUniqueArgs} args - Arguments to find a Documents
     * @example
     * // Get one Documents
     * const documents = await prisma.documents.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentsFindUniqueArgs>(args: SelectSubset<T, DocumentsFindUniqueArgs<ExtArgs>>): Prisma__DocumentsClient<$Result.GetResult<Prisma.$DocumentsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Documents that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DocumentsFindUniqueOrThrowArgs} args - Arguments to find a Documents
     * @example
     * // Get one Documents
     * const documents = await prisma.documents.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentsFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentsClient<$Result.GetResult<Prisma.$DocumentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentsFindFirstArgs} args - Arguments to find a Documents
     * @example
     * // Get one Documents
     * const documents = await prisma.documents.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentsFindFirstArgs>(args?: SelectSubset<T, DocumentsFindFirstArgs<ExtArgs>>): Prisma__DocumentsClient<$Result.GetResult<Prisma.$DocumentsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Documents that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentsFindFirstOrThrowArgs} args - Arguments to find a Documents
     * @example
     * // Get one Documents
     * const documents = await prisma.documents.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentsFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentsClient<$Result.GetResult<Prisma.$DocumentsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documents
     * const documents = await prisma.documents.findMany()
     * 
     * // Get first 10 Documents
     * const documents = await prisma.documents.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentsWithIdOnly = await prisma.documents.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentsFindManyArgs>(args?: SelectSubset<T, DocumentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Documents.
     * @param {DocumentsCreateArgs} args - Arguments to create a Documents.
     * @example
     * // Create one Documents
     * const Documents = await prisma.documents.create({
     *   data: {
     *     // ... data to create a Documents
     *   }
     * })
     * 
     */
    create<T extends DocumentsCreateArgs>(args: SelectSubset<T, DocumentsCreateArgs<ExtArgs>>): Prisma__DocumentsClient<$Result.GetResult<Prisma.$DocumentsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Documents.
     * @param {DocumentsCreateManyArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const documents = await prisma.documents.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentsCreateManyArgs>(args?: SelectSubset<T, DocumentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Documents.
     * @param {DocumentsDeleteArgs} args - Arguments to delete one Documents.
     * @example
     * // Delete one Documents
     * const Documents = await prisma.documents.delete({
     *   where: {
     *     // ... filter to delete one Documents
     *   }
     * })
     * 
     */
    delete<T extends DocumentsDeleteArgs>(args: SelectSubset<T, DocumentsDeleteArgs<ExtArgs>>): Prisma__DocumentsClient<$Result.GetResult<Prisma.$DocumentsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Documents.
     * @param {DocumentsUpdateArgs} args - Arguments to update one Documents.
     * @example
     * // Update one Documents
     * const documents = await prisma.documents.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentsUpdateArgs>(args: SelectSubset<T, DocumentsUpdateArgs<ExtArgs>>): Prisma__DocumentsClient<$Result.GetResult<Prisma.$DocumentsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Documents.
     * @param {DocumentsDeleteManyArgs} args - Arguments to filter Documents to delete.
     * @example
     * // Delete a few Documents
     * const { count } = await prisma.documents.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentsDeleteManyArgs>(args?: SelectSubset<T, DocumentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documents
     * const documents = await prisma.documents.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentsUpdateManyArgs>(args: SelectSubset<T, DocumentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Documents.
     * @param {DocumentsUpsertArgs} args - Arguments to update or create a Documents.
     * @example
     * // Update or create a Documents
     * const documents = await prisma.documents.upsert({
     *   create: {
     *     // ... data to create a Documents
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Documents we want to update
     *   }
     * })
     */
    upsert<T extends DocumentsUpsertArgs>(args: SelectSubset<T, DocumentsUpsertArgs<ExtArgs>>): Prisma__DocumentsClient<$Result.GetResult<Prisma.$DocumentsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Documents that matches the filter.
     * @param {DocumentsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const documents = await prisma.documents.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: DocumentsFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Documents.
     * @param {DocumentsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const documents = await prisma.documents.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: DocumentsAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentsCountArgs} args - Arguments to filter Documents to count.
     * @example
     * // Count the number of Documents
     * const count = await prisma.documents.count({
     *   where: {
     *     // ... the filter for the Documents we want to count
     *   }
     * })
    **/
    count<T extends DocumentsCountArgs>(
      args?: Subset<T, DocumentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentsAggregateArgs>(args: Subset<T, DocumentsAggregateArgs>): Prisma.PrismaPromise<GetDocumentsAggregateType<T>>

    /**
     * Group by Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentsGroupByArgs['orderBy'] }
        : { orderBy?: DocumentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Documents model
   */
  readonly fields: DocumentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Documents.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Documents model
   */ 
  interface DocumentsFieldRefs {
    readonly id: FieldRef<"Documents", 'String'>
    readonly name: FieldRef<"Documents", 'String'>
    readonly date: FieldRef<"Documents", 'DateTime'>
    readonly projectId: FieldRef<"Documents", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Documents findUnique
   */
  export type DocumentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documents
     */
    select?: DocumentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documents
     */
    omit?: DocumentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentsInclude<ExtArgs> | null
    /**
     * Filter, which Documents to fetch.
     */
    where: DocumentsWhereUniqueInput
  }

  /**
   * Documents findUniqueOrThrow
   */
  export type DocumentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documents
     */
    select?: DocumentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documents
     */
    omit?: DocumentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentsInclude<ExtArgs> | null
    /**
     * Filter, which Documents to fetch.
     */
    where: DocumentsWhereUniqueInput
  }

  /**
   * Documents findFirst
   */
  export type DocumentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documents
     */
    select?: DocumentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documents
     */
    omit?: DocumentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentsInclude<ExtArgs> | null
    /**
     * Filter, which Documents to fetch.
     */
    where?: DocumentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentsOrderByWithRelationInput | DocumentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentsScalarFieldEnum | DocumentsScalarFieldEnum[]
  }

  /**
   * Documents findFirstOrThrow
   */
  export type DocumentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documents
     */
    select?: DocumentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documents
     */
    omit?: DocumentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentsInclude<ExtArgs> | null
    /**
     * Filter, which Documents to fetch.
     */
    where?: DocumentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentsOrderByWithRelationInput | DocumentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentsScalarFieldEnum | DocumentsScalarFieldEnum[]
  }

  /**
   * Documents findMany
   */
  export type DocumentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documents
     */
    select?: DocumentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documents
     */
    omit?: DocumentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentsInclude<ExtArgs> | null
    /**
     * Filter, which Documents to fetch.
     */
    where?: DocumentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentsOrderByWithRelationInput | DocumentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documents.
     */
    cursor?: DocumentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    distinct?: DocumentsScalarFieldEnum | DocumentsScalarFieldEnum[]
  }

  /**
   * Documents create
   */
  export type DocumentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documents
     */
    select?: DocumentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documents
     */
    omit?: DocumentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentsInclude<ExtArgs> | null
    /**
     * The data needed to create a Documents.
     */
    data: XOR<DocumentsCreateInput, DocumentsUncheckedCreateInput>
  }

  /**
   * Documents createMany
   */
  export type DocumentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Documents.
     */
    data: DocumentsCreateManyInput | DocumentsCreateManyInput[]
  }

  /**
   * Documents update
   */
  export type DocumentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documents
     */
    select?: DocumentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documents
     */
    omit?: DocumentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentsInclude<ExtArgs> | null
    /**
     * The data needed to update a Documents.
     */
    data: XOR<DocumentsUpdateInput, DocumentsUncheckedUpdateInput>
    /**
     * Choose, which Documents to update.
     */
    where: DocumentsWhereUniqueInput
  }

  /**
   * Documents updateMany
   */
  export type DocumentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentsUpdateManyMutationInput, DocumentsUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentsWhereInput
    /**
     * Limit how many Documents to update.
     */
    limit?: number
  }

  /**
   * Documents upsert
   */
  export type DocumentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documents
     */
    select?: DocumentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documents
     */
    omit?: DocumentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentsInclude<ExtArgs> | null
    /**
     * The filter to search for the Documents to update in case it exists.
     */
    where: DocumentsWhereUniqueInput
    /**
     * In case the Documents found by the `where` argument doesn't exist, create a new Documents with this data.
     */
    create: XOR<DocumentsCreateInput, DocumentsUncheckedCreateInput>
    /**
     * In case the Documents was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentsUpdateInput, DocumentsUncheckedUpdateInput>
  }

  /**
   * Documents delete
   */
  export type DocumentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documents
     */
    select?: DocumentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documents
     */
    omit?: DocumentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentsInclude<ExtArgs> | null
    /**
     * Filter which Documents to delete.
     */
    where: DocumentsWhereUniqueInput
  }

  /**
   * Documents deleteMany
   */
  export type DocumentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documents to delete
     */
    where?: DocumentsWhereInput
    /**
     * Limit how many Documents to delete.
     */
    limit?: number
  }

  /**
   * Documents findRaw
   */
  export type DocumentsFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Documents aggregateRaw
   */
  export type DocumentsAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Documents without action
   */
  export type DocumentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documents
     */
    select?: DocumentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documents
     */
    omit?: DocumentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentsInclude<ExtArgs> | null
  }


  /**
   * Model TheIncomingLetter
   */

  export type AggregateTheIncomingLetter = {
    _count: TheIncomingLetterCountAggregateOutputType | null
    _min: TheIncomingLetterMinAggregateOutputType | null
    _max: TheIncomingLetterMaxAggregateOutputType | null
  }

  export type TheIncomingLetterMinAggregateOutputType = {
    id: string | null
    sender: string | null
    subject: string | null
    priority: $Enums.Priority | null
    status: $Enums.IncomingStatus | null
    projectId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TheIncomingLetterMaxAggregateOutputType = {
    id: string | null
    sender: string | null
    subject: string | null
    priority: $Enums.Priority | null
    status: $Enums.IncomingStatus | null
    projectId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TheIncomingLetterCountAggregateOutputType = {
    id: number
    sender: number
    subject: number
    priority: number
    status: number
    projectId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TheIncomingLetterMinAggregateInputType = {
    id?: true
    sender?: true
    subject?: true
    priority?: true
    status?: true
    projectId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TheIncomingLetterMaxAggregateInputType = {
    id?: true
    sender?: true
    subject?: true
    priority?: true
    status?: true
    projectId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TheIncomingLetterCountAggregateInputType = {
    id?: true
    sender?: true
    subject?: true
    priority?: true
    status?: true
    projectId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TheIncomingLetterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TheIncomingLetter to aggregate.
     */
    where?: TheIncomingLetterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TheIncomingLetters to fetch.
     */
    orderBy?: TheIncomingLetterOrderByWithRelationInput | TheIncomingLetterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TheIncomingLetterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TheIncomingLetters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TheIncomingLetters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TheIncomingLetters
    **/
    _count?: true | TheIncomingLetterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TheIncomingLetterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TheIncomingLetterMaxAggregateInputType
  }

  export type GetTheIncomingLetterAggregateType<T extends TheIncomingLetterAggregateArgs> = {
        [P in keyof T & keyof AggregateTheIncomingLetter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTheIncomingLetter[P]>
      : GetScalarType<T[P], AggregateTheIncomingLetter[P]>
  }




  export type TheIncomingLetterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TheIncomingLetterWhereInput
    orderBy?: TheIncomingLetterOrderByWithAggregationInput | TheIncomingLetterOrderByWithAggregationInput[]
    by: TheIncomingLetterScalarFieldEnum[] | TheIncomingLetterScalarFieldEnum
    having?: TheIncomingLetterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TheIncomingLetterCountAggregateInputType | true
    _min?: TheIncomingLetterMinAggregateInputType
    _max?: TheIncomingLetterMaxAggregateInputType
  }

  export type TheIncomingLetterGroupByOutputType = {
    id: string
    sender: string
    subject: string
    priority: $Enums.Priority
    status: $Enums.IncomingStatus
    projectId: string
    createdAt: Date
    updatedAt: Date
    _count: TheIncomingLetterCountAggregateOutputType | null
    _min: TheIncomingLetterMinAggregateOutputType | null
    _max: TheIncomingLetterMaxAggregateOutputType | null
  }

  type GetTheIncomingLetterGroupByPayload<T extends TheIncomingLetterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TheIncomingLetterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TheIncomingLetterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TheIncomingLetterGroupByOutputType[P]>
            : GetScalarType<T[P], TheIncomingLetterGroupByOutputType[P]>
        }
      >
    >


  export type TheIncomingLetterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sender?: boolean
    subject?: boolean
    priority?: boolean
    status?: boolean
    projectId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["theIncomingLetter"]>



  export type TheIncomingLetterSelectScalar = {
    id?: boolean
    sender?: boolean
    subject?: boolean
    priority?: boolean
    status?: boolean
    projectId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TheIncomingLetterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sender" | "subject" | "priority" | "status" | "projectId" | "createdAt" | "updatedAt", ExtArgs["result"]["theIncomingLetter"]>
  export type TheIncomingLetterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $TheIncomingLetterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TheIncomingLetter"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sender: string
      subject: string
      priority: $Enums.Priority
      status: $Enums.IncomingStatus
      projectId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["theIncomingLetter"]>
    composites: {}
  }

  type TheIncomingLetterGetPayload<S extends boolean | null | undefined | TheIncomingLetterDefaultArgs> = $Result.GetResult<Prisma.$TheIncomingLetterPayload, S>

  type TheIncomingLetterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TheIncomingLetterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TheIncomingLetterCountAggregateInputType | true
    }

  export interface TheIncomingLetterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TheIncomingLetter'], meta: { name: 'TheIncomingLetter' } }
    /**
     * Find zero or one TheIncomingLetter that matches the filter.
     * @param {TheIncomingLetterFindUniqueArgs} args - Arguments to find a TheIncomingLetter
     * @example
     * // Get one TheIncomingLetter
     * const theIncomingLetter = await prisma.theIncomingLetter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TheIncomingLetterFindUniqueArgs>(args: SelectSubset<T, TheIncomingLetterFindUniqueArgs<ExtArgs>>): Prisma__TheIncomingLetterClient<$Result.GetResult<Prisma.$TheIncomingLetterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TheIncomingLetter that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TheIncomingLetterFindUniqueOrThrowArgs} args - Arguments to find a TheIncomingLetter
     * @example
     * // Get one TheIncomingLetter
     * const theIncomingLetter = await prisma.theIncomingLetter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TheIncomingLetterFindUniqueOrThrowArgs>(args: SelectSubset<T, TheIncomingLetterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TheIncomingLetterClient<$Result.GetResult<Prisma.$TheIncomingLetterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TheIncomingLetter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TheIncomingLetterFindFirstArgs} args - Arguments to find a TheIncomingLetter
     * @example
     * // Get one TheIncomingLetter
     * const theIncomingLetter = await prisma.theIncomingLetter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TheIncomingLetterFindFirstArgs>(args?: SelectSubset<T, TheIncomingLetterFindFirstArgs<ExtArgs>>): Prisma__TheIncomingLetterClient<$Result.GetResult<Prisma.$TheIncomingLetterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TheIncomingLetter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TheIncomingLetterFindFirstOrThrowArgs} args - Arguments to find a TheIncomingLetter
     * @example
     * // Get one TheIncomingLetter
     * const theIncomingLetter = await prisma.theIncomingLetter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TheIncomingLetterFindFirstOrThrowArgs>(args?: SelectSubset<T, TheIncomingLetterFindFirstOrThrowArgs<ExtArgs>>): Prisma__TheIncomingLetterClient<$Result.GetResult<Prisma.$TheIncomingLetterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TheIncomingLetters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TheIncomingLetterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TheIncomingLetters
     * const theIncomingLetters = await prisma.theIncomingLetter.findMany()
     * 
     * // Get first 10 TheIncomingLetters
     * const theIncomingLetters = await prisma.theIncomingLetter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const theIncomingLetterWithIdOnly = await prisma.theIncomingLetter.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TheIncomingLetterFindManyArgs>(args?: SelectSubset<T, TheIncomingLetterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TheIncomingLetterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TheIncomingLetter.
     * @param {TheIncomingLetterCreateArgs} args - Arguments to create a TheIncomingLetter.
     * @example
     * // Create one TheIncomingLetter
     * const TheIncomingLetter = await prisma.theIncomingLetter.create({
     *   data: {
     *     // ... data to create a TheIncomingLetter
     *   }
     * })
     * 
     */
    create<T extends TheIncomingLetterCreateArgs>(args: SelectSubset<T, TheIncomingLetterCreateArgs<ExtArgs>>): Prisma__TheIncomingLetterClient<$Result.GetResult<Prisma.$TheIncomingLetterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TheIncomingLetters.
     * @param {TheIncomingLetterCreateManyArgs} args - Arguments to create many TheIncomingLetters.
     * @example
     * // Create many TheIncomingLetters
     * const theIncomingLetter = await prisma.theIncomingLetter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TheIncomingLetterCreateManyArgs>(args?: SelectSubset<T, TheIncomingLetterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TheIncomingLetter.
     * @param {TheIncomingLetterDeleteArgs} args - Arguments to delete one TheIncomingLetter.
     * @example
     * // Delete one TheIncomingLetter
     * const TheIncomingLetter = await prisma.theIncomingLetter.delete({
     *   where: {
     *     // ... filter to delete one TheIncomingLetter
     *   }
     * })
     * 
     */
    delete<T extends TheIncomingLetterDeleteArgs>(args: SelectSubset<T, TheIncomingLetterDeleteArgs<ExtArgs>>): Prisma__TheIncomingLetterClient<$Result.GetResult<Prisma.$TheIncomingLetterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TheIncomingLetter.
     * @param {TheIncomingLetterUpdateArgs} args - Arguments to update one TheIncomingLetter.
     * @example
     * // Update one TheIncomingLetter
     * const theIncomingLetter = await prisma.theIncomingLetter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TheIncomingLetterUpdateArgs>(args: SelectSubset<T, TheIncomingLetterUpdateArgs<ExtArgs>>): Prisma__TheIncomingLetterClient<$Result.GetResult<Prisma.$TheIncomingLetterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TheIncomingLetters.
     * @param {TheIncomingLetterDeleteManyArgs} args - Arguments to filter TheIncomingLetters to delete.
     * @example
     * // Delete a few TheIncomingLetters
     * const { count } = await prisma.theIncomingLetter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TheIncomingLetterDeleteManyArgs>(args?: SelectSubset<T, TheIncomingLetterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TheIncomingLetters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TheIncomingLetterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TheIncomingLetters
     * const theIncomingLetter = await prisma.theIncomingLetter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TheIncomingLetterUpdateManyArgs>(args: SelectSubset<T, TheIncomingLetterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TheIncomingLetter.
     * @param {TheIncomingLetterUpsertArgs} args - Arguments to update or create a TheIncomingLetter.
     * @example
     * // Update or create a TheIncomingLetter
     * const theIncomingLetter = await prisma.theIncomingLetter.upsert({
     *   create: {
     *     // ... data to create a TheIncomingLetter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TheIncomingLetter we want to update
     *   }
     * })
     */
    upsert<T extends TheIncomingLetterUpsertArgs>(args: SelectSubset<T, TheIncomingLetterUpsertArgs<ExtArgs>>): Prisma__TheIncomingLetterClient<$Result.GetResult<Prisma.$TheIncomingLetterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TheIncomingLetters that matches the filter.
     * @param {TheIncomingLetterFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const theIncomingLetter = await prisma.theIncomingLetter.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: TheIncomingLetterFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a TheIncomingLetter.
     * @param {TheIncomingLetterAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const theIncomingLetter = await prisma.theIncomingLetter.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: TheIncomingLetterAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of TheIncomingLetters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TheIncomingLetterCountArgs} args - Arguments to filter TheIncomingLetters to count.
     * @example
     * // Count the number of TheIncomingLetters
     * const count = await prisma.theIncomingLetter.count({
     *   where: {
     *     // ... the filter for the TheIncomingLetters we want to count
     *   }
     * })
    **/
    count<T extends TheIncomingLetterCountArgs>(
      args?: Subset<T, TheIncomingLetterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TheIncomingLetterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TheIncomingLetter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TheIncomingLetterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TheIncomingLetterAggregateArgs>(args: Subset<T, TheIncomingLetterAggregateArgs>): Prisma.PrismaPromise<GetTheIncomingLetterAggregateType<T>>

    /**
     * Group by TheIncomingLetter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TheIncomingLetterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TheIncomingLetterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TheIncomingLetterGroupByArgs['orderBy'] }
        : { orderBy?: TheIncomingLetterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TheIncomingLetterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTheIncomingLetterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TheIncomingLetter model
   */
  readonly fields: TheIncomingLetterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TheIncomingLetter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TheIncomingLetterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TheIncomingLetter model
   */ 
  interface TheIncomingLetterFieldRefs {
    readonly id: FieldRef<"TheIncomingLetter", 'String'>
    readonly sender: FieldRef<"TheIncomingLetter", 'String'>
    readonly subject: FieldRef<"TheIncomingLetter", 'String'>
    readonly priority: FieldRef<"TheIncomingLetter", 'Priority'>
    readonly status: FieldRef<"TheIncomingLetter", 'IncomingStatus'>
    readonly projectId: FieldRef<"TheIncomingLetter", 'String'>
    readonly createdAt: FieldRef<"TheIncomingLetter", 'DateTime'>
    readonly updatedAt: FieldRef<"TheIncomingLetter", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TheIncomingLetter findUnique
   */
  export type TheIncomingLetterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TheIncomingLetter
     */
    select?: TheIncomingLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TheIncomingLetter
     */
    omit?: TheIncomingLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheIncomingLetterInclude<ExtArgs> | null
    /**
     * Filter, which TheIncomingLetter to fetch.
     */
    where: TheIncomingLetterWhereUniqueInput
  }

  /**
   * TheIncomingLetter findUniqueOrThrow
   */
  export type TheIncomingLetterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TheIncomingLetter
     */
    select?: TheIncomingLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TheIncomingLetter
     */
    omit?: TheIncomingLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheIncomingLetterInclude<ExtArgs> | null
    /**
     * Filter, which TheIncomingLetter to fetch.
     */
    where: TheIncomingLetterWhereUniqueInput
  }

  /**
   * TheIncomingLetter findFirst
   */
  export type TheIncomingLetterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TheIncomingLetter
     */
    select?: TheIncomingLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TheIncomingLetter
     */
    omit?: TheIncomingLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheIncomingLetterInclude<ExtArgs> | null
    /**
     * Filter, which TheIncomingLetter to fetch.
     */
    where?: TheIncomingLetterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TheIncomingLetters to fetch.
     */
    orderBy?: TheIncomingLetterOrderByWithRelationInput | TheIncomingLetterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TheIncomingLetters.
     */
    cursor?: TheIncomingLetterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TheIncomingLetters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TheIncomingLetters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TheIncomingLetters.
     */
    distinct?: TheIncomingLetterScalarFieldEnum | TheIncomingLetterScalarFieldEnum[]
  }

  /**
   * TheIncomingLetter findFirstOrThrow
   */
  export type TheIncomingLetterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TheIncomingLetter
     */
    select?: TheIncomingLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TheIncomingLetter
     */
    omit?: TheIncomingLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheIncomingLetterInclude<ExtArgs> | null
    /**
     * Filter, which TheIncomingLetter to fetch.
     */
    where?: TheIncomingLetterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TheIncomingLetters to fetch.
     */
    orderBy?: TheIncomingLetterOrderByWithRelationInput | TheIncomingLetterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TheIncomingLetters.
     */
    cursor?: TheIncomingLetterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TheIncomingLetters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TheIncomingLetters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TheIncomingLetters.
     */
    distinct?: TheIncomingLetterScalarFieldEnum | TheIncomingLetterScalarFieldEnum[]
  }

  /**
   * TheIncomingLetter findMany
   */
  export type TheIncomingLetterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TheIncomingLetter
     */
    select?: TheIncomingLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TheIncomingLetter
     */
    omit?: TheIncomingLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheIncomingLetterInclude<ExtArgs> | null
    /**
     * Filter, which TheIncomingLetters to fetch.
     */
    where?: TheIncomingLetterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TheIncomingLetters to fetch.
     */
    orderBy?: TheIncomingLetterOrderByWithRelationInput | TheIncomingLetterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TheIncomingLetters.
     */
    cursor?: TheIncomingLetterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TheIncomingLetters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TheIncomingLetters.
     */
    skip?: number
    distinct?: TheIncomingLetterScalarFieldEnum | TheIncomingLetterScalarFieldEnum[]
  }

  /**
   * TheIncomingLetter create
   */
  export type TheIncomingLetterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TheIncomingLetter
     */
    select?: TheIncomingLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TheIncomingLetter
     */
    omit?: TheIncomingLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheIncomingLetterInclude<ExtArgs> | null
    /**
     * The data needed to create a TheIncomingLetter.
     */
    data: XOR<TheIncomingLetterCreateInput, TheIncomingLetterUncheckedCreateInput>
  }

  /**
   * TheIncomingLetter createMany
   */
  export type TheIncomingLetterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TheIncomingLetters.
     */
    data: TheIncomingLetterCreateManyInput | TheIncomingLetterCreateManyInput[]
  }

  /**
   * TheIncomingLetter update
   */
  export type TheIncomingLetterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TheIncomingLetter
     */
    select?: TheIncomingLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TheIncomingLetter
     */
    omit?: TheIncomingLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheIncomingLetterInclude<ExtArgs> | null
    /**
     * The data needed to update a TheIncomingLetter.
     */
    data: XOR<TheIncomingLetterUpdateInput, TheIncomingLetterUncheckedUpdateInput>
    /**
     * Choose, which TheIncomingLetter to update.
     */
    where: TheIncomingLetterWhereUniqueInput
  }

  /**
   * TheIncomingLetter updateMany
   */
  export type TheIncomingLetterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TheIncomingLetters.
     */
    data: XOR<TheIncomingLetterUpdateManyMutationInput, TheIncomingLetterUncheckedUpdateManyInput>
    /**
     * Filter which TheIncomingLetters to update
     */
    where?: TheIncomingLetterWhereInput
    /**
     * Limit how many TheIncomingLetters to update.
     */
    limit?: number
  }

  /**
   * TheIncomingLetter upsert
   */
  export type TheIncomingLetterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TheIncomingLetter
     */
    select?: TheIncomingLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TheIncomingLetter
     */
    omit?: TheIncomingLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheIncomingLetterInclude<ExtArgs> | null
    /**
     * The filter to search for the TheIncomingLetter to update in case it exists.
     */
    where: TheIncomingLetterWhereUniqueInput
    /**
     * In case the TheIncomingLetter found by the `where` argument doesn't exist, create a new TheIncomingLetter with this data.
     */
    create: XOR<TheIncomingLetterCreateInput, TheIncomingLetterUncheckedCreateInput>
    /**
     * In case the TheIncomingLetter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TheIncomingLetterUpdateInput, TheIncomingLetterUncheckedUpdateInput>
  }

  /**
   * TheIncomingLetter delete
   */
  export type TheIncomingLetterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TheIncomingLetter
     */
    select?: TheIncomingLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TheIncomingLetter
     */
    omit?: TheIncomingLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheIncomingLetterInclude<ExtArgs> | null
    /**
     * Filter which TheIncomingLetter to delete.
     */
    where: TheIncomingLetterWhereUniqueInput
  }

  /**
   * TheIncomingLetter deleteMany
   */
  export type TheIncomingLetterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TheIncomingLetters to delete
     */
    where?: TheIncomingLetterWhereInput
    /**
     * Limit how many TheIncomingLetters to delete.
     */
    limit?: number
  }

  /**
   * TheIncomingLetter findRaw
   */
  export type TheIncomingLetterFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * TheIncomingLetter aggregateRaw
   */
  export type TheIncomingLetterAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * TheIncomingLetter without action
   */
  export type TheIncomingLetterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TheIncomingLetter
     */
    select?: TheIncomingLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TheIncomingLetter
     */
    omit?: TheIncomingLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheIncomingLetterInclude<ExtArgs> | null
  }


  /**
   * Model TheOutgoingLetter
   */

  export type AggregateTheOutgoingLetter = {
    _count: TheOutgoingLetterCountAggregateOutputType | null
    _min: TheOutgoingLetterMinAggregateOutputType | null
    _max: TheOutgoingLetterMaxAggregateOutputType | null
  }

  export type TheOutgoingLetterMinAggregateOutputType = {
    id: string | null
    recipent: string | null
    subject: string | null
    status: $Enums.OutgoingStatus | null
    priority: $Enums.Priority | null
    createdAt: Date | null
    projectId: string | null
  }

  export type TheOutgoingLetterMaxAggregateOutputType = {
    id: string | null
    recipent: string | null
    subject: string | null
    status: $Enums.OutgoingStatus | null
    priority: $Enums.Priority | null
    createdAt: Date | null
    projectId: string | null
  }

  export type TheOutgoingLetterCountAggregateOutputType = {
    id: number
    recipent: number
    subject: number
    status: number
    priority: number
    createdAt: number
    projectId: number
    _all: number
  }


  export type TheOutgoingLetterMinAggregateInputType = {
    id?: true
    recipent?: true
    subject?: true
    status?: true
    priority?: true
    createdAt?: true
    projectId?: true
  }

  export type TheOutgoingLetterMaxAggregateInputType = {
    id?: true
    recipent?: true
    subject?: true
    status?: true
    priority?: true
    createdAt?: true
    projectId?: true
  }

  export type TheOutgoingLetterCountAggregateInputType = {
    id?: true
    recipent?: true
    subject?: true
    status?: true
    priority?: true
    createdAt?: true
    projectId?: true
    _all?: true
  }

  export type TheOutgoingLetterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TheOutgoingLetter to aggregate.
     */
    where?: TheOutgoingLetterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TheOutgoingLetters to fetch.
     */
    orderBy?: TheOutgoingLetterOrderByWithRelationInput | TheOutgoingLetterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TheOutgoingLetterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TheOutgoingLetters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TheOutgoingLetters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TheOutgoingLetters
    **/
    _count?: true | TheOutgoingLetterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TheOutgoingLetterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TheOutgoingLetterMaxAggregateInputType
  }

  export type GetTheOutgoingLetterAggregateType<T extends TheOutgoingLetterAggregateArgs> = {
        [P in keyof T & keyof AggregateTheOutgoingLetter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTheOutgoingLetter[P]>
      : GetScalarType<T[P], AggregateTheOutgoingLetter[P]>
  }




  export type TheOutgoingLetterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TheOutgoingLetterWhereInput
    orderBy?: TheOutgoingLetterOrderByWithAggregationInput | TheOutgoingLetterOrderByWithAggregationInput[]
    by: TheOutgoingLetterScalarFieldEnum[] | TheOutgoingLetterScalarFieldEnum
    having?: TheOutgoingLetterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TheOutgoingLetterCountAggregateInputType | true
    _min?: TheOutgoingLetterMinAggregateInputType
    _max?: TheOutgoingLetterMaxAggregateInputType
  }

  export type TheOutgoingLetterGroupByOutputType = {
    id: string
    recipent: string
    subject: string
    status: $Enums.OutgoingStatus
    priority: $Enums.Priority
    createdAt: Date
    projectId: string
    _count: TheOutgoingLetterCountAggregateOutputType | null
    _min: TheOutgoingLetterMinAggregateOutputType | null
    _max: TheOutgoingLetterMaxAggregateOutputType | null
  }

  type GetTheOutgoingLetterGroupByPayload<T extends TheOutgoingLetterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TheOutgoingLetterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TheOutgoingLetterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TheOutgoingLetterGroupByOutputType[P]>
            : GetScalarType<T[P], TheOutgoingLetterGroupByOutputType[P]>
        }
      >
    >


  export type TheOutgoingLetterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipent?: boolean
    subject?: boolean
    status?: boolean
    priority?: boolean
    createdAt?: boolean
    projectId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["theOutgoingLetter"]>



  export type TheOutgoingLetterSelectScalar = {
    id?: boolean
    recipent?: boolean
    subject?: boolean
    status?: boolean
    priority?: boolean
    createdAt?: boolean
    projectId?: boolean
  }

  export type TheOutgoingLetterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "recipent" | "subject" | "status" | "priority" | "createdAt" | "projectId", ExtArgs["result"]["theOutgoingLetter"]>
  export type TheOutgoingLetterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $TheOutgoingLetterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TheOutgoingLetter"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      recipent: string
      subject: string
      status: $Enums.OutgoingStatus
      priority: $Enums.Priority
      createdAt: Date
      projectId: string
    }, ExtArgs["result"]["theOutgoingLetter"]>
    composites: {}
  }

  type TheOutgoingLetterGetPayload<S extends boolean | null | undefined | TheOutgoingLetterDefaultArgs> = $Result.GetResult<Prisma.$TheOutgoingLetterPayload, S>

  type TheOutgoingLetterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TheOutgoingLetterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TheOutgoingLetterCountAggregateInputType | true
    }

  export interface TheOutgoingLetterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TheOutgoingLetter'], meta: { name: 'TheOutgoingLetter' } }
    /**
     * Find zero or one TheOutgoingLetter that matches the filter.
     * @param {TheOutgoingLetterFindUniqueArgs} args - Arguments to find a TheOutgoingLetter
     * @example
     * // Get one TheOutgoingLetter
     * const theOutgoingLetter = await prisma.theOutgoingLetter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TheOutgoingLetterFindUniqueArgs>(args: SelectSubset<T, TheOutgoingLetterFindUniqueArgs<ExtArgs>>): Prisma__TheOutgoingLetterClient<$Result.GetResult<Prisma.$TheOutgoingLetterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TheOutgoingLetter that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TheOutgoingLetterFindUniqueOrThrowArgs} args - Arguments to find a TheOutgoingLetter
     * @example
     * // Get one TheOutgoingLetter
     * const theOutgoingLetter = await prisma.theOutgoingLetter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TheOutgoingLetterFindUniqueOrThrowArgs>(args: SelectSubset<T, TheOutgoingLetterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TheOutgoingLetterClient<$Result.GetResult<Prisma.$TheOutgoingLetterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TheOutgoingLetter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TheOutgoingLetterFindFirstArgs} args - Arguments to find a TheOutgoingLetter
     * @example
     * // Get one TheOutgoingLetter
     * const theOutgoingLetter = await prisma.theOutgoingLetter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TheOutgoingLetterFindFirstArgs>(args?: SelectSubset<T, TheOutgoingLetterFindFirstArgs<ExtArgs>>): Prisma__TheOutgoingLetterClient<$Result.GetResult<Prisma.$TheOutgoingLetterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TheOutgoingLetter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TheOutgoingLetterFindFirstOrThrowArgs} args - Arguments to find a TheOutgoingLetter
     * @example
     * // Get one TheOutgoingLetter
     * const theOutgoingLetter = await prisma.theOutgoingLetter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TheOutgoingLetterFindFirstOrThrowArgs>(args?: SelectSubset<T, TheOutgoingLetterFindFirstOrThrowArgs<ExtArgs>>): Prisma__TheOutgoingLetterClient<$Result.GetResult<Prisma.$TheOutgoingLetterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TheOutgoingLetters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TheOutgoingLetterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TheOutgoingLetters
     * const theOutgoingLetters = await prisma.theOutgoingLetter.findMany()
     * 
     * // Get first 10 TheOutgoingLetters
     * const theOutgoingLetters = await prisma.theOutgoingLetter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const theOutgoingLetterWithIdOnly = await prisma.theOutgoingLetter.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TheOutgoingLetterFindManyArgs>(args?: SelectSubset<T, TheOutgoingLetterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TheOutgoingLetterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TheOutgoingLetter.
     * @param {TheOutgoingLetterCreateArgs} args - Arguments to create a TheOutgoingLetter.
     * @example
     * // Create one TheOutgoingLetter
     * const TheOutgoingLetter = await prisma.theOutgoingLetter.create({
     *   data: {
     *     // ... data to create a TheOutgoingLetter
     *   }
     * })
     * 
     */
    create<T extends TheOutgoingLetterCreateArgs>(args: SelectSubset<T, TheOutgoingLetterCreateArgs<ExtArgs>>): Prisma__TheOutgoingLetterClient<$Result.GetResult<Prisma.$TheOutgoingLetterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TheOutgoingLetters.
     * @param {TheOutgoingLetterCreateManyArgs} args - Arguments to create many TheOutgoingLetters.
     * @example
     * // Create many TheOutgoingLetters
     * const theOutgoingLetter = await prisma.theOutgoingLetter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TheOutgoingLetterCreateManyArgs>(args?: SelectSubset<T, TheOutgoingLetterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TheOutgoingLetter.
     * @param {TheOutgoingLetterDeleteArgs} args - Arguments to delete one TheOutgoingLetter.
     * @example
     * // Delete one TheOutgoingLetter
     * const TheOutgoingLetter = await prisma.theOutgoingLetter.delete({
     *   where: {
     *     // ... filter to delete one TheOutgoingLetter
     *   }
     * })
     * 
     */
    delete<T extends TheOutgoingLetterDeleteArgs>(args: SelectSubset<T, TheOutgoingLetterDeleteArgs<ExtArgs>>): Prisma__TheOutgoingLetterClient<$Result.GetResult<Prisma.$TheOutgoingLetterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TheOutgoingLetter.
     * @param {TheOutgoingLetterUpdateArgs} args - Arguments to update one TheOutgoingLetter.
     * @example
     * // Update one TheOutgoingLetter
     * const theOutgoingLetter = await prisma.theOutgoingLetter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TheOutgoingLetterUpdateArgs>(args: SelectSubset<T, TheOutgoingLetterUpdateArgs<ExtArgs>>): Prisma__TheOutgoingLetterClient<$Result.GetResult<Prisma.$TheOutgoingLetterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TheOutgoingLetters.
     * @param {TheOutgoingLetterDeleteManyArgs} args - Arguments to filter TheOutgoingLetters to delete.
     * @example
     * // Delete a few TheOutgoingLetters
     * const { count } = await prisma.theOutgoingLetter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TheOutgoingLetterDeleteManyArgs>(args?: SelectSubset<T, TheOutgoingLetterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TheOutgoingLetters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TheOutgoingLetterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TheOutgoingLetters
     * const theOutgoingLetter = await prisma.theOutgoingLetter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TheOutgoingLetterUpdateManyArgs>(args: SelectSubset<T, TheOutgoingLetterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TheOutgoingLetter.
     * @param {TheOutgoingLetterUpsertArgs} args - Arguments to update or create a TheOutgoingLetter.
     * @example
     * // Update or create a TheOutgoingLetter
     * const theOutgoingLetter = await prisma.theOutgoingLetter.upsert({
     *   create: {
     *     // ... data to create a TheOutgoingLetter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TheOutgoingLetter we want to update
     *   }
     * })
     */
    upsert<T extends TheOutgoingLetterUpsertArgs>(args: SelectSubset<T, TheOutgoingLetterUpsertArgs<ExtArgs>>): Prisma__TheOutgoingLetterClient<$Result.GetResult<Prisma.$TheOutgoingLetterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TheOutgoingLetters that matches the filter.
     * @param {TheOutgoingLetterFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const theOutgoingLetter = await prisma.theOutgoingLetter.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: TheOutgoingLetterFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a TheOutgoingLetter.
     * @param {TheOutgoingLetterAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const theOutgoingLetter = await prisma.theOutgoingLetter.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: TheOutgoingLetterAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of TheOutgoingLetters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TheOutgoingLetterCountArgs} args - Arguments to filter TheOutgoingLetters to count.
     * @example
     * // Count the number of TheOutgoingLetters
     * const count = await prisma.theOutgoingLetter.count({
     *   where: {
     *     // ... the filter for the TheOutgoingLetters we want to count
     *   }
     * })
    **/
    count<T extends TheOutgoingLetterCountArgs>(
      args?: Subset<T, TheOutgoingLetterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TheOutgoingLetterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TheOutgoingLetter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TheOutgoingLetterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TheOutgoingLetterAggregateArgs>(args: Subset<T, TheOutgoingLetterAggregateArgs>): Prisma.PrismaPromise<GetTheOutgoingLetterAggregateType<T>>

    /**
     * Group by TheOutgoingLetter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TheOutgoingLetterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TheOutgoingLetterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TheOutgoingLetterGroupByArgs['orderBy'] }
        : { orderBy?: TheOutgoingLetterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TheOutgoingLetterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTheOutgoingLetterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TheOutgoingLetter model
   */
  readonly fields: TheOutgoingLetterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TheOutgoingLetter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TheOutgoingLetterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TheOutgoingLetter model
   */ 
  interface TheOutgoingLetterFieldRefs {
    readonly id: FieldRef<"TheOutgoingLetter", 'String'>
    readonly recipent: FieldRef<"TheOutgoingLetter", 'String'>
    readonly subject: FieldRef<"TheOutgoingLetter", 'String'>
    readonly status: FieldRef<"TheOutgoingLetter", 'OutgoingStatus'>
    readonly priority: FieldRef<"TheOutgoingLetter", 'Priority'>
    readonly createdAt: FieldRef<"TheOutgoingLetter", 'DateTime'>
    readonly projectId: FieldRef<"TheOutgoingLetter", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TheOutgoingLetter findUnique
   */
  export type TheOutgoingLetterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TheOutgoingLetter
     */
    select?: TheOutgoingLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TheOutgoingLetter
     */
    omit?: TheOutgoingLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheOutgoingLetterInclude<ExtArgs> | null
    /**
     * Filter, which TheOutgoingLetter to fetch.
     */
    where: TheOutgoingLetterWhereUniqueInput
  }

  /**
   * TheOutgoingLetter findUniqueOrThrow
   */
  export type TheOutgoingLetterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TheOutgoingLetter
     */
    select?: TheOutgoingLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TheOutgoingLetter
     */
    omit?: TheOutgoingLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheOutgoingLetterInclude<ExtArgs> | null
    /**
     * Filter, which TheOutgoingLetter to fetch.
     */
    where: TheOutgoingLetterWhereUniqueInput
  }

  /**
   * TheOutgoingLetter findFirst
   */
  export type TheOutgoingLetterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TheOutgoingLetter
     */
    select?: TheOutgoingLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TheOutgoingLetter
     */
    omit?: TheOutgoingLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheOutgoingLetterInclude<ExtArgs> | null
    /**
     * Filter, which TheOutgoingLetter to fetch.
     */
    where?: TheOutgoingLetterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TheOutgoingLetters to fetch.
     */
    orderBy?: TheOutgoingLetterOrderByWithRelationInput | TheOutgoingLetterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TheOutgoingLetters.
     */
    cursor?: TheOutgoingLetterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TheOutgoingLetters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TheOutgoingLetters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TheOutgoingLetters.
     */
    distinct?: TheOutgoingLetterScalarFieldEnum | TheOutgoingLetterScalarFieldEnum[]
  }

  /**
   * TheOutgoingLetter findFirstOrThrow
   */
  export type TheOutgoingLetterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TheOutgoingLetter
     */
    select?: TheOutgoingLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TheOutgoingLetter
     */
    omit?: TheOutgoingLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheOutgoingLetterInclude<ExtArgs> | null
    /**
     * Filter, which TheOutgoingLetter to fetch.
     */
    where?: TheOutgoingLetterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TheOutgoingLetters to fetch.
     */
    orderBy?: TheOutgoingLetterOrderByWithRelationInput | TheOutgoingLetterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TheOutgoingLetters.
     */
    cursor?: TheOutgoingLetterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TheOutgoingLetters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TheOutgoingLetters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TheOutgoingLetters.
     */
    distinct?: TheOutgoingLetterScalarFieldEnum | TheOutgoingLetterScalarFieldEnum[]
  }

  /**
   * TheOutgoingLetter findMany
   */
  export type TheOutgoingLetterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TheOutgoingLetter
     */
    select?: TheOutgoingLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TheOutgoingLetter
     */
    omit?: TheOutgoingLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheOutgoingLetterInclude<ExtArgs> | null
    /**
     * Filter, which TheOutgoingLetters to fetch.
     */
    where?: TheOutgoingLetterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TheOutgoingLetters to fetch.
     */
    orderBy?: TheOutgoingLetterOrderByWithRelationInput | TheOutgoingLetterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TheOutgoingLetters.
     */
    cursor?: TheOutgoingLetterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TheOutgoingLetters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TheOutgoingLetters.
     */
    skip?: number
    distinct?: TheOutgoingLetterScalarFieldEnum | TheOutgoingLetterScalarFieldEnum[]
  }

  /**
   * TheOutgoingLetter create
   */
  export type TheOutgoingLetterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TheOutgoingLetter
     */
    select?: TheOutgoingLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TheOutgoingLetter
     */
    omit?: TheOutgoingLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheOutgoingLetterInclude<ExtArgs> | null
    /**
     * The data needed to create a TheOutgoingLetter.
     */
    data: XOR<TheOutgoingLetterCreateInput, TheOutgoingLetterUncheckedCreateInput>
  }

  /**
   * TheOutgoingLetter createMany
   */
  export type TheOutgoingLetterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TheOutgoingLetters.
     */
    data: TheOutgoingLetterCreateManyInput | TheOutgoingLetterCreateManyInput[]
  }

  /**
   * TheOutgoingLetter update
   */
  export type TheOutgoingLetterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TheOutgoingLetter
     */
    select?: TheOutgoingLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TheOutgoingLetter
     */
    omit?: TheOutgoingLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheOutgoingLetterInclude<ExtArgs> | null
    /**
     * The data needed to update a TheOutgoingLetter.
     */
    data: XOR<TheOutgoingLetterUpdateInput, TheOutgoingLetterUncheckedUpdateInput>
    /**
     * Choose, which TheOutgoingLetter to update.
     */
    where: TheOutgoingLetterWhereUniqueInput
  }

  /**
   * TheOutgoingLetter updateMany
   */
  export type TheOutgoingLetterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TheOutgoingLetters.
     */
    data: XOR<TheOutgoingLetterUpdateManyMutationInput, TheOutgoingLetterUncheckedUpdateManyInput>
    /**
     * Filter which TheOutgoingLetters to update
     */
    where?: TheOutgoingLetterWhereInput
    /**
     * Limit how many TheOutgoingLetters to update.
     */
    limit?: number
  }

  /**
   * TheOutgoingLetter upsert
   */
  export type TheOutgoingLetterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TheOutgoingLetter
     */
    select?: TheOutgoingLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TheOutgoingLetter
     */
    omit?: TheOutgoingLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheOutgoingLetterInclude<ExtArgs> | null
    /**
     * The filter to search for the TheOutgoingLetter to update in case it exists.
     */
    where: TheOutgoingLetterWhereUniqueInput
    /**
     * In case the TheOutgoingLetter found by the `where` argument doesn't exist, create a new TheOutgoingLetter with this data.
     */
    create: XOR<TheOutgoingLetterCreateInput, TheOutgoingLetterUncheckedCreateInput>
    /**
     * In case the TheOutgoingLetter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TheOutgoingLetterUpdateInput, TheOutgoingLetterUncheckedUpdateInput>
  }

  /**
   * TheOutgoingLetter delete
   */
  export type TheOutgoingLetterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TheOutgoingLetter
     */
    select?: TheOutgoingLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TheOutgoingLetter
     */
    omit?: TheOutgoingLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheOutgoingLetterInclude<ExtArgs> | null
    /**
     * Filter which TheOutgoingLetter to delete.
     */
    where: TheOutgoingLetterWhereUniqueInput
  }

  /**
   * TheOutgoingLetter deleteMany
   */
  export type TheOutgoingLetterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TheOutgoingLetters to delete
     */
    where?: TheOutgoingLetterWhereInput
    /**
     * Limit how many TheOutgoingLetters to delete.
     */
    limit?: number
  }

  /**
   * TheOutgoingLetter findRaw
   */
  export type TheOutgoingLetterFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * TheOutgoingLetter aggregateRaw
   */
  export type TheOutgoingLetterAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * TheOutgoingLetter without action
   */
  export type TheOutgoingLetterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TheOutgoingLetter
     */
    select?: TheOutgoingLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TheOutgoingLetter
     */
    omit?: TheOutgoingLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TheOutgoingLetterInclude<ExtArgs> | null
  }


  /**
   * Model Report
   */

  export type AggregateReport = {
    _count: ReportCountAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  export type ReportMinAggregateOutputType = {
    id: string | null
    publisher: string | null
    status: $Enums.reportStatus | null
    uploadedDate: Date | null
    lastModified: Date | null
    version: string | null
    downloadedUrl: string | null
    reportType: $Enums.reportType | null
    projectId: string | null
  }

  export type ReportMaxAggregateOutputType = {
    id: string | null
    publisher: string | null
    status: $Enums.reportStatus | null
    uploadedDate: Date | null
    lastModified: Date | null
    version: string | null
    downloadedUrl: string | null
    reportType: $Enums.reportType | null
    projectId: string | null
  }

  export type ReportCountAggregateOutputType = {
    id: number
    publisher: number
    status: number
    uploadedDate: number
    lastModified: number
    version: number
    downloadedUrl: number
    reportType: number
    projectId: number
    _all: number
  }


  export type ReportMinAggregateInputType = {
    id?: true
    publisher?: true
    status?: true
    uploadedDate?: true
    lastModified?: true
    version?: true
    downloadedUrl?: true
    reportType?: true
    projectId?: true
  }

  export type ReportMaxAggregateInputType = {
    id?: true
    publisher?: true
    status?: true
    uploadedDate?: true
    lastModified?: true
    version?: true
    downloadedUrl?: true
    reportType?: true
    projectId?: true
  }

  export type ReportCountAggregateInputType = {
    id?: true
    publisher?: true
    status?: true
    uploadedDate?: true
    lastModified?: true
    version?: true
    downloadedUrl?: true
    reportType?: true
    projectId?: true
    _all?: true
  }

  export type ReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Report to aggregate.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reports
    **/
    _count?: true | ReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportMaxAggregateInputType
  }

  export type GetReportAggregateType<T extends ReportAggregateArgs> = {
        [P in keyof T & keyof AggregateReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReport[P]>
      : GetScalarType<T[P], AggregateReport[P]>
  }




  export type ReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithAggregationInput | ReportOrderByWithAggregationInput[]
    by: ReportScalarFieldEnum[] | ReportScalarFieldEnum
    having?: ReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportCountAggregateInputType | true
    _min?: ReportMinAggregateInputType
    _max?: ReportMaxAggregateInputType
  }

  export type ReportGroupByOutputType = {
    id: string
    publisher: string
    status: $Enums.reportStatus
    uploadedDate: Date
    lastModified: Date
    version: string
    downloadedUrl: string
    reportType: $Enums.reportType
    projectId: string
    _count: ReportCountAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  type GetReportGroupByPayload<T extends ReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportGroupByOutputType[P]>
            : GetScalarType<T[P], ReportGroupByOutputType[P]>
        }
      >
    >


  export type ReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    publisher?: boolean
    status?: boolean
    uploadedDate?: boolean
    lastModified?: boolean
    version?: boolean
    downloadedUrl?: boolean
    reportType?: boolean
    projectId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>



  export type ReportSelectScalar = {
    id?: boolean
    publisher?: boolean
    status?: boolean
    uploadedDate?: boolean
    lastModified?: boolean
    version?: boolean
    downloadedUrl?: boolean
    reportType?: boolean
    projectId?: boolean
  }

  export type ReportOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "publisher" | "status" | "uploadedDate" | "lastModified" | "version" | "downloadedUrl" | "reportType" | "projectId", ExtArgs["result"]["report"]>
  export type ReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $ReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Report"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      publisher: string
      status: $Enums.reportStatus
      uploadedDate: Date
      lastModified: Date
      version: string
      downloadedUrl: string
      reportType: $Enums.reportType
      projectId: string
    }, ExtArgs["result"]["report"]>
    composites: {}
  }

  type ReportGetPayload<S extends boolean | null | undefined | ReportDefaultArgs> = $Result.GetResult<Prisma.$ReportPayload, S>

  type ReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReportCountAggregateInputType | true
    }

  export interface ReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Report'], meta: { name: 'Report' } }
    /**
     * Find zero or one Report that matches the filter.
     * @param {ReportFindUniqueArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportFindUniqueArgs>(args: SelectSubset<T, ReportFindUniqueArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Report that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReportFindUniqueOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Report that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportFindFirstArgs>(args?: SelectSubset<T, ReportFindFirstArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Report that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reports
     * const reports = await prisma.report.findMany()
     * 
     * // Get first 10 Reports
     * const reports = await prisma.report.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportWithIdOnly = await prisma.report.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportFindManyArgs>(args?: SelectSubset<T, ReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Report.
     * @param {ReportCreateArgs} args - Arguments to create a Report.
     * @example
     * // Create one Report
     * const Report = await prisma.report.create({
     *   data: {
     *     // ... data to create a Report
     *   }
     * })
     * 
     */
    create<T extends ReportCreateArgs>(args: SelectSubset<T, ReportCreateArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reports.
     * @param {ReportCreateManyArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const report = await prisma.report.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportCreateManyArgs>(args?: SelectSubset<T, ReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Report.
     * @param {ReportDeleteArgs} args - Arguments to delete one Report.
     * @example
     * // Delete one Report
     * const Report = await prisma.report.delete({
     *   where: {
     *     // ... filter to delete one Report
     *   }
     * })
     * 
     */
    delete<T extends ReportDeleteArgs>(args: SelectSubset<T, ReportDeleteArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Report.
     * @param {ReportUpdateArgs} args - Arguments to update one Report.
     * @example
     * // Update one Report
     * const report = await prisma.report.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportUpdateArgs>(args: SelectSubset<T, ReportUpdateArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reports.
     * @param {ReportDeleteManyArgs} args - Arguments to filter Reports to delete.
     * @example
     * // Delete a few Reports
     * const { count } = await prisma.report.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportDeleteManyArgs>(args?: SelectSubset<T, ReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reports
     * const report = await prisma.report.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportUpdateManyArgs>(args: SelectSubset<T, ReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Report.
     * @param {ReportUpsertArgs} args - Arguments to update or create a Report.
     * @example
     * // Update or create a Report
     * const report = await prisma.report.upsert({
     *   create: {
     *     // ... data to create a Report
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Report we want to update
     *   }
     * })
     */
    upsert<T extends ReportUpsertArgs>(args: SelectSubset<T, ReportUpsertArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reports that matches the filter.
     * @param {ReportFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const report = await prisma.report.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ReportFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Report.
     * @param {ReportAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const report = await prisma.report.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ReportAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCountArgs} args - Arguments to filter Reports to count.
     * @example
     * // Count the number of Reports
     * const count = await prisma.report.count({
     *   where: {
     *     // ... the filter for the Reports we want to count
     *   }
     * })
    **/
    count<T extends ReportCountArgs>(
      args?: Subset<T, ReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportAggregateArgs>(args: Subset<T, ReportAggregateArgs>): Prisma.PrismaPromise<GetReportAggregateType<T>>

    /**
     * Group by Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportGroupByArgs['orderBy'] }
        : { orderBy?: ReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Report model
   */
  readonly fields: ReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Report.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Report model
   */ 
  interface ReportFieldRefs {
    readonly id: FieldRef<"Report", 'String'>
    readonly publisher: FieldRef<"Report", 'String'>
    readonly status: FieldRef<"Report", 'reportStatus'>
    readonly uploadedDate: FieldRef<"Report", 'DateTime'>
    readonly lastModified: FieldRef<"Report", 'DateTime'>
    readonly version: FieldRef<"Report", 'String'>
    readonly downloadedUrl: FieldRef<"Report", 'String'>
    readonly reportType: FieldRef<"Report", 'reportType'>
    readonly projectId: FieldRef<"Report", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Report findUnique
   */
  export type ReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report findUniqueOrThrow
   */
  export type ReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report findFirst
   */
  export type ReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report findFirstOrThrow
   */
  export type ReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report findMany
   */
  export type ReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Reports to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report create
   */
  export type ReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to create a Report.
     */
    data: XOR<ReportCreateInput, ReportUncheckedCreateInput>
  }

  /**
   * Report createMany
   */
  export type ReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reports.
     */
    data: ReportCreateManyInput | ReportCreateManyInput[]
  }

  /**
   * Report update
   */
  export type ReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to update a Report.
     */
    data: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
    /**
     * Choose, which Report to update.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report updateMany
   */
  export type ReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reports.
     */
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyInput>
    /**
     * Filter which Reports to update
     */
    where?: ReportWhereInput
    /**
     * Limit how many Reports to update.
     */
    limit?: number
  }

  /**
   * Report upsert
   */
  export type ReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The filter to search for the Report to update in case it exists.
     */
    where: ReportWhereUniqueInput
    /**
     * In case the Report found by the `where` argument doesn't exist, create a new Report with this data.
     */
    create: XOR<ReportCreateInput, ReportUncheckedCreateInput>
    /**
     * In case the Report was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
  }

  /**
   * Report delete
   */
  export type ReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter which Report to delete.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report deleteMany
   */
  export type ReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reports to delete
     */
    where?: ReportWhereInput
    /**
     * Limit how many Reports to delete.
     */
    limit?: number
  }

  /**
   * Report findRaw
   */
  export type ReportFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Report aggregateRaw
   */
  export type ReportAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Report without action
   */
  export type ReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
  }


  /**
   * Model ConstructionSiteImage
   */

  export type AggregateConstructionSiteImage = {
    _count: ConstructionSiteImageCountAggregateOutputType | null
    _min: ConstructionSiteImageMinAggregateOutputType | null
    _max: ConstructionSiteImageMaxAggregateOutputType | null
  }

  export type ConstructionSiteImageMinAggregateOutputType = {
    id: string | null
    title: string | null
    imagesrc: string | null
    location: string | null
    date: Date | null
    category: $Enums.category | null
    projectId: string | null
  }

  export type ConstructionSiteImageMaxAggregateOutputType = {
    id: string | null
    title: string | null
    imagesrc: string | null
    location: string | null
    date: Date | null
    category: $Enums.category | null
    projectId: string | null
  }

  export type ConstructionSiteImageCountAggregateOutputType = {
    id: number
    title: number
    imagesrc: number
    location: number
    date: number
    category: number
    projectId: number
    _all: number
  }


  export type ConstructionSiteImageMinAggregateInputType = {
    id?: true
    title?: true
    imagesrc?: true
    location?: true
    date?: true
    category?: true
    projectId?: true
  }

  export type ConstructionSiteImageMaxAggregateInputType = {
    id?: true
    title?: true
    imagesrc?: true
    location?: true
    date?: true
    category?: true
    projectId?: true
  }

  export type ConstructionSiteImageCountAggregateInputType = {
    id?: true
    title?: true
    imagesrc?: true
    location?: true
    date?: true
    category?: true
    projectId?: true
    _all?: true
  }

  export type ConstructionSiteImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConstructionSiteImage to aggregate.
     */
    where?: ConstructionSiteImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConstructionSiteImages to fetch.
     */
    orderBy?: ConstructionSiteImageOrderByWithRelationInput | ConstructionSiteImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConstructionSiteImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConstructionSiteImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConstructionSiteImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ConstructionSiteImages
    **/
    _count?: true | ConstructionSiteImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConstructionSiteImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConstructionSiteImageMaxAggregateInputType
  }

  export type GetConstructionSiteImageAggregateType<T extends ConstructionSiteImageAggregateArgs> = {
        [P in keyof T & keyof AggregateConstructionSiteImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConstructionSiteImage[P]>
      : GetScalarType<T[P], AggregateConstructionSiteImage[P]>
  }




  export type ConstructionSiteImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConstructionSiteImageWhereInput
    orderBy?: ConstructionSiteImageOrderByWithAggregationInput | ConstructionSiteImageOrderByWithAggregationInput[]
    by: ConstructionSiteImageScalarFieldEnum[] | ConstructionSiteImageScalarFieldEnum
    having?: ConstructionSiteImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConstructionSiteImageCountAggregateInputType | true
    _min?: ConstructionSiteImageMinAggregateInputType
    _max?: ConstructionSiteImageMaxAggregateInputType
  }

  export type ConstructionSiteImageGroupByOutputType = {
    id: string
    title: string
    imagesrc: string
    location: string
    date: Date
    category: $Enums.category
    projectId: string
    _count: ConstructionSiteImageCountAggregateOutputType | null
    _min: ConstructionSiteImageMinAggregateOutputType | null
    _max: ConstructionSiteImageMaxAggregateOutputType | null
  }

  type GetConstructionSiteImageGroupByPayload<T extends ConstructionSiteImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConstructionSiteImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConstructionSiteImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConstructionSiteImageGroupByOutputType[P]>
            : GetScalarType<T[P], ConstructionSiteImageGroupByOutputType[P]>
        }
      >
    >


  export type ConstructionSiteImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    imagesrc?: boolean
    location?: boolean
    date?: boolean
    category?: boolean
    projectId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["constructionSiteImage"]>



  export type ConstructionSiteImageSelectScalar = {
    id?: boolean
    title?: boolean
    imagesrc?: boolean
    location?: boolean
    date?: boolean
    category?: boolean
    projectId?: boolean
  }

  export type ConstructionSiteImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "imagesrc" | "location" | "date" | "category" | "projectId", ExtArgs["result"]["constructionSiteImage"]>
  export type ConstructionSiteImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $ConstructionSiteImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ConstructionSiteImage"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      imagesrc: string
      location: string
      date: Date
      category: $Enums.category
      projectId: string
    }, ExtArgs["result"]["constructionSiteImage"]>
    composites: {}
  }

  type ConstructionSiteImageGetPayload<S extends boolean | null | undefined | ConstructionSiteImageDefaultArgs> = $Result.GetResult<Prisma.$ConstructionSiteImagePayload, S>

  type ConstructionSiteImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ConstructionSiteImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ConstructionSiteImageCountAggregateInputType | true
    }

  export interface ConstructionSiteImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConstructionSiteImage'], meta: { name: 'ConstructionSiteImage' } }
    /**
     * Find zero or one ConstructionSiteImage that matches the filter.
     * @param {ConstructionSiteImageFindUniqueArgs} args - Arguments to find a ConstructionSiteImage
     * @example
     * // Get one ConstructionSiteImage
     * const constructionSiteImage = await prisma.constructionSiteImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConstructionSiteImageFindUniqueArgs>(args: SelectSubset<T, ConstructionSiteImageFindUniqueArgs<ExtArgs>>): Prisma__ConstructionSiteImageClient<$Result.GetResult<Prisma.$ConstructionSiteImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ConstructionSiteImage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ConstructionSiteImageFindUniqueOrThrowArgs} args - Arguments to find a ConstructionSiteImage
     * @example
     * // Get one ConstructionSiteImage
     * const constructionSiteImage = await prisma.constructionSiteImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConstructionSiteImageFindUniqueOrThrowArgs>(args: SelectSubset<T, ConstructionSiteImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConstructionSiteImageClient<$Result.GetResult<Prisma.$ConstructionSiteImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ConstructionSiteImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConstructionSiteImageFindFirstArgs} args - Arguments to find a ConstructionSiteImage
     * @example
     * // Get one ConstructionSiteImage
     * const constructionSiteImage = await prisma.constructionSiteImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConstructionSiteImageFindFirstArgs>(args?: SelectSubset<T, ConstructionSiteImageFindFirstArgs<ExtArgs>>): Prisma__ConstructionSiteImageClient<$Result.GetResult<Prisma.$ConstructionSiteImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ConstructionSiteImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConstructionSiteImageFindFirstOrThrowArgs} args - Arguments to find a ConstructionSiteImage
     * @example
     * // Get one ConstructionSiteImage
     * const constructionSiteImage = await prisma.constructionSiteImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConstructionSiteImageFindFirstOrThrowArgs>(args?: SelectSubset<T, ConstructionSiteImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConstructionSiteImageClient<$Result.GetResult<Prisma.$ConstructionSiteImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ConstructionSiteImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConstructionSiteImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ConstructionSiteImages
     * const constructionSiteImages = await prisma.constructionSiteImage.findMany()
     * 
     * // Get first 10 ConstructionSiteImages
     * const constructionSiteImages = await prisma.constructionSiteImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const constructionSiteImageWithIdOnly = await prisma.constructionSiteImage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConstructionSiteImageFindManyArgs>(args?: SelectSubset<T, ConstructionSiteImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConstructionSiteImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ConstructionSiteImage.
     * @param {ConstructionSiteImageCreateArgs} args - Arguments to create a ConstructionSiteImage.
     * @example
     * // Create one ConstructionSiteImage
     * const ConstructionSiteImage = await prisma.constructionSiteImage.create({
     *   data: {
     *     // ... data to create a ConstructionSiteImage
     *   }
     * })
     * 
     */
    create<T extends ConstructionSiteImageCreateArgs>(args: SelectSubset<T, ConstructionSiteImageCreateArgs<ExtArgs>>): Prisma__ConstructionSiteImageClient<$Result.GetResult<Prisma.$ConstructionSiteImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ConstructionSiteImages.
     * @param {ConstructionSiteImageCreateManyArgs} args - Arguments to create many ConstructionSiteImages.
     * @example
     * // Create many ConstructionSiteImages
     * const constructionSiteImage = await prisma.constructionSiteImage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConstructionSiteImageCreateManyArgs>(args?: SelectSubset<T, ConstructionSiteImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ConstructionSiteImage.
     * @param {ConstructionSiteImageDeleteArgs} args - Arguments to delete one ConstructionSiteImage.
     * @example
     * // Delete one ConstructionSiteImage
     * const ConstructionSiteImage = await prisma.constructionSiteImage.delete({
     *   where: {
     *     // ... filter to delete one ConstructionSiteImage
     *   }
     * })
     * 
     */
    delete<T extends ConstructionSiteImageDeleteArgs>(args: SelectSubset<T, ConstructionSiteImageDeleteArgs<ExtArgs>>): Prisma__ConstructionSiteImageClient<$Result.GetResult<Prisma.$ConstructionSiteImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ConstructionSiteImage.
     * @param {ConstructionSiteImageUpdateArgs} args - Arguments to update one ConstructionSiteImage.
     * @example
     * // Update one ConstructionSiteImage
     * const constructionSiteImage = await prisma.constructionSiteImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConstructionSiteImageUpdateArgs>(args: SelectSubset<T, ConstructionSiteImageUpdateArgs<ExtArgs>>): Prisma__ConstructionSiteImageClient<$Result.GetResult<Prisma.$ConstructionSiteImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ConstructionSiteImages.
     * @param {ConstructionSiteImageDeleteManyArgs} args - Arguments to filter ConstructionSiteImages to delete.
     * @example
     * // Delete a few ConstructionSiteImages
     * const { count } = await prisma.constructionSiteImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConstructionSiteImageDeleteManyArgs>(args?: SelectSubset<T, ConstructionSiteImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConstructionSiteImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConstructionSiteImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ConstructionSiteImages
     * const constructionSiteImage = await prisma.constructionSiteImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConstructionSiteImageUpdateManyArgs>(args: SelectSubset<T, ConstructionSiteImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ConstructionSiteImage.
     * @param {ConstructionSiteImageUpsertArgs} args - Arguments to update or create a ConstructionSiteImage.
     * @example
     * // Update or create a ConstructionSiteImage
     * const constructionSiteImage = await prisma.constructionSiteImage.upsert({
     *   create: {
     *     // ... data to create a ConstructionSiteImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ConstructionSiteImage we want to update
     *   }
     * })
     */
    upsert<T extends ConstructionSiteImageUpsertArgs>(args: SelectSubset<T, ConstructionSiteImageUpsertArgs<ExtArgs>>): Prisma__ConstructionSiteImageClient<$Result.GetResult<Prisma.$ConstructionSiteImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ConstructionSiteImages that matches the filter.
     * @param {ConstructionSiteImageFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const constructionSiteImage = await prisma.constructionSiteImage.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ConstructionSiteImageFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ConstructionSiteImage.
     * @param {ConstructionSiteImageAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const constructionSiteImage = await prisma.constructionSiteImage.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ConstructionSiteImageAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of ConstructionSiteImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConstructionSiteImageCountArgs} args - Arguments to filter ConstructionSiteImages to count.
     * @example
     * // Count the number of ConstructionSiteImages
     * const count = await prisma.constructionSiteImage.count({
     *   where: {
     *     // ... the filter for the ConstructionSiteImages we want to count
     *   }
     * })
    **/
    count<T extends ConstructionSiteImageCountArgs>(
      args?: Subset<T, ConstructionSiteImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConstructionSiteImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ConstructionSiteImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConstructionSiteImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConstructionSiteImageAggregateArgs>(args: Subset<T, ConstructionSiteImageAggregateArgs>): Prisma.PrismaPromise<GetConstructionSiteImageAggregateType<T>>

    /**
     * Group by ConstructionSiteImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConstructionSiteImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConstructionSiteImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConstructionSiteImageGroupByArgs['orderBy'] }
        : { orderBy?: ConstructionSiteImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConstructionSiteImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConstructionSiteImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ConstructionSiteImage model
   */
  readonly fields: ConstructionSiteImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ConstructionSiteImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConstructionSiteImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ConstructionSiteImage model
   */ 
  interface ConstructionSiteImageFieldRefs {
    readonly id: FieldRef<"ConstructionSiteImage", 'String'>
    readonly title: FieldRef<"ConstructionSiteImage", 'String'>
    readonly imagesrc: FieldRef<"ConstructionSiteImage", 'String'>
    readonly location: FieldRef<"ConstructionSiteImage", 'String'>
    readonly date: FieldRef<"ConstructionSiteImage", 'DateTime'>
    readonly category: FieldRef<"ConstructionSiteImage", 'category'>
    readonly projectId: FieldRef<"ConstructionSiteImage", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ConstructionSiteImage findUnique
   */
  export type ConstructionSiteImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConstructionSiteImage
     */
    select?: ConstructionSiteImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConstructionSiteImage
     */
    omit?: ConstructionSiteImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConstructionSiteImageInclude<ExtArgs> | null
    /**
     * Filter, which ConstructionSiteImage to fetch.
     */
    where: ConstructionSiteImageWhereUniqueInput
  }

  /**
   * ConstructionSiteImage findUniqueOrThrow
   */
  export type ConstructionSiteImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConstructionSiteImage
     */
    select?: ConstructionSiteImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConstructionSiteImage
     */
    omit?: ConstructionSiteImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConstructionSiteImageInclude<ExtArgs> | null
    /**
     * Filter, which ConstructionSiteImage to fetch.
     */
    where: ConstructionSiteImageWhereUniqueInput
  }

  /**
   * ConstructionSiteImage findFirst
   */
  export type ConstructionSiteImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConstructionSiteImage
     */
    select?: ConstructionSiteImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConstructionSiteImage
     */
    omit?: ConstructionSiteImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConstructionSiteImageInclude<ExtArgs> | null
    /**
     * Filter, which ConstructionSiteImage to fetch.
     */
    where?: ConstructionSiteImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConstructionSiteImages to fetch.
     */
    orderBy?: ConstructionSiteImageOrderByWithRelationInput | ConstructionSiteImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConstructionSiteImages.
     */
    cursor?: ConstructionSiteImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConstructionSiteImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConstructionSiteImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConstructionSiteImages.
     */
    distinct?: ConstructionSiteImageScalarFieldEnum | ConstructionSiteImageScalarFieldEnum[]
  }

  /**
   * ConstructionSiteImage findFirstOrThrow
   */
  export type ConstructionSiteImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConstructionSiteImage
     */
    select?: ConstructionSiteImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConstructionSiteImage
     */
    omit?: ConstructionSiteImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConstructionSiteImageInclude<ExtArgs> | null
    /**
     * Filter, which ConstructionSiteImage to fetch.
     */
    where?: ConstructionSiteImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConstructionSiteImages to fetch.
     */
    orderBy?: ConstructionSiteImageOrderByWithRelationInput | ConstructionSiteImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConstructionSiteImages.
     */
    cursor?: ConstructionSiteImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConstructionSiteImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConstructionSiteImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConstructionSiteImages.
     */
    distinct?: ConstructionSiteImageScalarFieldEnum | ConstructionSiteImageScalarFieldEnum[]
  }

  /**
   * ConstructionSiteImage findMany
   */
  export type ConstructionSiteImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConstructionSiteImage
     */
    select?: ConstructionSiteImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConstructionSiteImage
     */
    omit?: ConstructionSiteImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConstructionSiteImageInclude<ExtArgs> | null
    /**
     * Filter, which ConstructionSiteImages to fetch.
     */
    where?: ConstructionSiteImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConstructionSiteImages to fetch.
     */
    orderBy?: ConstructionSiteImageOrderByWithRelationInput | ConstructionSiteImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ConstructionSiteImages.
     */
    cursor?: ConstructionSiteImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConstructionSiteImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConstructionSiteImages.
     */
    skip?: number
    distinct?: ConstructionSiteImageScalarFieldEnum | ConstructionSiteImageScalarFieldEnum[]
  }

  /**
   * ConstructionSiteImage create
   */
  export type ConstructionSiteImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConstructionSiteImage
     */
    select?: ConstructionSiteImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConstructionSiteImage
     */
    omit?: ConstructionSiteImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConstructionSiteImageInclude<ExtArgs> | null
    /**
     * The data needed to create a ConstructionSiteImage.
     */
    data: XOR<ConstructionSiteImageCreateInput, ConstructionSiteImageUncheckedCreateInput>
  }

  /**
   * ConstructionSiteImage createMany
   */
  export type ConstructionSiteImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ConstructionSiteImages.
     */
    data: ConstructionSiteImageCreateManyInput | ConstructionSiteImageCreateManyInput[]
  }

  /**
   * ConstructionSiteImage update
   */
  export type ConstructionSiteImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConstructionSiteImage
     */
    select?: ConstructionSiteImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConstructionSiteImage
     */
    omit?: ConstructionSiteImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConstructionSiteImageInclude<ExtArgs> | null
    /**
     * The data needed to update a ConstructionSiteImage.
     */
    data: XOR<ConstructionSiteImageUpdateInput, ConstructionSiteImageUncheckedUpdateInput>
    /**
     * Choose, which ConstructionSiteImage to update.
     */
    where: ConstructionSiteImageWhereUniqueInput
  }

  /**
   * ConstructionSiteImage updateMany
   */
  export type ConstructionSiteImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ConstructionSiteImages.
     */
    data: XOR<ConstructionSiteImageUpdateManyMutationInput, ConstructionSiteImageUncheckedUpdateManyInput>
    /**
     * Filter which ConstructionSiteImages to update
     */
    where?: ConstructionSiteImageWhereInput
    /**
     * Limit how many ConstructionSiteImages to update.
     */
    limit?: number
  }

  /**
   * ConstructionSiteImage upsert
   */
  export type ConstructionSiteImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConstructionSiteImage
     */
    select?: ConstructionSiteImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConstructionSiteImage
     */
    omit?: ConstructionSiteImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConstructionSiteImageInclude<ExtArgs> | null
    /**
     * The filter to search for the ConstructionSiteImage to update in case it exists.
     */
    where: ConstructionSiteImageWhereUniqueInput
    /**
     * In case the ConstructionSiteImage found by the `where` argument doesn't exist, create a new ConstructionSiteImage with this data.
     */
    create: XOR<ConstructionSiteImageCreateInput, ConstructionSiteImageUncheckedCreateInput>
    /**
     * In case the ConstructionSiteImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConstructionSiteImageUpdateInput, ConstructionSiteImageUncheckedUpdateInput>
  }

  /**
   * ConstructionSiteImage delete
   */
  export type ConstructionSiteImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConstructionSiteImage
     */
    select?: ConstructionSiteImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConstructionSiteImage
     */
    omit?: ConstructionSiteImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConstructionSiteImageInclude<ExtArgs> | null
    /**
     * Filter which ConstructionSiteImage to delete.
     */
    where: ConstructionSiteImageWhereUniqueInput
  }

  /**
   * ConstructionSiteImage deleteMany
   */
  export type ConstructionSiteImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConstructionSiteImages to delete
     */
    where?: ConstructionSiteImageWhereInput
    /**
     * Limit how many ConstructionSiteImages to delete.
     */
    limit?: number
  }

  /**
   * ConstructionSiteImage findRaw
   */
  export type ConstructionSiteImageFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ConstructionSiteImage aggregateRaw
   */
  export type ConstructionSiteImageAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ConstructionSiteImage without action
   */
  export type ConstructionSiteImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConstructionSiteImage
     */
    select?: ConstructionSiteImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConstructionSiteImage
     */
    omit?: ConstructionSiteImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConstructionSiteImageInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    projectName: 'projectName',
    clientName: 'clientName',
    location: 'location',
    startDate: 'startDate',
    dueDate: 'dueDate',
    progress: 'progress',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const BudgetScalarFieldEnum: {
    id: 'id',
    total: 'total',
    spent: 'spent',
    projectId: 'projectId'
  };

  export type BudgetScalarFieldEnum = (typeof BudgetScalarFieldEnum)[keyof typeof BudgetScalarFieldEnum]


  export const TeamScalarFieldEnum: {
    id: 'id',
    projectManger: 'projectManger',
    siteManger: 'siteManger',
    civilManger: 'civilManger',
    architecturalLoad: 'architecturalLoad',
    totalWorker: 'totalWorker',
    projectId: 'projectId'
  };

  export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]


  export const UpcomingMilstoneScalarFieldEnum: {
    id: 'id',
    title: 'title',
    date: 'date',
    status: 'status',
    projectId: 'projectId'
  };

  export type UpcomingMilstoneScalarFieldEnum = (typeof UpcomingMilstoneScalarFieldEnum)[keyof typeof UpcomingMilstoneScalarFieldEnum]


  export const CheckListScalarFieldEnum: {
    id: 'id',
    task: 'task',
    assignedTo: 'assignedTo',
    dueData: 'dueData',
    priority: 'priority',
    completed: 'completed',
    projectId: 'projectId'
  };

  export type CheckListScalarFieldEnum = (typeof CheckListScalarFieldEnum)[keyof typeof CheckListScalarFieldEnum]


  export const DocumentsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    date: 'date',
    projectId: 'projectId'
  };

  export type DocumentsScalarFieldEnum = (typeof DocumentsScalarFieldEnum)[keyof typeof DocumentsScalarFieldEnum]


  export const TheIncomingLetterScalarFieldEnum: {
    id: 'id',
    sender: 'sender',
    subject: 'subject',
    priority: 'priority',
    status: 'status',
    projectId: 'projectId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TheIncomingLetterScalarFieldEnum = (typeof TheIncomingLetterScalarFieldEnum)[keyof typeof TheIncomingLetterScalarFieldEnum]


  export const TheOutgoingLetterScalarFieldEnum: {
    id: 'id',
    recipent: 'recipent',
    subject: 'subject',
    status: 'status',
    priority: 'priority',
    createdAt: 'createdAt',
    projectId: 'projectId'
  };

  export type TheOutgoingLetterScalarFieldEnum = (typeof TheOutgoingLetterScalarFieldEnum)[keyof typeof TheOutgoingLetterScalarFieldEnum]


  export const ReportScalarFieldEnum: {
    id: 'id',
    publisher: 'publisher',
    status: 'status',
    uploadedDate: 'uploadedDate',
    lastModified: 'lastModified',
    version: 'version',
    downloadedUrl: 'downloadedUrl',
    reportType: 'reportType',
    projectId: 'projectId'
  };

  export type ReportScalarFieldEnum = (typeof ReportScalarFieldEnum)[keyof typeof ReportScalarFieldEnum]


  export const ConstructionSiteImageScalarFieldEnum: {
    id: 'id',
    title: 'title',
    imagesrc: 'imagesrc',
    location: 'location',
    date: 'date',
    category: 'category',
    projectId: 'projectId'
  };

  export type ConstructionSiteImageScalarFieldEnum = (typeof ConstructionSiteImageScalarFieldEnum)[keyof typeof ConstructionSiteImageScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Status'
   */
  export type EnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status'>
    


  /**
   * Reference to a field of type 'Status[]'
   */
  export type ListEnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status[]'>
    


  /**
   * Reference to a field of type 'Priority'
   */
  export type EnumPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Priority'>
    


  /**
   * Reference to a field of type 'Priority[]'
   */
  export type ListEnumPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Priority[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'IncomingStatus'
   */
  export type EnumIncomingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IncomingStatus'>
    


  /**
   * Reference to a field of type 'IncomingStatus[]'
   */
  export type ListEnumIncomingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IncomingStatus[]'>
    


  /**
   * Reference to a field of type 'OutgoingStatus'
   */
  export type EnumOutgoingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OutgoingStatus'>
    


  /**
   * Reference to a field of type 'OutgoingStatus[]'
   */
  export type ListEnumOutgoingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OutgoingStatus[]'>
    


  /**
   * Reference to a field of type 'reportStatus'
   */
  export type EnumreportStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'reportStatus'>
    


  /**
   * Reference to a field of type 'reportStatus[]'
   */
  export type ListEnumreportStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'reportStatus[]'>
    


  /**
   * Reference to a field of type 'reportType'
   */
  export type EnumreportTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'reportType'>
    


  /**
   * Reference to a field of type 'reportType[]'
   */
  export type ListEnumreportTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'reportType[]'>
    


  /**
   * Reference to a field of type 'category'
   */
  export type EnumcategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'category'>
    


  /**
   * Reference to a field of type 'category[]'
   */
  export type ListEnumcategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'category[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    id?: StringFilter<"Project"> | string
    projectName?: StringFilter<"Project"> | string
    clientName?: StringFilter<"Project"> | string
    location?: StringFilter<"Project"> | string
    startDate?: DateTimeFilter<"Project"> | Date | string
    dueDate?: DateTimeFilter<"Project"> | Date | string
    progress?: IntFilter<"Project"> | number
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    budget?: BudgetListRelationFilter
    team?: TeamListRelationFilter
    upcomingMilstone?: XOR<UpcomingMilstoneNullableScalarRelationFilter, UpcomingMilstoneWhereInput> | null
    checkList?: CheckListListRelationFilter
    documents?: DocumentsListRelationFilter
    theIncomingLetter?: TheIncomingLetterListRelationFilter
    theOutgoingLetter?: TheOutgoingLetterListRelationFilter
    report?: ReportListRelationFilter
    constructionSiteImage?: ConstructionSiteImageListRelationFilter
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    projectName?: SortOrder
    clientName?: SortOrder
    location?: SortOrder
    startDate?: SortOrder
    dueDate?: SortOrder
    progress?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    budget?: BudgetOrderByRelationAggregateInput
    team?: TeamOrderByRelationAggregateInput
    upcomingMilstone?: UpcomingMilstoneOrderByWithRelationInput
    checkList?: CheckListOrderByRelationAggregateInput
    documents?: DocumentsOrderByRelationAggregateInput
    theIncomingLetter?: TheIncomingLetterOrderByRelationAggregateInput
    theOutgoingLetter?: TheOutgoingLetterOrderByRelationAggregateInput
    report?: ReportOrderByRelationAggregateInput
    constructionSiteImage?: ConstructionSiteImageOrderByRelationAggregateInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    projectName?: StringFilter<"Project"> | string
    clientName?: StringFilter<"Project"> | string
    location?: StringFilter<"Project"> | string
    startDate?: DateTimeFilter<"Project"> | Date | string
    dueDate?: DateTimeFilter<"Project"> | Date | string
    progress?: IntFilter<"Project"> | number
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    budget?: BudgetListRelationFilter
    team?: TeamListRelationFilter
    upcomingMilstone?: XOR<UpcomingMilstoneNullableScalarRelationFilter, UpcomingMilstoneWhereInput> | null
    checkList?: CheckListListRelationFilter
    documents?: DocumentsListRelationFilter
    theIncomingLetter?: TheIncomingLetterListRelationFilter
    theOutgoingLetter?: TheOutgoingLetterListRelationFilter
    report?: ReportListRelationFilter
    constructionSiteImage?: ConstructionSiteImageListRelationFilter
  }, "id">

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    projectName?: SortOrder
    clientName?: SortOrder
    location?: SortOrder
    startDate?: SortOrder
    dueDate?: SortOrder
    progress?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _avg?: ProjectAvgOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
    _sum?: ProjectSumOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Project"> | string
    projectName?: StringWithAggregatesFilter<"Project"> | string
    clientName?: StringWithAggregatesFilter<"Project"> | string
    location?: StringWithAggregatesFilter<"Project"> | string
    startDate?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    dueDate?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    progress?: IntWithAggregatesFilter<"Project"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
  }

  export type BudgetWhereInput = {
    AND?: BudgetWhereInput | BudgetWhereInput[]
    OR?: BudgetWhereInput[]
    NOT?: BudgetWhereInput | BudgetWhereInput[]
    id?: StringFilter<"Budget"> | string
    total?: FloatFilter<"Budget"> | number
    spent?: FloatFilter<"Budget"> | number
    projectId?: StringFilter<"Budget"> | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }

  export type BudgetOrderByWithRelationInput = {
    id?: SortOrder
    total?: SortOrder
    spent?: SortOrder
    projectId?: SortOrder
    project?: ProjectOrderByWithRelationInput
  }

  export type BudgetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BudgetWhereInput | BudgetWhereInput[]
    OR?: BudgetWhereInput[]
    NOT?: BudgetWhereInput | BudgetWhereInput[]
    total?: FloatFilter<"Budget"> | number
    spent?: FloatFilter<"Budget"> | number
    projectId?: StringFilter<"Budget"> | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }, "id">

  export type BudgetOrderByWithAggregationInput = {
    id?: SortOrder
    total?: SortOrder
    spent?: SortOrder
    projectId?: SortOrder
    _count?: BudgetCountOrderByAggregateInput
    _avg?: BudgetAvgOrderByAggregateInput
    _max?: BudgetMaxOrderByAggregateInput
    _min?: BudgetMinOrderByAggregateInput
    _sum?: BudgetSumOrderByAggregateInput
  }

  export type BudgetScalarWhereWithAggregatesInput = {
    AND?: BudgetScalarWhereWithAggregatesInput | BudgetScalarWhereWithAggregatesInput[]
    OR?: BudgetScalarWhereWithAggregatesInput[]
    NOT?: BudgetScalarWhereWithAggregatesInput | BudgetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Budget"> | string
    total?: FloatWithAggregatesFilter<"Budget"> | number
    spent?: FloatWithAggregatesFilter<"Budget"> | number
    projectId?: StringWithAggregatesFilter<"Budget"> | string
  }

  export type TeamWhereInput = {
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    id?: StringFilter<"Team"> | string
    projectManger?: StringFilter<"Team"> | string
    siteManger?: StringFilter<"Team"> | string
    civilManger?: StringFilter<"Team"> | string
    architecturalLoad?: StringFilter<"Team"> | string
    totalWorker?: IntFilter<"Team"> | number
    projectId?: StringFilter<"Team"> | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }

  export type TeamOrderByWithRelationInput = {
    id?: SortOrder
    projectManger?: SortOrder
    siteManger?: SortOrder
    civilManger?: SortOrder
    architecturalLoad?: SortOrder
    totalWorker?: SortOrder
    projectId?: SortOrder
    project?: ProjectOrderByWithRelationInput
  }

  export type TeamWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    projectManger?: StringFilter<"Team"> | string
    siteManger?: StringFilter<"Team"> | string
    civilManger?: StringFilter<"Team"> | string
    architecturalLoad?: StringFilter<"Team"> | string
    totalWorker?: IntFilter<"Team"> | number
    projectId?: StringFilter<"Team"> | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }, "id">

  export type TeamOrderByWithAggregationInput = {
    id?: SortOrder
    projectManger?: SortOrder
    siteManger?: SortOrder
    civilManger?: SortOrder
    architecturalLoad?: SortOrder
    totalWorker?: SortOrder
    projectId?: SortOrder
    _count?: TeamCountOrderByAggregateInput
    _avg?: TeamAvgOrderByAggregateInput
    _max?: TeamMaxOrderByAggregateInput
    _min?: TeamMinOrderByAggregateInput
    _sum?: TeamSumOrderByAggregateInput
  }

  export type TeamScalarWhereWithAggregatesInput = {
    AND?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    OR?: TeamScalarWhereWithAggregatesInput[]
    NOT?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Team"> | string
    projectManger?: StringWithAggregatesFilter<"Team"> | string
    siteManger?: StringWithAggregatesFilter<"Team"> | string
    civilManger?: StringWithAggregatesFilter<"Team"> | string
    architecturalLoad?: StringWithAggregatesFilter<"Team"> | string
    totalWorker?: IntWithAggregatesFilter<"Team"> | number
    projectId?: StringWithAggregatesFilter<"Team"> | string
  }

  export type UpcomingMilstoneWhereInput = {
    AND?: UpcomingMilstoneWhereInput | UpcomingMilstoneWhereInput[]
    OR?: UpcomingMilstoneWhereInput[]
    NOT?: UpcomingMilstoneWhereInput | UpcomingMilstoneWhereInput[]
    id?: StringFilter<"UpcomingMilstone"> | string
    title?: StringFilter<"UpcomingMilstone"> | string
    date?: DateTimeFilter<"UpcomingMilstone"> | Date | string
    status?: EnumStatusFilter<"UpcomingMilstone"> | $Enums.Status
    projectId?: StringFilter<"UpcomingMilstone"> | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }

  export type UpcomingMilstoneOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    date?: SortOrder
    status?: SortOrder
    projectId?: SortOrder
    project?: ProjectOrderByWithRelationInput
  }

  export type UpcomingMilstoneWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    projectId?: string
    AND?: UpcomingMilstoneWhereInput | UpcomingMilstoneWhereInput[]
    OR?: UpcomingMilstoneWhereInput[]
    NOT?: UpcomingMilstoneWhereInput | UpcomingMilstoneWhereInput[]
    title?: StringFilter<"UpcomingMilstone"> | string
    date?: DateTimeFilter<"UpcomingMilstone"> | Date | string
    status?: EnumStatusFilter<"UpcomingMilstone"> | $Enums.Status
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }, "id" | "projectId">

  export type UpcomingMilstoneOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    date?: SortOrder
    status?: SortOrder
    projectId?: SortOrder
    _count?: UpcomingMilstoneCountOrderByAggregateInput
    _max?: UpcomingMilstoneMaxOrderByAggregateInput
    _min?: UpcomingMilstoneMinOrderByAggregateInput
  }

  export type UpcomingMilstoneScalarWhereWithAggregatesInput = {
    AND?: UpcomingMilstoneScalarWhereWithAggregatesInput | UpcomingMilstoneScalarWhereWithAggregatesInput[]
    OR?: UpcomingMilstoneScalarWhereWithAggregatesInput[]
    NOT?: UpcomingMilstoneScalarWhereWithAggregatesInput | UpcomingMilstoneScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UpcomingMilstone"> | string
    title?: StringWithAggregatesFilter<"UpcomingMilstone"> | string
    date?: DateTimeWithAggregatesFilter<"UpcomingMilstone"> | Date | string
    status?: EnumStatusWithAggregatesFilter<"UpcomingMilstone"> | $Enums.Status
    projectId?: StringWithAggregatesFilter<"UpcomingMilstone"> | string
  }

  export type CheckListWhereInput = {
    AND?: CheckListWhereInput | CheckListWhereInput[]
    OR?: CheckListWhereInput[]
    NOT?: CheckListWhereInput | CheckListWhereInput[]
    id?: StringFilter<"CheckList"> | string
    task?: EnumStatusFilter<"CheckList"> | $Enums.Status
    assignedTo?: StringFilter<"CheckList"> | string
    dueData?: DateTimeFilter<"CheckList"> | Date | string
    priority?: EnumPriorityFilter<"CheckList"> | $Enums.Priority
    completed?: BoolFilter<"CheckList"> | boolean
    projectId?: StringFilter<"CheckList"> | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }

  export type CheckListOrderByWithRelationInput = {
    id?: SortOrder
    task?: SortOrder
    assignedTo?: SortOrder
    dueData?: SortOrder
    priority?: SortOrder
    completed?: SortOrder
    projectId?: SortOrder
    project?: ProjectOrderByWithRelationInput
  }

  export type CheckListWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CheckListWhereInput | CheckListWhereInput[]
    OR?: CheckListWhereInput[]
    NOT?: CheckListWhereInput | CheckListWhereInput[]
    task?: EnumStatusFilter<"CheckList"> | $Enums.Status
    assignedTo?: StringFilter<"CheckList"> | string
    dueData?: DateTimeFilter<"CheckList"> | Date | string
    priority?: EnumPriorityFilter<"CheckList"> | $Enums.Priority
    completed?: BoolFilter<"CheckList"> | boolean
    projectId?: StringFilter<"CheckList"> | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }, "id">

  export type CheckListOrderByWithAggregationInput = {
    id?: SortOrder
    task?: SortOrder
    assignedTo?: SortOrder
    dueData?: SortOrder
    priority?: SortOrder
    completed?: SortOrder
    projectId?: SortOrder
    _count?: CheckListCountOrderByAggregateInput
    _max?: CheckListMaxOrderByAggregateInput
    _min?: CheckListMinOrderByAggregateInput
  }

  export type CheckListScalarWhereWithAggregatesInput = {
    AND?: CheckListScalarWhereWithAggregatesInput | CheckListScalarWhereWithAggregatesInput[]
    OR?: CheckListScalarWhereWithAggregatesInput[]
    NOT?: CheckListScalarWhereWithAggregatesInput | CheckListScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CheckList"> | string
    task?: EnumStatusWithAggregatesFilter<"CheckList"> | $Enums.Status
    assignedTo?: StringWithAggregatesFilter<"CheckList"> | string
    dueData?: DateTimeWithAggregatesFilter<"CheckList"> | Date | string
    priority?: EnumPriorityWithAggregatesFilter<"CheckList"> | $Enums.Priority
    completed?: BoolWithAggregatesFilter<"CheckList"> | boolean
    projectId?: StringWithAggregatesFilter<"CheckList"> | string
  }

  export type DocumentsWhereInput = {
    AND?: DocumentsWhereInput | DocumentsWhereInput[]
    OR?: DocumentsWhereInput[]
    NOT?: DocumentsWhereInput | DocumentsWhereInput[]
    id?: StringFilter<"Documents"> | string
    name?: StringFilter<"Documents"> | string
    date?: DateTimeFilter<"Documents"> | Date | string
    projectId?: StringFilter<"Documents"> | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }

  export type DocumentsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    projectId?: SortOrder
    project?: ProjectOrderByWithRelationInput
  }

  export type DocumentsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DocumentsWhereInput | DocumentsWhereInput[]
    OR?: DocumentsWhereInput[]
    NOT?: DocumentsWhereInput | DocumentsWhereInput[]
    name?: StringFilter<"Documents"> | string
    date?: DateTimeFilter<"Documents"> | Date | string
    projectId?: StringFilter<"Documents"> | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }, "id">

  export type DocumentsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    projectId?: SortOrder
    _count?: DocumentsCountOrderByAggregateInput
    _max?: DocumentsMaxOrderByAggregateInput
    _min?: DocumentsMinOrderByAggregateInput
  }

  export type DocumentsScalarWhereWithAggregatesInput = {
    AND?: DocumentsScalarWhereWithAggregatesInput | DocumentsScalarWhereWithAggregatesInput[]
    OR?: DocumentsScalarWhereWithAggregatesInput[]
    NOT?: DocumentsScalarWhereWithAggregatesInput | DocumentsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Documents"> | string
    name?: StringWithAggregatesFilter<"Documents"> | string
    date?: DateTimeWithAggregatesFilter<"Documents"> | Date | string
    projectId?: StringWithAggregatesFilter<"Documents"> | string
  }

  export type TheIncomingLetterWhereInput = {
    AND?: TheIncomingLetterWhereInput | TheIncomingLetterWhereInput[]
    OR?: TheIncomingLetterWhereInput[]
    NOT?: TheIncomingLetterWhereInput | TheIncomingLetterWhereInput[]
    id?: StringFilter<"TheIncomingLetter"> | string
    sender?: StringFilter<"TheIncomingLetter"> | string
    subject?: StringFilter<"TheIncomingLetter"> | string
    priority?: EnumPriorityFilter<"TheIncomingLetter"> | $Enums.Priority
    status?: EnumIncomingStatusFilter<"TheIncomingLetter"> | $Enums.IncomingStatus
    projectId?: StringFilter<"TheIncomingLetter"> | string
    createdAt?: DateTimeFilter<"TheIncomingLetter"> | Date | string
    updatedAt?: DateTimeFilter<"TheIncomingLetter"> | Date | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }

  export type TheIncomingLetterOrderByWithRelationInput = {
    id?: SortOrder
    sender?: SortOrder
    subject?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    project?: ProjectOrderByWithRelationInput
  }

  export type TheIncomingLetterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TheIncomingLetterWhereInput | TheIncomingLetterWhereInput[]
    OR?: TheIncomingLetterWhereInput[]
    NOT?: TheIncomingLetterWhereInput | TheIncomingLetterWhereInput[]
    sender?: StringFilter<"TheIncomingLetter"> | string
    subject?: StringFilter<"TheIncomingLetter"> | string
    priority?: EnumPriorityFilter<"TheIncomingLetter"> | $Enums.Priority
    status?: EnumIncomingStatusFilter<"TheIncomingLetter"> | $Enums.IncomingStatus
    projectId?: StringFilter<"TheIncomingLetter"> | string
    createdAt?: DateTimeFilter<"TheIncomingLetter"> | Date | string
    updatedAt?: DateTimeFilter<"TheIncomingLetter"> | Date | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }, "id">

  export type TheIncomingLetterOrderByWithAggregationInput = {
    id?: SortOrder
    sender?: SortOrder
    subject?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TheIncomingLetterCountOrderByAggregateInput
    _max?: TheIncomingLetterMaxOrderByAggregateInput
    _min?: TheIncomingLetterMinOrderByAggregateInput
  }

  export type TheIncomingLetterScalarWhereWithAggregatesInput = {
    AND?: TheIncomingLetterScalarWhereWithAggregatesInput | TheIncomingLetterScalarWhereWithAggregatesInput[]
    OR?: TheIncomingLetterScalarWhereWithAggregatesInput[]
    NOT?: TheIncomingLetterScalarWhereWithAggregatesInput | TheIncomingLetterScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TheIncomingLetter"> | string
    sender?: StringWithAggregatesFilter<"TheIncomingLetter"> | string
    subject?: StringWithAggregatesFilter<"TheIncomingLetter"> | string
    priority?: EnumPriorityWithAggregatesFilter<"TheIncomingLetter"> | $Enums.Priority
    status?: EnumIncomingStatusWithAggregatesFilter<"TheIncomingLetter"> | $Enums.IncomingStatus
    projectId?: StringWithAggregatesFilter<"TheIncomingLetter"> | string
    createdAt?: DateTimeWithAggregatesFilter<"TheIncomingLetter"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TheIncomingLetter"> | Date | string
  }

  export type TheOutgoingLetterWhereInput = {
    AND?: TheOutgoingLetterWhereInput | TheOutgoingLetterWhereInput[]
    OR?: TheOutgoingLetterWhereInput[]
    NOT?: TheOutgoingLetterWhereInput | TheOutgoingLetterWhereInput[]
    id?: StringFilter<"TheOutgoingLetter"> | string
    recipent?: StringFilter<"TheOutgoingLetter"> | string
    subject?: StringFilter<"TheOutgoingLetter"> | string
    status?: EnumOutgoingStatusFilter<"TheOutgoingLetter"> | $Enums.OutgoingStatus
    priority?: EnumPriorityFilter<"TheOutgoingLetter"> | $Enums.Priority
    createdAt?: DateTimeFilter<"TheOutgoingLetter"> | Date | string
    projectId?: StringFilter<"TheOutgoingLetter"> | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }

  export type TheOutgoingLetterOrderByWithRelationInput = {
    id?: SortOrder
    recipent?: SortOrder
    subject?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    projectId?: SortOrder
    project?: ProjectOrderByWithRelationInput
  }

  export type TheOutgoingLetterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TheOutgoingLetterWhereInput | TheOutgoingLetterWhereInput[]
    OR?: TheOutgoingLetterWhereInput[]
    NOT?: TheOutgoingLetterWhereInput | TheOutgoingLetterWhereInput[]
    recipent?: StringFilter<"TheOutgoingLetter"> | string
    subject?: StringFilter<"TheOutgoingLetter"> | string
    status?: EnumOutgoingStatusFilter<"TheOutgoingLetter"> | $Enums.OutgoingStatus
    priority?: EnumPriorityFilter<"TheOutgoingLetter"> | $Enums.Priority
    createdAt?: DateTimeFilter<"TheOutgoingLetter"> | Date | string
    projectId?: StringFilter<"TheOutgoingLetter"> | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }, "id">

  export type TheOutgoingLetterOrderByWithAggregationInput = {
    id?: SortOrder
    recipent?: SortOrder
    subject?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    projectId?: SortOrder
    _count?: TheOutgoingLetterCountOrderByAggregateInput
    _max?: TheOutgoingLetterMaxOrderByAggregateInput
    _min?: TheOutgoingLetterMinOrderByAggregateInput
  }

  export type TheOutgoingLetterScalarWhereWithAggregatesInput = {
    AND?: TheOutgoingLetterScalarWhereWithAggregatesInput | TheOutgoingLetterScalarWhereWithAggregatesInput[]
    OR?: TheOutgoingLetterScalarWhereWithAggregatesInput[]
    NOT?: TheOutgoingLetterScalarWhereWithAggregatesInput | TheOutgoingLetterScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TheOutgoingLetter"> | string
    recipent?: StringWithAggregatesFilter<"TheOutgoingLetter"> | string
    subject?: StringWithAggregatesFilter<"TheOutgoingLetter"> | string
    status?: EnumOutgoingStatusWithAggregatesFilter<"TheOutgoingLetter"> | $Enums.OutgoingStatus
    priority?: EnumPriorityWithAggregatesFilter<"TheOutgoingLetter"> | $Enums.Priority
    createdAt?: DateTimeWithAggregatesFilter<"TheOutgoingLetter"> | Date | string
    projectId?: StringWithAggregatesFilter<"TheOutgoingLetter"> | string
  }

  export type ReportWhereInput = {
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    id?: StringFilter<"Report"> | string
    publisher?: StringFilter<"Report"> | string
    status?: EnumreportStatusFilter<"Report"> | $Enums.reportStatus
    uploadedDate?: DateTimeFilter<"Report"> | Date | string
    lastModified?: DateTimeFilter<"Report"> | Date | string
    version?: StringFilter<"Report"> | string
    downloadedUrl?: StringFilter<"Report"> | string
    reportType?: EnumreportTypeFilter<"Report"> | $Enums.reportType
    projectId?: StringFilter<"Report"> | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }

  export type ReportOrderByWithRelationInput = {
    id?: SortOrder
    publisher?: SortOrder
    status?: SortOrder
    uploadedDate?: SortOrder
    lastModified?: SortOrder
    version?: SortOrder
    downloadedUrl?: SortOrder
    reportType?: SortOrder
    projectId?: SortOrder
    project?: ProjectOrderByWithRelationInput
  }

  export type ReportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    publisher?: StringFilter<"Report"> | string
    status?: EnumreportStatusFilter<"Report"> | $Enums.reportStatus
    uploadedDate?: DateTimeFilter<"Report"> | Date | string
    lastModified?: DateTimeFilter<"Report"> | Date | string
    version?: StringFilter<"Report"> | string
    downloadedUrl?: StringFilter<"Report"> | string
    reportType?: EnumreportTypeFilter<"Report"> | $Enums.reportType
    projectId?: StringFilter<"Report"> | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }, "id">

  export type ReportOrderByWithAggregationInput = {
    id?: SortOrder
    publisher?: SortOrder
    status?: SortOrder
    uploadedDate?: SortOrder
    lastModified?: SortOrder
    version?: SortOrder
    downloadedUrl?: SortOrder
    reportType?: SortOrder
    projectId?: SortOrder
    _count?: ReportCountOrderByAggregateInput
    _max?: ReportMaxOrderByAggregateInput
    _min?: ReportMinOrderByAggregateInput
  }

  export type ReportScalarWhereWithAggregatesInput = {
    AND?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    OR?: ReportScalarWhereWithAggregatesInput[]
    NOT?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Report"> | string
    publisher?: StringWithAggregatesFilter<"Report"> | string
    status?: EnumreportStatusWithAggregatesFilter<"Report"> | $Enums.reportStatus
    uploadedDate?: DateTimeWithAggregatesFilter<"Report"> | Date | string
    lastModified?: DateTimeWithAggregatesFilter<"Report"> | Date | string
    version?: StringWithAggregatesFilter<"Report"> | string
    downloadedUrl?: StringWithAggregatesFilter<"Report"> | string
    reportType?: EnumreportTypeWithAggregatesFilter<"Report"> | $Enums.reportType
    projectId?: StringWithAggregatesFilter<"Report"> | string
  }

  export type ConstructionSiteImageWhereInput = {
    AND?: ConstructionSiteImageWhereInput | ConstructionSiteImageWhereInput[]
    OR?: ConstructionSiteImageWhereInput[]
    NOT?: ConstructionSiteImageWhereInput | ConstructionSiteImageWhereInput[]
    id?: StringFilter<"ConstructionSiteImage"> | string
    title?: StringFilter<"ConstructionSiteImage"> | string
    imagesrc?: StringFilter<"ConstructionSiteImage"> | string
    location?: StringFilter<"ConstructionSiteImage"> | string
    date?: DateTimeFilter<"ConstructionSiteImage"> | Date | string
    category?: EnumcategoryFilter<"ConstructionSiteImage"> | $Enums.category
    projectId?: StringFilter<"ConstructionSiteImage"> | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }

  export type ConstructionSiteImageOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    imagesrc?: SortOrder
    location?: SortOrder
    date?: SortOrder
    category?: SortOrder
    projectId?: SortOrder
    project?: ProjectOrderByWithRelationInput
  }

  export type ConstructionSiteImageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ConstructionSiteImageWhereInput | ConstructionSiteImageWhereInput[]
    OR?: ConstructionSiteImageWhereInput[]
    NOT?: ConstructionSiteImageWhereInput | ConstructionSiteImageWhereInput[]
    title?: StringFilter<"ConstructionSiteImage"> | string
    imagesrc?: StringFilter<"ConstructionSiteImage"> | string
    location?: StringFilter<"ConstructionSiteImage"> | string
    date?: DateTimeFilter<"ConstructionSiteImage"> | Date | string
    category?: EnumcategoryFilter<"ConstructionSiteImage"> | $Enums.category
    projectId?: StringFilter<"ConstructionSiteImage"> | string
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }, "id">

  export type ConstructionSiteImageOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    imagesrc?: SortOrder
    location?: SortOrder
    date?: SortOrder
    category?: SortOrder
    projectId?: SortOrder
    _count?: ConstructionSiteImageCountOrderByAggregateInput
    _max?: ConstructionSiteImageMaxOrderByAggregateInput
    _min?: ConstructionSiteImageMinOrderByAggregateInput
  }

  export type ConstructionSiteImageScalarWhereWithAggregatesInput = {
    AND?: ConstructionSiteImageScalarWhereWithAggregatesInput | ConstructionSiteImageScalarWhereWithAggregatesInput[]
    OR?: ConstructionSiteImageScalarWhereWithAggregatesInput[]
    NOT?: ConstructionSiteImageScalarWhereWithAggregatesInput | ConstructionSiteImageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ConstructionSiteImage"> | string
    title?: StringWithAggregatesFilter<"ConstructionSiteImage"> | string
    imagesrc?: StringWithAggregatesFilter<"ConstructionSiteImage"> | string
    location?: StringWithAggregatesFilter<"ConstructionSiteImage"> | string
    date?: DateTimeWithAggregatesFilter<"ConstructionSiteImage"> | Date | string
    category?: EnumcategoryWithAggregatesFilter<"ConstructionSiteImage"> | $Enums.category
    projectId?: StringWithAggregatesFilter<"ConstructionSiteImage"> | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectCreateInput = {
    id?: string
    projectName: string
    clientName: string
    location: string
    startDate?: Date | string
    dueDate?: Date | string
    progress: number
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: BudgetCreateNestedManyWithoutProjectInput
    team?: TeamCreateNestedManyWithoutProjectInput
    upcomingMilstone?: UpcomingMilstoneCreateNestedOneWithoutProjectInput
    checkList?: CheckListCreateNestedManyWithoutProjectInput
    documents?: DocumentsCreateNestedManyWithoutProjectInput
    theIncomingLetter?: TheIncomingLetterCreateNestedManyWithoutProjectInput
    theOutgoingLetter?: TheOutgoingLetterCreateNestedManyWithoutProjectInput
    report?: ReportCreateNestedManyWithoutProjectInput
    constructionSiteImage?: ConstructionSiteImageCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: string
    projectName: string
    clientName: string
    location: string
    startDate?: Date | string
    dueDate?: Date | string
    progress: number
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: BudgetUncheckedCreateNestedManyWithoutProjectInput
    team?: TeamUncheckedCreateNestedManyWithoutProjectInput
    upcomingMilstone?: UpcomingMilstoneUncheckedCreateNestedOneWithoutProjectInput
    checkList?: CheckListUncheckedCreateNestedManyWithoutProjectInput
    documents?: DocumentsUncheckedCreateNestedManyWithoutProjectInput
    theIncomingLetter?: TheIncomingLetterUncheckedCreateNestedManyWithoutProjectInput
    theOutgoingLetter?: TheOutgoingLetterUncheckedCreateNestedManyWithoutProjectInput
    report?: ReportUncheckedCreateNestedManyWithoutProjectInput
    constructionSiteImage?: ConstructionSiteImageUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    projectName?: StringFieldUpdateOperationsInput | string
    clientName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: BudgetUpdateManyWithoutProjectNestedInput
    team?: TeamUpdateManyWithoutProjectNestedInput
    upcomingMilstone?: UpcomingMilstoneUpdateOneWithoutProjectNestedInput
    checkList?: CheckListUpdateManyWithoutProjectNestedInput
    documents?: DocumentsUpdateManyWithoutProjectNestedInput
    theIncomingLetter?: TheIncomingLetterUpdateManyWithoutProjectNestedInput
    theOutgoingLetter?: TheOutgoingLetterUpdateManyWithoutProjectNestedInput
    report?: ReportUpdateManyWithoutProjectNestedInput
    constructionSiteImage?: ConstructionSiteImageUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    projectName?: StringFieldUpdateOperationsInput | string
    clientName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: BudgetUncheckedUpdateManyWithoutProjectNestedInput
    team?: TeamUncheckedUpdateManyWithoutProjectNestedInput
    upcomingMilstone?: UpcomingMilstoneUncheckedUpdateOneWithoutProjectNestedInput
    checkList?: CheckListUncheckedUpdateManyWithoutProjectNestedInput
    documents?: DocumentsUncheckedUpdateManyWithoutProjectNestedInput
    theIncomingLetter?: TheIncomingLetterUncheckedUpdateManyWithoutProjectNestedInput
    theOutgoingLetter?: TheOutgoingLetterUncheckedUpdateManyWithoutProjectNestedInput
    report?: ReportUncheckedUpdateManyWithoutProjectNestedInput
    constructionSiteImage?: ConstructionSiteImageUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    id?: string
    projectName: string
    clientName: string
    location: string
    startDate?: Date | string
    dueDate?: Date | string
    progress: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectUpdateManyMutationInput = {
    projectName?: StringFieldUpdateOperationsInput | string
    clientName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUncheckedUpdateManyInput = {
    projectName?: StringFieldUpdateOperationsInput | string
    clientName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BudgetCreateInput = {
    id?: string
    total: number
    spent: number
    project: ProjectCreateNestedOneWithoutBudgetInput
  }

  export type BudgetUncheckedCreateInput = {
    id?: string
    total: number
    spent: number
    projectId: string
  }

  export type BudgetUpdateInput = {
    total?: FloatFieldUpdateOperationsInput | number
    spent?: FloatFieldUpdateOperationsInput | number
    project?: ProjectUpdateOneRequiredWithoutBudgetNestedInput
  }

  export type BudgetUncheckedUpdateInput = {
    total?: FloatFieldUpdateOperationsInput | number
    spent?: FloatFieldUpdateOperationsInput | number
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type BudgetCreateManyInput = {
    id?: string
    total: number
    spent: number
    projectId: string
  }

  export type BudgetUpdateManyMutationInput = {
    total?: FloatFieldUpdateOperationsInput | number
    spent?: FloatFieldUpdateOperationsInput | number
  }

  export type BudgetUncheckedUpdateManyInput = {
    total?: FloatFieldUpdateOperationsInput | number
    spent?: FloatFieldUpdateOperationsInput | number
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type TeamCreateInput = {
    id?: string
    projectManger: string
    siteManger: string
    civilManger: string
    architecturalLoad: string
    totalWorker: number
    project: ProjectCreateNestedOneWithoutTeamInput
  }

  export type TeamUncheckedCreateInput = {
    id?: string
    projectManger: string
    siteManger: string
    civilManger: string
    architecturalLoad: string
    totalWorker: number
    projectId: string
  }

  export type TeamUpdateInput = {
    projectManger?: StringFieldUpdateOperationsInput | string
    siteManger?: StringFieldUpdateOperationsInput | string
    civilManger?: StringFieldUpdateOperationsInput | string
    architecturalLoad?: StringFieldUpdateOperationsInput | string
    totalWorker?: IntFieldUpdateOperationsInput | number
    project?: ProjectUpdateOneRequiredWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateInput = {
    projectManger?: StringFieldUpdateOperationsInput | string
    siteManger?: StringFieldUpdateOperationsInput | string
    civilManger?: StringFieldUpdateOperationsInput | string
    architecturalLoad?: StringFieldUpdateOperationsInput | string
    totalWorker?: IntFieldUpdateOperationsInput | number
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type TeamCreateManyInput = {
    id?: string
    projectManger: string
    siteManger: string
    civilManger: string
    architecturalLoad: string
    totalWorker: number
    projectId: string
  }

  export type TeamUpdateManyMutationInput = {
    projectManger?: StringFieldUpdateOperationsInput | string
    siteManger?: StringFieldUpdateOperationsInput | string
    civilManger?: StringFieldUpdateOperationsInput | string
    architecturalLoad?: StringFieldUpdateOperationsInput | string
    totalWorker?: IntFieldUpdateOperationsInput | number
  }

  export type TeamUncheckedUpdateManyInput = {
    projectManger?: StringFieldUpdateOperationsInput | string
    siteManger?: StringFieldUpdateOperationsInput | string
    civilManger?: StringFieldUpdateOperationsInput | string
    architecturalLoad?: StringFieldUpdateOperationsInput | string
    totalWorker?: IntFieldUpdateOperationsInput | number
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type UpcomingMilstoneCreateInput = {
    id?: string
    title: string
    date?: Date | string
    status: $Enums.Status
    project: ProjectCreateNestedOneWithoutUpcomingMilstoneInput
  }

  export type UpcomingMilstoneUncheckedCreateInput = {
    id?: string
    title: string
    date?: Date | string
    status: $Enums.Status
    projectId: string
  }

  export type UpcomingMilstoneUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    project?: ProjectUpdateOneRequiredWithoutUpcomingMilstoneNestedInput
  }

  export type UpcomingMilstoneUncheckedUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type UpcomingMilstoneCreateManyInput = {
    id?: string
    title: string
    date?: Date | string
    status: $Enums.Status
    projectId: string
  }

  export type UpcomingMilstoneUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }

  export type UpcomingMilstoneUncheckedUpdateManyInput = {
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type CheckListCreateInput = {
    id?: string
    task: $Enums.Status
    assignedTo: string
    dueData?: Date | string
    priority: $Enums.Priority
    completed: boolean
    project: ProjectCreateNestedOneWithoutCheckListInput
  }

  export type CheckListUncheckedCreateInput = {
    id?: string
    task: $Enums.Status
    assignedTo: string
    dueData?: Date | string
    priority: $Enums.Priority
    completed: boolean
    projectId: string
  }

  export type CheckListUpdateInput = {
    task?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    assignedTo?: StringFieldUpdateOperationsInput | string
    dueData?: DateTimeFieldUpdateOperationsInput | Date | string
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    completed?: BoolFieldUpdateOperationsInput | boolean
    project?: ProjectUpdateOneRequiredWithoutCheckListNestedInput
  }

  export type CheckListUncheckedUpdateInput = {
    task?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    assignedTo?: StringFieldUpdateOperationsInput | string
    dueData?: DateTimeFieldUpdateOperationsInput | Date | string
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    completed?: BoolFieldUpdateOperationsInput | boolean
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type CheckListCreateManyInput = {
    id?: string
    task: $Enums.Status
    assignedTo: string
    dueData?: Date | string
    priority: $Enums.Priority
    completed: boolean
    projectId: string
  }

  export type CheckListUpdateManyMutationInput = {
    task?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    assignedTo?: StringFieldUpdateOperationsInput | string
    dueData?: DateTimeFieldUpdateOperationsInput | Date | string
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    completed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CheckListUncheckedUpdateManyInput = {
    task?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    assignedTo?: StringFieldUpdateOperationsInput | string
    dueData?: DateTimeFieldUpdateOperationsInput | Date | string
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    completed?: BoolFieldUpdateOperationsInput | boolean
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentsCreateInput = {
    id?: string
    name: string
    date?: Date | string
    project: ProjectCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentsUncheckedCreateInput = {
    id?: string
    name: string
    date?: Date | string
    projectId: string
  }

  export type DocumentsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type DocumentsUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentsCreateManyInput = {
    id?: string
    name: string
    date?: Date | string
    projectId: string
  }

  export type DocumentsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentsUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type TheIncomingLetterCreateInput = {
    id?: string
    sender: string
    subject: string
    priority: $Enums.Priority
    status: $Enums.IncomingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutTheIncomingLetterInput
  }

  export type TheIncomingLetterUncheckedCreateInput = {
    id?: string
    sender: string
    subject: string
    priority: $Enums.Priority
    status: $Enums.IncomingStatus
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TheIncomingLetterUpdateInput = {
    sender?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumIncomingStatusFieldUpdateOperationsInput | $Enums.IncomingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutTheIncomingLetterNestedInput
  }

  export type TheIncomingLetterUncheckedUpdateInput = {
    sender?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumIncomingStatusFieldUpdateOperationsInput | $Enums.IncomingStatus
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TheIncomingLetterCreateManyInput = {
    id?: string
    sender: string
    subject: string
    priority: $Enums.Priority
    status: $Enums.IncomingStatus
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TheIncomingLetterUpdateManyMutationInput = {
    sender?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumIncomingStatusFieldUpdateOperationsInput | $Enums.IncomingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TheIncomingLetterUncheckedUpdateManyInput = {
    sender?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumIncomingStatusFieldUpdateOperationsInput | $Enums.IncomingStatus
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TheOutgoingLetterCreateInput = {
    id?: string
    recipent: string
    subject: string
    status: $Enums.OutgoingStatus
    priority: $Enums.Priority
    createdAt?: Date | string
    project: ProjectCreateNestedOneWithoutTheOutgoingLetterInput
  }

  export type TheOutgoingLetterUncheckedCreateInput = {
    id?: string
    recipent: string
    subject: string
    status: $Enums.OutgoingStatus
    priority: $Enums.Priority
    createdAt?: Date | string
    projectId: string
  }

  export type TheOutgoingLetterUpdateInput = {
    recipent?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    status?: EnumOutgoingStatusFieldUpdateOperationsInput | $Enums.OutgoingStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutTheOutgoingLetterNestedInput
  }

  export type TheOutgoingLetterUncheckedUpdateInput = {
    recipent?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    status?: EnumOutgoingStatusFieldUpdateOperationsInput | $Enums.OutgoingStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type TheOutgoingLetterCreateManyInput = {
    id?: string
    recipent: string
    subject: string
    status: $Enums.OutgoingStatus
    priority: $Enums.Priority
    createdAt?: Date | string
    projectId: string
  }

  export type TheOutgoingLetterUpdateManyMutationInput = {
    recipent?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    status?: EnumOutgoingStatusFieldUpdateOperationsInput | $Enums.OutgoingStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TheOutgoingLetterUncheckedUpdateManyInput = {
    recipent?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    status?: EnumOutgoingStatusFieldUpdateOperationsInput | $Enums.OutgoingStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type ReportCreateInput = {
    id?: string
    publisher: string
    status: $Enums.reportStatus
    uploadedDate?: Date | string
    lastModified?: Date | string
    version: string
    downloadedUrl: string
    reportType: $Enums.reportType
    project: ProjectCreateNestedOneWithoutReportInput
  }

  export type ReportUncheckedCreateInput = {
    id?: string
    publisher: string
    status: $Enums.reportStatus
    uploadedDate?: Date | string
    lastModified?: Date | string
    version: string
    downloadedUrl: string
    reportType: $Enums.reportType
    projectId: string
  }

  export type ReportUpdateInput = {
    publisher?: StringFieldUpdateOperationsInput | string
    status?: EnumreportStatusFieldUpdateOperationsInput | $Enums.reportStatus
    uploadedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: StringFieldUpdateOperationsInput | string
    downloadedUrl?: StringFieldUpdateOperationsInput | string
    reportType?: EnumreportTypeFieldUpdateOperationsInput | $Enums.reportType
    project?: ProjectUpdateOneRequiredWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateInput = {
    publisher?: StringFieldUpdateOperationsInput | string
    status?: EnumreportStatusFieldUpdateOperationsInput | $Enums.reportStatus
    uploadedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: StringFieldUpdateOperationsInput | string
    downloadedUrl?: StringFieldUpdateOperationsInput | string
    reportType?: EnumreportTypeFieldUpdateOperationsInput | $Enums.reportType
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type ReportCreateManyInput = {
    id?: string
    publisher: string
    status: $Enums.reportStatus
    uploadedDate?: Date | string
    lastModified?: Date | string
    version: string
    downloadedUrl: string
    reportType: $Enums.reportType
    projectId: string
  }

  export type ReportUpdateManyMutationInput = {
    publisher?: StringFieldUpdateOperationsInput | string
    status?: EnumreportStatusFieldUpdateOperationsInput | $Enums.reportStatus
    uploadedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: StringFieldUpdateOperationsInput | string
    downloadedUrl?: StringFieldUpdateOperationsInput | string
    reportType?: EnumreportTypeFieldUpdateOperationsInput | $Enums.reportType
  }

  export type ReportUncheckedUpdateManyInput = {
    publisher?: StringFieldUpdateOperationsInput | string
    status?: EnumreportStatusFieldUpdateOperationsInput | $Enums.reportStatus
    uploadedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: StringFieldUpdateOperationsInput | string
    downloadedUrl?: StringFieldUpdateOperationsInput | string
    reportType?: EnumreportTypeFieldUpdateOperationsInput | $Enums.reportType
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type ConstructionSiteImageCreateInput = {
    id?: string
    title: string
    imagesrc: string
    location: string
    date?: Date | string
    category: $Enums.category
    project: ProjectCreateNestedOneWithoutConstructionSiteImageInput
  }

  export type ConstructionSiteImageUncheckedCreateInput = {
    id?: string
    title: string
    imagesrc: string
    location: string
    date?: Date | string
    category: $Enums.category
    projectId: string
  }

  export type ConstructionSiteImageUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    imagesrc?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: EnumcategoryFieldUpdateOperationsInput | $Enums.category
    project?: ProjectUpdateOneRequiredWithoutConstructionSiteImageNestedInput
  }

  export type ConstructionSiteImageUncheckedUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    imagesrc?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: EnumcategoryFieldUpdateOperationsInput | $Enums.category
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type ConstructionSiteImageCreateManyInput = {
    id?: string
    title: string
    imagesrc: string
    location: string
    date?: Date | string
    category: $Enums.category
    projectId: string
  }

  export type ConstructionSiteImageUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    imagesrc?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: EnumcategoryFieldUpdateOperationsInput | $Enums.category
  }

  export type ConstructionSiteImageUncheckedUpdateManyInput = {
    title?: StringFieldUpdateOperationsInput | string
    imagesrc?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: EnumcategoryFieldUpdateOperationsInput | $Enums.category
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BudgetListRelationFilter = {
    every?: BudgetWhereInput
    some?: BudgetWhereInput
    none?: BudgetWhereInput
  }

  export type TeamListRelationFilter = {
    every?: TeamWhereInput
    some?: TeamWhereInput
    none?: TeamWhereInput
  }

  export type UpcomingMilstoneNullableScalarRelationFilter = {
    is?: UpcomingMilstoneWhereInput | null
    isNot?: UpcomingMilstoneWhereInput | null
  }

  export type CheckListListRelationFilter = {
    every?: CheckListWhereInput
    some?: CheckListWhereInput
    none?: CheckListWhereInput
  }

  export type DocumentsListRelationFilter = {
    every?: DocumentsWhereInput
    some?: DocumentsWhereInput
    none?: DocumentsWhereInput
  }

  export type TheIncomingLetterListRelationFilter = {
    every?: TheIncomingLetterWhereInput
    some?: TheIncomingLetterWhereInput
    none?: TheIncomingLetterWhereInput
  }

  export type TheOutgoingLetterListRelationFilter = {
    every?: TheOutgoingLetterWhereInput
    some?: TheOutgoingLetterWhereInput
    none?: TheOutgoingLetterWhereInput
  }

  export type ReportListRelationFilter = {
    every?: ReportWhereInput
    some?: ReportWhereInput
    none?: ReportWhereInput
  }

  export type ConstructionSiteImageListRelationFilter = {
    every?: ConstructionSiteImageWhereInput
    some?: ConstructionSiteImageWhereInput
    none?: ConstructionSiteImageWhereInput
  }

  export type BudgetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CheckListOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DocumentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TheIncomingLetterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TheOutgoingLetterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConstructionSiteImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    projectName?: SortOrder
    clientName?: SortOrder
    location?: SortOrder
    startDate?: SortOrder
    dueDate?: SortOrder
    progress?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectAvgOrderByAggregateInput = {
    progress?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    projectName?: SortOrder
    clientName?: SortOrder
    location?: SortOrder
    startDate?: SortOrder
    dueDate?: SortOrder
    progress?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    projectName?: SortOrder
    clientName?: SortOrder
    location?: SortOrder
    startDate?: SortOrder
    dueDate?: SortOrder
    progress?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectSumOrderByAggregateInput = {
    progress?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ProjectScalarRelationFilter = {
    is?: ProjectWhereInput
    isNot?: ProjectWhereInput
  }

  export type BudgetCountOrderByAggregateInput = {
    id?: SortOrder
    total?: SortOrder
    spent?: SortOrder
    projectId?: SortOrder
  }

  export type BudgetAvgOrderByAggregateInput = {
    total?: SortOrder
    spent?: SortOrder
  }

  export type BudgetMaxOrderByAggregateInput = {
    id?: SortOrder
    total?: SortOrder
    spent?: SortOrder
    projectId?: SortOrder
  }

  export type BudgetMinOrderByAggregateInput = {
    id?: SortOrder
    total?: SortOrder
    spent?: SortOrder
    projectId?: SortOrder
  }

  export type BudgetSumOrderByAggregateInput = {
    total?: SortOrder
    spent?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type TeamCountOrderByAggregateInput = {
    id?: SortOrder
    projectManger?: SortOrder
    siteManger?: SortOrder
    civilManger?: SortOrder
    architecturalLoad?: SortOrder
    totalWorker?: SortOrder
    projectId?: SortOrder
  }

  export type TeamAvgOrderByAggregateInput = {
    totalWorker?: SortOrder
  }

  export type TeamMaxOrderByAggregateInput = {
    id?: SortOrder
    projectManger?: SortOrder
    siteManger?: SortOrder
    civilManger?: SortOrder
    architecturalLoad?: SortOrder
    totalWorker?: SortOrder
    projectId?: SortOrder
  }

  export type TeamMinOrderByAggregateInput = {
    id?: SortOrder
    projectManger?: SortOrder
    siteManger?: SortOrder
    civilManger?: SortOrder
    architecturalLoad?: SortOrder
    totalWorker?: SortOrder
    projectId?: SortOrder
  }

  export type TeamSumOrderByAggregateInput = {
    totalWorker?: SortOrder
  }

  export type EnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type UpcomingMilstoneCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    date?: SortOrder
    status?: SortOrder
    projectId?: SortOrder
  }

  export type UpcomingMilstoneMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    date?: SortOrder
    status?: SortOrder
    projectId?: SortOrder
  }

  export type UpcomingMilstoneMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    date?: SortOrder
    status?: SortOrder
    projectId?: SortOrder
  }

  export type EnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type EnumPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityFilter<$PrismaModel> | $Enums.Priority
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type CheckListCountOrderByAggregateInput = {
    id?: SortOrder
    task?: SortOrder
    assignedTo?: SortOrder
    dueData?: SortOrder
    priority?: SortOrder
    completed?: SortOrder
    projectId?: SortOrder
  }

  export type CheckListMaxOrderByAggregateInput = {
    id?: SortOrder
    task?: SortOrder
    assignedTo?: SortOrder
    dueData?: SortOrder
    priority?: SortOrder
    completed?: SortOrder
    projectId?: SortOrder
  }

  export type CheckListMinOrderByAggregateInput = {
    id?: SortOrder
    task?: SortOrder
    assignedTo?: SortOrder
    dueData?: SortOrder
    priority?: SortOrder
    completed?: SortOrder
    projectId?: SortOrder
  }

  export type EnumPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityWithAggregatesFilter<$PrismaModel> | $Enums.Priority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriorityFilter<$PrismaModel>
    _max?: NestedEnumPriorityFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DocumentsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    projectId?: SortOrder
  }

  export type DocumentsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    projectId?: SortOrder
  }

  export type DocumentsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    projectId?: SortOrder
  }

  export type EnumIncomingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.IncomingStatus | EnumIncomingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.IncomingStatus[] | ListEnumIncomingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.IncomingStatus[] | ListEnumIncomingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumIncomingStatusFilter<$PrismaModel> | $Enums.IncomingStatus
  }

  export type TheIncomingLetterCountOrderByAggregateInput = {
    id?: SortOrder
    sender?: SortOrder
    subject?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TheIncomingLetterMaxOrderByAggregateInput = {
    id?: SortOrder
    sender?: SortOrder
    subject?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TheIncomingLetterMinOrderByAggregateInput = {
    id?: SortOrder
    sender?: SortOrder
    subject?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumIncomingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IncomingStatus | EnumIncomingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.IncomingStatus[] | ListEnumIncomingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.IncomingStatus[] | ListEnumIncomingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumIncomingStatusWithAggregatesFilter<$PrismaModel> | $Enums.IncomingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIncomingStatusFilter<$PrismaModel>
    _max?: NestedEnumIncomingStatusFilter<$PrismaModel>
  }

  export type EnumOutgoingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OutgoingStatus | EnumOutgoingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OutgoingStatus[] | ListEnumOutgoingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OutgoingStatus[] | ListEnumOutgoingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOutgoingStatusFilter<$PrismaModel> | $Enums.OutgoingStatus
  }

  export type TheOutgoingLetterCountOrderByAggregateInput = {
    id?: SortOrder
    recipent?: SortOrder
    subject?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    projectId?: SortOrder
  }

  export type TheOutgoingLetterMaxOrderByAggregateInput = {
    id?: SortOrder
    recipent?: SortOrder
    subject?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    projectId?: SortOrder
  }

  export type TheOutgoingLetterMinOrderByAggregateInput = {
    id?: SortOrder
    recipent?: SortOrder
    subject?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    projectId?: SortOrder
  }

  export type EnumOutgoingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OutgoingStatus | EnumOutgoingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OutgoingStatus[] | ListEnumOutgoingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OutgoingStatus[] | ListEnumOutgoingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOutgoingStatusWithAggregatesFilter<$PrismaModel> | $Enums.OutgoingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOutgoingStatusFilter<$PrismaModel>
    _max?: NestedEnumOutgoingStatusFilter<$PrismaModel>
  }

  export type EnumreportStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.reportStatus | EnumreportStatusFieldRefInput<$PrismaModel>
    in?: $Enums.reportStatus[] | ListEnumreportStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.reportStatus[] | ListEnumreportStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumreportStatusFilter<$PrismaModel> | $Enums.reportStatus
  }

  export type EnumreportTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.reportType | EnumreportTypeFieldRefInput<$PrismaModel>
    in?: $Enums.reportType[] | ListEnumreportTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.reportType[] | ListEnumreportTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumreportTypeFilter<$PrismaModel> | $Enums.reportType
  }

  export type ReportCountOrderByAggregateInput = {
    id?: SortOrder
    publisher?: SortOrder
    status?: SortOrder
    uploadedDate?: SortOrder
    lastModified?: SortOrder
    version?: SortOrder
    downloadedUrl?: SortOrder
    reportType?: SortOrder
    projectId?: SortOrder
  }

  export type ReportMaxOrderByAggregateInput = {
    id?: SortOrder
    publisher?: SortOrder
    status?: SortOrder
    uploadedDate?: SortOrder
    lastModified?: SortOrder
    version?: SortOrder
    downloadedUrl?: SortOrder
    reportType?: SortOrder
    projectId?: SortOrder
  }

  export type ReportMinOrderByAggregateInput = {
    id?: SortOrder
    publisher?: SortOrder
    status?: SortOrder
    uploadedDate?: SortOrder
    lastModified?: SortOrder
    version?: SortOrder
    downloadedUrl?: SortOrder
    reportType?: SortOrder
    projectId?: SortOrder
  }

  export type EnumreportStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.reportStatus | EnumreportStatusFieldRefInput<$PrismaModel>
    in?: $Enums.reportStatus[] | ListEnumreportStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.reportStatus[] | ListEnumreportStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumreportStatusWithAggregatesFilter<$PrismaModel> | $Enums.reportStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumreportStatusFilter<$PrismaModel>
    _max?: NestedEnumreportStatusFilter<$PrismaModel>
  }

  export type EnumreportTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.reportType | EnumreportTypeFieldRefInput<$PrismaModel>
    in?: $Enums.reportType[] | ListEnumreportTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.reportType[] | ListEnumreportTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumreportTypeWithAggregatesFilter<$PrismaModel> | $Enums.reportType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumreportTypeFilter<$PrismaModel>
    _max?: NestedEnumreportTypeFilter<$PrismaModel>
  }

  export type EnumcategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.category | EnumcategoryFieldRefInput<$PrismaModel>
    in?: $Enums.category[] | ListEnumcategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.category[] | ListEnumcategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumcategoryFilter<$PrismaModel> | $Enums.category
  }

  export type ConstructionSiteImageCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    imagesrc?: SortOrder
    location?: SortOrder
    date?: SortOrder
    category?: SortOrder
    projectId?: SortOrder
  }

  export type ConstructionSiteImageMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    imagesrc?: SortOrder
    location?: SortOrder
    date?: SortOrder
    category?: SortOrder
    projectId?: SortOrder
  }

  export type ConstructionSiteImageMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    imagesrc?: SortOrder
    location?: SortOrder
    date?: SortOrder
    category?: SortOrder
    projectId?: SortOrder
  }

  export type EnumcategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.category | EnumcategoryFieldRefInput<$PrismaModel>
    in?: $Enums.category[] | ListEnumcategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.category[] | ListEnumcategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumcategoryWithAggregatesFilter<$PrismaModel> | $Enums.category
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumcategoryFilter<$PrismaModel>
    _max?: NestedEnumcategoryFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BudgetCreateNestedManyWithoutProjectInput = {
    create?: XOR<BudgetCreateWithoutProjectInput, BudgetUncheckedCreateWithoutProjectInput> | BudgetCreateWithoutProjectInput[] | BudgetUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: BudgetCreateOrConnectWithoutProjectInput | BudgetCreateOrConnectWithoutProjectInput[]
    createMany?: BudgetCreateManyProjectInputEnvelope
    connect?: BudgetWhereUniqueInput | BudgetWhereUniqueInput[]
  }

  export type TeamCreateNestedManyWithoutProjectInput = {
    create?: XOR<TeamCreateWithoutProjectInput, TeamUncheckedCreateWithoutProjectInput> | TeamCreateWithoutProjectInput[] | TeamUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutProjectInput | TeamCreateOrConnectWithoutProjectInput[]
    createMany?: TeamCreateManyProjectInputEnvelope
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type UpcomingMilstoneCreateNestedOneWithoutProjectInput = {
    create?: XOR<UpcomingMilstoneCreateWithoutProjectInput, UpcomingMilstoneUncheckedCreateWithoutProjectInput>
    connectOrCreate?: UpcomingMilstoneCreateOrConnectWithoutProjectInput
    connect?: UpcomingMilstoneWhereUniqueInput
  }

  export type CheckListCreateNestedManyWithoutProjectInput = {
    create?: XOR<CheckListCreateWithoutProjectInput, CheckListUncheckedCreateWithoutProjectInput> | CheckListCreateWithoutProjectInput[] | CheckListUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CheckListCreateOrConnectWithoutProjectInput | CheckListCreateOrConnectWithoutProjectInput[]
    createMany?: CheckListCreateManyProjectInputEnvelope
    connect?: CheckListWhereUniqueInput | CheckListWhereUniqueInput[]
  }

  export type DocumentsCreateNestedManyWithoutProjectInput = {
    create?: XOR<DocumentsCreateWithoutProjectInput, DocumentsUncheckedCreateWithoutProjectInput> | DocumentsCreateWithoutProjectInput[] | DocumentsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DocumentsCreateOrConnectWithoutProjectInput | DocumentsCreateOrConnectWithoutProjectInput[]
    createMany?: DocumentsCreateManyProjectInputEnvelope
    connect?: DocumentsWhereUniqueInput | DocumentsWhereUniqueInput[]
  }

  export type TheIncomingLetterCreateNestedManyWithoutProjectInput = {
    create?: XOR<TheIncomingLetterCreateWithoutProjectInput, TheIncomingLetterUncheckedCreateWithoutProjectInput> | TheIncomingLetterCreateWithoutProjectInput[] | TheIncomingLetterUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TheIncomingLetterCreateOrConnectWithoutProjectInput | TheIncomingLetterCreateOrConnectWithoutProjectInput[]
    createMany?: TheIncomingLetterCreateManyProjectInputEnvelope
    connect?: TheIncomingLetterWhereUniqueInput | TheIncomingLetterWhereUniqueInput[]
  }

  export type TheOutgoingLetterCreateNestedManyWithoutProjectInput = {
    create?: XOR<TheOutgoingLetterCreateWithoutProjectInput, TheOutgoingLetterUncheckedCreateWithoutProjectInput> | TheOutgoingLetterCreateWithoutProjectInput[] | TheOutgoingLetterUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TheOutgoingLetterCreateOrConnectWithoutProjectInput | TheOutgoingLetterCreateOrConnectWithoutProjectInput[]
    createMany?: TheOutgoingLetterCreateManyProjectInputEnvelope
    connect?: TheOutgoingLetterWhereUniqueInput | TheOutgoingLetterWhereUniqueInput[]
  }

  export type ReportCreateNestedManyWithoutProjectInput = {
    create?: XOR<ReportCreateWithoutProjectInput, ReportUncheckedCreateWithoutProjectInput> | ReportCreateWithoutProjectInput[] | ReportUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutProjectInput | ReportCreateOrConnectWithoutProjectInput[]
    createMany?: ReportCreateManyProjectInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type ConstructionSiteImageCreateNestedManyWithoutProjectInput = {
    create?: XOR<ConstructionSiteImageCreateWithoutProjectInput, ConstructionSiteImageUncheckedCreateWithoutProjectInput> | ConstructionSiteImageCreateWithoutProjectInput[] | ConstructionSiteImageUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ConstructionSiteImageCreateOrConnectWithoutProjectInput | ConstructionSiteImageCreateOrConnectWithoutProjectInput[]
    createMany?: ConstructionSiteImageCreateManyProjectInputEnvelope
    connect?: ConstructionSiteImageWhereUniqueInput | ConstructionSiteImageWhereUniqueInput[]
  }

  export type BudgetUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<BudgetCreateWithoutProjectInput, BudgetUncheckedCreateWithoutProjectInput> | BudgetCreateWithoutProjectInput[] | BudgetUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: BudgetCreateOrConnectWithoutProjectInput | BudgetCreateOrConnectWithoutProjectInput[]
    createMany?: BudgetCreateManyProjectInputEnvelope
    connect?: BudgetWhereUniqueInput | BudgetWhereUniqueInput[]
  }

  export type TeamUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<TeamCreateWithoutProjectInput, TeamUncheckedCreateWithoutProjectInput> | TeamCreateWithoutProjectInput[] | TeamUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutProjectInput | TeamCreateOrConnectWithoutProjectInput[]
    createMany?: TeamCreateManyProjectInputEnvelope
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type UpcomingMilstoneUncheckedCreateNestedOneWithoutProjectInput = {
    create?: XOR<UpcomingMilstoneCreateWithoutProjectInput, UpcomingMilstoneUncheckedCreateWithoutProjectInput>
    connectOrCreate?: UpcomingMilstoneCreateOrConnectWithoutProjectInput
    connect?: UpcomingMilstoneWhereUniqueInput
  }

  export type CheckListUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<CheckListCreateWithoutProjectInput, CheckListUncheckedCreateWithoutProjectInput> | CheckListCreateWithoutProjectInput[] | CheckListUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CheckListCreateOrConnectWithoutProjectInput | CheckListCreateOrConnectWithoutProjectInput[]
    createMany?: CheckListCreateManyProjectInputEnvelope
    connect?: CheckListWhereUniqueInput | CheckListWhereUniqueInput[]
  }

  export type DocumentsUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<DocumentsCreateWithoutProjectInput, DocumentsUncheckedCreateWithoutProjectInput> | DocumentsCreateWithoutProjectInput[] | DocumentsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DocumentsCreateOrConnectWithoutProjectInput | DocumentsCreateOrConnectWithoutProjectInput[]
    createMany?: DocumentsCreateManyProjectInputEnvelope
    connect?: DocumentsWhereUniqueInput | DocumentsWhereUniqueInput[]
  }

  export type TheIncomingLetterUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<TheIncomingLetterCreateWithoutProjectInput, TheIncomingLetterUncheckedCreateWithoutProjectInput> | TheIncomingLetterCreateWithoutProjectInput[] | TheIncomingLetterUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TheIncomingLetterCreateOrConnectWithoutProjectInput | TheIncomingLetterCreateOrConnectWithoutProjectInput[]
    createMany?: TheIncomingLetterCreateManyProjectInputEnvelope
    connect?: TheIncomingLetterWhereUniqueInput | TheIncomingLetterWhereUniqueInput[]
  }

  export type TheOutgoingLetterUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<TheOutgoingLetterCreateWithoutProjectInput, TheOutgoingLetterUncheckedCreateWithoutProjectInput> | TheOutgoingLetterCreateWithoutProjectInput[] | TheOutgoingLetterUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TheOutgoingLetterCreateOrConnectWithoutProjectInput | TheOutgoingLetterCreateOrConnectWithoutProjectInput[]
    createMany?: TheOutgoingLetterCreateManyProjectInputEnvelope
    connect?: TheOutgoingLetterWhereUniqueInput | TheOutgoingLetterWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ReportCreateWithoutProjectInput, ReportUncheckedCreateWithoutProjectInput> | ReportCreateWithoutProjectInput[] | ReportUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutProjectInput | ReportCreateOrConnectWithoutProjectInput[]
    createMany?: ReportCreateManyProjectInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type ConstructionSiteImageUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ConstructionSiteImageCreateWithoutProjectInput, ConstructionSiteImageUncheckedCreateWithoutProjectInput> | ConstructionSiteImageCreateWithoutProjectInput[] | ConstructionSiteImageUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ConstructionSiteImageCreateOrConnectWithoutProjectInput | ConstructionSiteImageCreateOrConnectWithoutProjectInput[]
    createMany?: ConstructionSiteImageCreateManyProjectInputEnvelope
    connect?: ConstructionSiteImageWhereUniqueInput | ConstructionSiteImageWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BudgetUpdateManyWithoutProjectNestedInput = {
    create?: XOR<BudgetCreateWithoutProjectInput, BudgetUncheckedCreateWithoutProjectInput> | BudgetCreateWithoutProjectInput[] | BudgetUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: BudgetCreateOrConnectWithoutProjectInput | BudgetCreateOrConnectWithoutProjectInput[]
    upsert?: BudgetUpsertWithWhereUniqueWithoutProjectInput | BudgetUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: BudgetCreateManyProjectInputEnvelope
    set?: BudgetWhereUniqueInput | BudgetWhereUniqueInput[]
    disconnect?: BudgetWhereUniqueInput | BudgetWhereUniqueInput[]
    delete?: BudgetWhereUniqueInput | BudgetWhereUniqueInput[]
    connect?: BudgetWhereUniqueInput | BudgetWhereUniqueInput[]
    update?: BudgetUpdateWithWhereUniqueWithoutProjectInput | BudgetUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: BudgetUpdateManyWithWhereWithoutProjectInput | BudgetUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: BudgetScalarWhereInput | BudgetScalarWhereInput[]
  }

  export type TeamUpdateManyWithoutProjectNestedInput = {
    create?: XOR<TeamCreateWithoutProjectInput, TeamUncheckedCreateWithoutProjectInput> | TeamCreateWithoutProjectInput[] | TeamUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutProjectInput | TeamCreateOrConnectWithoutProjectInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutProjectInput | TeamUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: TeamCreateManyProjectInputEnvelope
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutProjectInput | TeamUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutProjectInput | TeamUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type UpcomingMilstoneUpdateOneWithoutProjectNestedInput = {
    create?: XOR<UpcomingMilstoneCreateWithoutProjectInput, UpcomingMilstoneUncheckedCreateWithoutProjectInput>
    connectOrCreate?: UpcomingMilstoneCreateOrConnectWithoutProjectInput
    upsert?: UpcomingMilstoneUpsertWithoutProjectInput
    disconnect?: UpcomingMilstoneWhereInput | boolean
    delete?: UpcomingMilstoneWhereInput | boolean
    connect?: UpcomingMilstoneWhereUniqueInput
    update?: XOR<XOR<UpcomingMilstoneUpdateToOneWithWhereWithoutProjectInput, UpcomingMilstoneUpdateWithoutProjectInput>, UpcomingMilstoneUncheckedUpdateWithoutProjectInput>
  }

  export type CheckListUpdateManyWithoutProjectNestedInput = {
    create?: XOR<CheckListCreateWithoutProjectInput, CheckListUncheckedCreateWithoutProjectInput> | CheckListCreateWithoutProjectInput[] | CheckListUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CheckListCreateOrConnectWithoutProjectInput | CheckListCreateOrConnectWithoutProjectInput[]
    upsert?: CheckListUpsertWithWhereUniqueWithoutProjectInput | CheckListUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: CheckListCreateManyProjectInputEnvelope
    set?: CheckListWhereUniqueInput | CheckListWhereUniqueInput[]
    disconnect?: CheckListWhereUniqueInput | CheckListWhereUniqueInput[]
    delete?: CheckListWhereUniqueInput | CheckListWhereUniqueInput[]
    connect?: CheckListWhereUniqueInput | CheckListWhereUniqueInput[]
    update?: CheckListUpdateWithWhereUniqueWithoutProjectInput | CheckListUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: CheckListUpdateManyWithWhereWithoutProjectInput | CheckListUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: CheckListScalarWhereInput | CheckListScalarWhereInput[]
  }

  export type DocumentsUpdateManyWithoutProjectNestedInput = {
    create?: XOR<DocumentsCreateWithoutProjectInput, DocumentsUncheckedCreateWithoutProjectInput> | DocumentsCreateWithoutProjectInput[] | DocumentsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DocumentsCreateOrConnectWithoutProjectInput | DocumentsCreateOrConnectWithoutProjectInput[]
    upsert?: DocumentsUpsertWithWhereUniqueWithoutProjectInput | DocumentsUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: DocumentsCreateManyProjectInputEnvelope
    set?: DocumentsWhereUniqueInput | DocumentsWhereUniqueInput[]
    disconnect?: DocumentsWhereUniqueInput | DocumentsWhereUniqueInput[]
    delete?: DocumentsWhereUniqueInput | DocumentsWhereUniqueInput[]
    connect?: DocumentsWhereUniqueInput | DocumentsWhereUniqueInput[]
    update?: DocumentsUpdateWithWhereUniqueWithoutProjectInput | DocumentsUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: DocumentsUpdateManyWithWhereWithoutProjectInput | DocumentsUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: DocumentsScalarWhereInput | DocumentsScalarWhereInput[]
  }

  export type TheIncomingLetterUpdateManyWithoutProjectNestedInput = {
    create?: XOR<TheIncomingLetterCreateWithoutProjectInput, TheIncomingLetterUncheckedCreateWithoutProjectInput> | TheIncomingLetterCreateWithoutProjectInput[] | TheIncomingLetterUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TheIncomingLetterCreateOrConnectWithoutProjectInput | TheIncomingLetterCreateOrConnectWithoutProjectInput[]
    upsert?: TheIncomingLetterUpsertWithWhereUniqueWithoutProjectInput | TheIncomingLetterUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: TheIncomingLetterCreateManyProjectInputEnvelope
    set?: TheIncomingLetterWhereUniqueInput | TheIncomingLetterWhereUniqueInput[]
    disconnect?: TheIncomingLetterWhereUniqueInput | TheIncomingLetterWhereUniqueInput[]
    delete?: TheIncomingLetterWhereUniqueInput | TheIncomingLetterWhereUniqueInput[]
    connect?: TheIncomingLetterWhereUniqueInput | TheIncomingLetterWhereUniqueInput[]
    update?: TheIncomingLetterUpdateWithWhereUniqueWithoutProjectInput | TheIncomingLetterUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: TheIncomingLetterUpdateManyWithWhereWithoutProjectInput | TheIncomingLetterUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: TheIncomingLetterScalarWhereInput | TheIncomingLetterScalarWhereInput[]
  }

  export type TheOutgoingLetterUpdateManyWithoutProjectNestedInput = {
    create?: XOR<TheOutgoingLetterCreateWithoutProjectInput, TheOutgoingLetterUncheckedCreateWithoutProjectInput> | TheOutgoingLetterCreateWithoutProjectInput[] | TheOutgoingLetterUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TheOutgoingLetterCreateOrConnectWithoutProjectInput | TheOutgoingLetterCreateOrConnectWithoutProjectInput[]
    upsert?: TheOutgoingLetterUpsertWithWhereUniqueWithoutProjectInput | TheOutgoingLetterUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: TheOutgoingLetterCreateManyProjectInputEnvelope
    set?: TheOutgoingLetterWhereUniqueInput | TheOutgoingLetterWhereUniqueInput[]
    disconnect?: TheOutgoingLetterWhereUniqueInput | TheOutgoingLetterWhereUniqueInput[]
    delete?: TheOutgoingLetterWhereUniqueInput | TheOutgoingLetterWhereUniqueInput[]
    connect?: TheOutgoingLetterWhereUniqueInput | TheOutgoingLetterWhereUniqueInput[]
    update?: TheOutgoingLetterUpdateWithWhereUniqueWithoutProjectInput | TheOutgoingLetterUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: TheOutgoingLetterUpdateManyWithWhereWithoutProjectInput | TheOutgoingLetterUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: TheOutgoingLetterScalarWhereInput | TheOutgoingLetterScalarWhereInput[]
  }

  export type ReportUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ReportCreateWithoutProjectInput, ReportUncheckedCreateWithoutProjectInput> | ReportCreateWithoutProjectInput[] | ReportUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutProjectInput | ReportCreateOrConnectWithoutProjectInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutProjectInput | ReportUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ReportCreateManyProjectInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutProjectInput | ReportUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutProjectInput | ReportUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type ConstructionSiteImageUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ConstructionSiteImageCreateWithoutProjectInput, ConstructionSiteImageUncheckedCreateWithoutProjectInput> | ConstructionSiteImageCreateWithoutProjectInput[] | ConstructionSiteImageUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ConstructionSiteImageCreateOrConnectWithoutProjectInput | ConstructionSiteImageCreateOrConnectWithoutProjectInput[]
    upsert?: ConstructionSiteImageUpsertWithWhereUniqueWithoutProjectInput | ConstructionSiteImageUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ConstructionSiteImageCreateManyProjectInputEnvelope
    set?: ConstructionSiteImageWhereUniqueInput | ConstructionSiteImageWhereUniqueInput[]
    disconnect?: ConstructionSiteImageWhereUniqueInput | ConstructionSiteImageWhereUniqueInput[]
    delete?: ConstructionSiteImageWhereUniqueInput | ConstructionSiteImageWhereUniqueInput[]
    connect?: ConstructionSiteImageWhereUniqueInput | ConstructionSiteImageWhereUniqueInput[]
    update?: ConstructionSiteImageUpdateWithWhereUniqueWithoutProjectInput | ConstructionSiteImageUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ConstructionSiteImageUpdateManyWithWhereWithoutProjectInput | ConstructionSiteImageUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ConstructionSiteImageScalarWhereInput | ConstructionSiteImageScalarWhereInput[]
  }

  export type BudgetUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<BudgetCreateWithoutProjectInput, BudgetUncheckedCreateWithoutProjectInput> | BudgetCreateWithoutProjectInput[] | BudgetUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: BudgetCreateOrConnectWithoutProjectInput | BudgetCreateOrConnectWithoutProjectInput[]
    upsert?: BudgetUpsertWithWhereUniqueWithoutProjectInput | BudgetUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: BudgetCreateManyProjectInputEnvelope
    set?: BudgetWhereUniqueInput | BudgetWhereUniqueInput[]
    disconnect?: BudgetWhereUniqueInput | BudgetWhereUniqueInput[]
    delete?: BudgetWhereUniqueInput | BudgetWhereUniqueInput[]
    connect?: BudgetWhereUniqueInput | BudgetWhereUniqueInput[]
    update?: BudgetUpdateWithWhereUniqueWithoutProjectInput | BudgetUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: BudgetUpdateManyWithWhereWithoutProjectInput | BudgetUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: BudgetScalarWhereInput | BudgetScalarWhereInput[]
  }

  export type TeamUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<TeamCreateWithoutProjectInput, TeamUncheckedCreateWithoutProjectInput> | TeamCreateWithoutProjectInput[] | TeamUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutProjectInput | TeamCreateOrConnectWithoutProjectInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutProjectInput | TeamUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: TeamCreateManyProjectInputEnvelope
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutProjectInput | TeamUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutProjectInput | TeamUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type UpcomingMilstoneUncheckedUpdateOneWithoutProjectNestedInput = {
    create?: XOR<UpcomingMilstoneCreateWithoutProjectInput, UpcomingMilstoneUncheckedCreateWithoutProjectInput>
    connectOrCreate?: UpcomingMilstoneCreateOrConnectWithoutProjectInput
    upsert?: UpcomingMilstoneUpsertWithoutProjectInput
    disconnect?: UpcomingMilstoneWhereInput | boolean
    delete?: UpcomingMilstoneWhereInput | boolean
    connect?: UpcomingMilstoneWhereUniqueInput
    update?: XOR<XOR<UpcomingMilstoneUpdateToOneWithWhereWithoutProjectInput, UpcomingMilstoneUpdateWithoutProjectInput>, UpcomingMilstoneUncheckedUpdateWithoutProjectInput>
  }

  export type CheckListUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<CheckListCreateWithoutProjectInput, CheckListUncheckedCreateWithoutProjectInput> | CheckListCreateWithoutProjectInput[] | CheckListUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CheckListCreateOrConnectWithoutProjectInput | CheckListCreateOrConnectWithoutProjectInput[]
    upsert?: CheckListUpsertWithWhereUniqueWithoutProjectInput | CheckListUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: CheckListCreateManyProjectInputEnvelope
    set?: CheckListWhereUniqueInput | CheckListWhereUniqueInput[]
    disconnect?: CheckListWhereUniqueInput | CheckListWhereUniqueInput[]
    delete?: CheckListWhereUniqueInput | CheckListWhereUniqueInput[]
    connect?: CheckListWhereUniqueInput | CheckListWhereUniqueInput[]
    update?: CheckListUpdateWithWhereUniqueWithoutProjectInput | CheckListUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: CheckListUpdateManyWithWhereWithoutProjectInput | CheckListUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: CheckListScalarWhereInput | CheckListScalarWhereInput[]
  }

  export type DocumentsUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<DocumentsCreateWithoutProjectInput, DocumentsUncheckedCreateWithoutProjectInput> | DocumentsCreateWithoutProjectInput[] | DocumentsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DocumentsCreateOrConnectWithoutProjectInput | DocumentsCreateOrConnectWithoutProjectInput[]
    upsert?: DocumentsUpsertWithWhereUniqueWithoutProjectInput | DocumentsUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: DocumentsCreateManyProjectInputEnvelope
    set?: DocumentsWhereUniqueInput | DocumentsWhereUniqueInput[]
    disconnect?: DocumentsWhereUniqueInput | DocumentsWhereUniqueInput[]
    delete?: DocumentsWhereUniqueInput | DocumentsWhereUniqueInput[]
    connect?: DocumentsWhereUniqueInput | DocumentsWhereUniqueInput[]
    update?: DocumentsUpdateWithWhereUniqueWithoutProjectInput | DocumentsUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: DocumentsUpdateManyWithWhereWithoutProjectInput | DocumentsUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: DocumentsScalarWhereInput | DocumentsScalarWhereInput[]
  }

  export type TheIncomingLetterUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<TheIncomingLetterCreateWithoutProjectInput, TheIncomingLetterUncheckedCreateWithoutProjectInput> | TheIncomingLetterCreateWithoutProjectInput[] | TheIncomingLetterUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TheIncomingLetterCreateOrConnectWithoutProjectInput | TheIncomingLetterCreateOrConnectWithoutProjectInput[]
    upsert?: TheIncomingLetterUpsertWithWhereUniqueWithoutProjectInput | TheIncomingLetterUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: TheIncomingLetterCreateManyProjectInputEnvelope
    set?: TheIncomingLetterWhereUniqueInput | TheIncomingLetterWhereUniqueInput[]
    disconnect?: TheIncomingLetterWhereUniqueInput | TheIncomingLetterWhereUniqueInput[]
    delete?: TheIncomingLetterWhereUniqueInput | TheIncomingLetterWhereUniqueInput[]
    connect?: TheIncomingLetterWhereUniqueInput | TheIncomingLetterWhereUniqueInput[]
    update?: TheIncomingLetterUpdateWithWhereUniqueWithoutProjectInput | TheIncomingLetterUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: TheIncomingLetterUpdateManyWithWhereWithoutProjectInput | TheIncomingLetterUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: TheIncomingLetterScalarWhereInput | TheIncomingLetterScalarWhereInput[]
  }

  export type TheOutgoingLetterUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<TheOutgoingLetterCreateWithoutProjectInput, TheOutgoingLetterUncheckedCreateWithoutProjectInput> | TheOutgoingLetterCreateWithoutProjectInput[] | TheOutgoingLetterUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TheOutgoingLetterCreateOrConnectWithoutProjectInput | TheOutgoingLetterCreateOrConnectWithoutProjectInput[]
    upsert?: TheOutgoingLetterUpsertWithWhereUniqueWithoutProjectInput | TheOutgoingLetterUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: TheOutgoingLetterCreateManyProjectInputEnvelope
    set?: TheOutgoingLetterWhereUniqueInput | TheOutgoingLetterWhereUniqueInput[]
    disconnect?: TheOutgoingLetterWhereUniqueInput | TheOutgoingLetterWhereUniqueInput[]
    delete?: TheOutgoingLetterWhereUniqueInput | TheOutgoingLetterWhereUniqueInput[]
    connect?: TheOutgoingLetterWhereUniqueInput | TheOutgoingLetterWhereUniqueInput[]
    update?: TheOutgoingLetterUpdateWithWhereUniqueWithoutProjectInput | TheOutgoingLetterUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: TheOutgoingLetterUpdateManyWithWhereWithoutProjectInput | TheOutgoingLetterUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: TheOutgoingLetterScalarWhereInput | TheOutgoingLetterScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ReportCreateWithoutProjectInput, ReportUncheckedCreateWithoutProjectInput> | ReportCreateWithoutProjectInput[] | ReportUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutProjectInput | ReportCreateOrConnectWithoutProjectInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutProjectInput | ReportUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ReportCreateManyProjectInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutProjectInput | ReportUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutProjectInput | ReportUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type ConstructionSiteImageUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ConstructionSiteImageCreateWithoutProjectInput, ConstructionSiteImageUncheckedCreateWithoutProjectInput> | ConstructionSiteImageCreateWithoutProjectInput[] | ConstructionSiteImageUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ConstructionSiteImageCreateOrConnectWithoutProjectInput | ConstructionSiteImageCreateOrConnectWithoutProjectInput[]
    upsert?: ConstructionSiteImageUpsertWithWhereUniqueWithoutProjectInput | ConstructionSiteImageUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ConstructionSiteImageCreateManyProjectInputEnvelope
    set?: ConstructionSiteImageWhereUniqueInput | ConstructionSiteImageWhereUniqueInput[]
    disconnect?: ConstructionSiteImageWhereUniqueInput | ConstructionSiteImageWhereUniqueInput[]
    delete?: ConstructionSiteImageWhereUniqueInput | ConstructionSiteImageWhereUniqueInput[]
    connect?: ConstructionSiteImageWhereUniqueInput | ConstructionSiteImageWhereUniqueInput[]
    update?: ConstructionSiteImageUpdateWithWhereUniqueWithoutProjectInput | ConstructionSiteImageUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ConstructionSiteImageUpdateManyWithWhereWithoutProjectInput | ConstructionSiteImageUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ConstructionSiteImageScalarWhereInput | ConstructionSiteImageScalarWhereInput[]
  }

  export type ProjectCreateNestedOneWithoutBudgetInput = {
    create?: XOR<ProjectCreateWithoutBudgetInput, ProjectUncheckedCreateWithoutBudgetInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutBudgetInput
    connect?: ProjectWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProjectUpdateOneRequiredWithoutBudgetNestedInput = {
    create?: XOR<ProjectCreateWithoutBudgetInput, ProjectUncheckedCreateWithoutBudgetInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutBudgetInput
    upsert?: ProjectUpsertWithoutBudgetInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutBudgetInput, ProjectUpdateWithoutBudgetInput>, ProjectUncheckedUpdateWithoutBudgetInput>
  }

  export type ProjectCreateNestedOneWithoutTeamInput = {
    create?: XOR<ProjectCreateWithoutTeamInput, ProjectUncheckedCreateWithoutTeamInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTeamInput
    connect?: ProjectWhereUniqueInput
  }

  export type ProjectUpdateOneRequiredWithoutTeamNestedInput = {
    create?: XOR<ProjectCreateWithoutTeamInput, ProjectUncheckedCreateWithoutTeamInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTeamInput
    upsert?: ProjectUpsertWithoutTeamInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutTeamInput, ProjectUpdateWithoutTeamInput>, ProjectUncheckedUpdateWithoutTeamInput>
  }

  export type ProjectCreateNestedOneWithoutUpcomingMilstoneInput = {
    create?: XOR<ProjectCreateWithoutUpcomingMilstoneInput, ProjectUncheckedCreateWithoutUpcomingMilstoneInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutUpcomingMilstoneInput
    connect?: ProjectWhereUniqueInput
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: $Enums.Status
  }

  export type ProjectUpdateOneRequiredWithoutUpcomingMilstoneNestedInput = {
    create?: XOR<ProjectCreateWithoutUpcomingMilstoneInput, ProjectUncheckedCreateWithoutUpcomingMilstoneInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutUpcomingMilstoneInput
    upsert?: ProjectUpsertWithoutUpcomingMilstoneInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutUpcomingMilstoneInput, ProjectUpdateWithoutUpcomingMilstoneInput>, ProjectUncheckedUpdateWithoutUpcomingMilstoneInput>
  }

  export type ProjectCreateNestedOneWithoutCheckListInput = {
    create?: XOR<ProjectCreateWithoutCheckListInput, ProjectUncheckedCreateWithoutCheckListInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutCheckListInput
    connect?: ProjectWhereUniqueInput
  }

  export type EnumPriorityFieldUpdateOperationsInput = {
    set?: $Enums.Priority
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ProjectUpdateOneRequiredWithoutCheckListNestedInput = {
    create?: XOR<ProjectCreateWithoutCheckListInput, ProjectUncheckedCreateWithoutCheckListInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutCheckListInput
    upsert?: ProjectUpsertWithoutCheckListInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutCheckListInput, ProjectUpdateWithoutCheckListInput>, ProjectUncheckedUpdateWithoutCheckListInput>
  }

  export type ProjectCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<ProjectCreateWithoutDocumentsInput, ProjectUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutDocumentsInput
    connect?: ProjectWhereUniqueInput
  }

  export type ProjectUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<ProjectCreateWithoutDocumentsInput, ProjectUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutDocumentsInput
    upsert?: ProjectUpsertWithoutDocumentsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutDocumentsInput, ProjectUpdateWithoutDocumentsInput>, ProjectUncheckedUpdateWithoutDocumentsInput>
  }

  export type ProjectCreateNestedOneWithoutTheIncomingLetterInput = {
    create?: XOR<ProjectCreateWithoutTheIncomingLetterInput, ProjectUncheckedCreateWithoutTheIncomingLetterInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTheIncomingLetterInput
    connect?: ProjectWhereUniqueInput
  }

  export type EnumIncomingStatusFieldUpdateOperationsInput = {
    set?: $Enums.IncomingStatus
  }

  export type ProjectUpdateOneRequiredWithoutTheIncomingLetterNestedInput = {
    create?: XOR<ProjectCreateWithoutTheIncomingLetterInput, ProjectUncheckedCreateWithoutTheIncomingLetterInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTheIncomingLetterInput
    upsert?: ProjectUpsertWithoutTheIncomingLetterInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutTheIncomingLetterInput, ProjectUpdateWithoutTheIncomingLetterInput>, ProjectUncheckedUpdateWithoutTheIncomingLetterInput>
  }

  export type ProjectCreateNestedOneWithoutTheOutgoingLetterInput = {
    create?: XOR<ProjectCreateWithoutTheOutgoingLetterInput, ProjectUncheckedCreateWithoutTheOutgoingLetterInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTheOutgoingLetterInput
    connect?: ProjectWhereUniqueInput
  }

  export type EnumOutgoingStatusFieldUpdateOperationsInput = {
    set?: $Enums.OutgoingStatus
  }

  export type ProjectUpdateOneRequiredWithoutTheOutgoingLetterNestedInput = {
    create?: XOR<ProjectCreateWithoutTheOutgoingLetterInput, ProjectUncheckedCreateWithoutTheOutgoingLetterInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTheOutgoingLetterInput
    upsert?: ProjectUpsertWithoutTheOutgoingLetterInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutTheOutgoingLetterInput, ProjectUpdateWithoutTheOutgoingLetterInput>, ProjectUncheckedUpdateWithoutTheOutgoingLetterInput>
  }

  export type ProjectCreateNestedOneWithoutReportInput = {
    create?: XOR<ProjectCreateWithoutReportInput, ProjectUncheckedCreateWithoutReportInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutReportInput
    connect?: ProjectWhereUniqueInput
  }

  export type EnumreportStatusFieldUpdateOperationsInput = {
    set?: $Enums.reportStatus
  }

  export type EnumreportTypeFieldUpdateOperationsInput = {
    set?: $Enums.reportType
  }

  export type ProjectUpdateOneRequiredWithoutReportNestedInput = {
    create?: XOR<ProjectCreateWithoutReportInput, ProjectUncheckedCreateWithoutReportInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutReportInput
    upsert?: ProjectUpsertWithoutReportInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutReportInput, ProjectUpdateWithoutReportInput>, ProjectUncheckedUpdateWithoutReportInput>
  }

  export type ProjectCreateNestedOneWithoutConstructionSiteImageInput = {
    create?: XOR<ProjectCreateWithoutConstructionSiteImageInput, ProjectUncheckedCreateWithoutConstructionSiteImageInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutConstructionSiteImageInput
    connect?: ProjectWhereUniqueInput
  }

  export type EnumcategoryFieldUpdateOperationsInput = {
    set?: $Enums.category
  }

  export type ProjectUpdateOneRequiredWithoutConstructionSiteImageNestedInput = {
    create?: XOR<ProjectCreateWithoutConstructionSiteImageInput, ProjectUncheckedCreateWithoutConstructionSiteImageInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutConstructionSiteImageInput
    upsert?: ProjectUpsertWithoutConstructionSiteImageInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutConstructionSiteImageInput, ProjectUpdateWithoutConstructionSiteImageInput>, ProjectUncheckedUpdateWithoutConstructionSiteImageInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type NestedEnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type NestedEnumPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityFilter<$PrismaModel> | $Enums.Priority
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityWithAggregatesFilter<$PrismaModel> | $Enums.Priority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriorityFilter<$PrismaModel>
    _max?: NestedEnumPriorityFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumIncomingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.IncomingStatus | EnumIncomingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.IncomingStatus[] | ListEnumIncomingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.IncomingStatus[] | ListEnumIncomingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumIncomingStatusFilter<$PrismaModel> | $Enums.IncomingStatus
  }

  export type NestedEnumIncomingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IncomingStatus | EnumIncomingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.IncomingStatus[] | ListEnumIncomingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.IncomingStatus[] | ListEnumIncomingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumIncomingStatusWithAggregatesFilter<$PrismaModel> | $Enums.IncomingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIncomingStatusFilter<$PrismaModel>
    _max?: NestedEnumIncomingStatusFilter<$PrismaModel>
  }

  export type NestedEnumOutgoingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OutgoingStatus | EnumOutgoingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OutgoingStatus[] | ListEnumOutgoingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OutgoingStatus[] | ListEnumOutgoingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOutgoingStatusFilter<$PrismaModel> | $Enums.OutgoingStatus
  }

  export type NestedEnumOutgoingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OutgoingStatus | EnumOutgoingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OutgoingStatus[] | ListEnumOutgoingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OutgoingStatus[] | ListEnumOutgoingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOutgoingStatusWithAggregatesFilter<$PrismaModel> | $Enums.OutgoingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOutgoingStatusFilter<$PrismaModel>
    _max?: NestedEnumOutgoingStatusFilter<$PrismaModel>
  }

  export type NestedEnumreportStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.reportStatus | EnumreportStatusFieldRefInput<$PrismaModel>
    in?: $Enums.reportStatus[] | ListEnumreportStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.reportStatus[] | ListEnumreportStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumreportStatusFilter<$PrismaModel> | $Enums.reportStatus
  }

  export type NestedEnumreportTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.reportType | EnumreportTypeFieldRefInput<$PrismaModel>
    in?: $Enums.reportType[] | ListEnumreportTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.reportType[] | ListEnumreportTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumreportTypeFilter<$PrismaModel> | $Enums.reportType
  }

  export type NestedEnumreportStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.reportStatus | EnumreportStatusFieldRefInput<$PrismaModel>
    in?: $Enums.reportStatus[] | ListEnumreportStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.reportStatus[] | ListEnumreportStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumreportStatusWithAggregatesFilter<$PrismaModel> | $Enums.reportStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumreportStatusFilter<$PrismaModel>
    _max?: NestedEnumreportStatusFilter<$PrismaModel>
  }

  export type NestedEnumreportTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.reportType | EnumreportTypeFieldRefInput<$PrismaModel>
    in?: $Enums.reportType[] | ListEnumreportTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.reportType[] | ListEnumreportTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumreportTypeWithAggregatesFilter<$PrismaModel> | $Enums.reportType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumreportTypeFilter<$PrismaModel>
    _max?: NestedEnumreportTypeFilter<$PrismaModel>
  }

  export type NestedEnumcategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.category | EnumcategoryFieldRefInput<$PrismaModel>
    in?: $Enums.category[] | ListEnumcategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.category[] | ListEnumcategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumcategoryFilter<$PrismaModel> | $Enums.category
  }

  export type NestedEnumcategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.category | EnumcategoryFieldRefInput<$PrismaModel>
    in?: $Enums.category[] | ListEnumcategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.category[] | ListEnumcategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumcategoryWithAggregatesFilter<$PrismaModel> | $Enums.category
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumcategoryFilter<$PrismaModel>
    _max?: NestedEnumcategoryFilter<$PrismaModel>
  }

  export type BudgetCreateWithoutProjectInput = {
    id?: string
    total: number
    spent: number
  }

  export type BudgetUncheckedCreateWithoutProjectInput = {
    id?: string
    total: number
    spent: number
  }

  export type BudgetCreateOrConnectWithoutProjectInput = {
    where: BudgetWhereUniqueInput
    create: XOR<BudgetCreateWithoutProjectInput, BudgetUncheckedCreateWithoutProjectInput>
  }

  export type BudgetCreateManyProjectInputEnvelope = {
    data: BudgetCreateManyProjectInput | BudgetCreateManyProjectInput[]
  }

  export type TeamCreateWithoutProjectInput = {
    id?: string
    projectManger: string
    siteManger: string
    civilManger: string
    architecturalLoad: string
    totalWorker: number
  }

  export type TeamUncheckedCreateWithoutProjectInput = {
    id?: string
    projectManger: string
    siteManger: string
    civilManger: string
    architecturalLoad: string
    totalWorker: number
  }

  export type TeamCreateOrConnectWithoutProjectInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutProjectInput, TeamUncheckedCreateWithoutProjectInput>
  }

  export type TeamCreateManyProjectInputEnvelope = {
    data: TeamCreateManyProjectInput | TeamCreateManyProjectInput[]
  }

  export type UpcomingMilstoneCreateWithoutProjectInput = {
    id?: string
    title: string
    date?: Date | string
    status: $Enums.Status
  }

  export type UpcomingMilstoneUncheckedCreateWithoutProjectInput = {
    id?: string
    title: string
    date?: Date | string
    status: $Enums.Status
  }

  export type UpcomingMilstoneCreateOrConnectWithoutProjectInput = {
    where: UpcomingMilstoneWhereUniqueInput
    create: XOR<UpcomingMilstoneCreateWithoutProjectInput, UpcomingMilstoneUncheckedCreateWithoutProjectInput>
  }

  export type CheckListCreateWithoutProjectInput = {
    id?: string
    task: $Enums.Status
    assignedTo: string
    dueData?: Date | string
    priority: $Enums.Priority
    completed: boolean
  }

  export type CheckListUncheckedCreateWithoutProjectInput = {
    id?: string
    task: $Enums.Status
    assignedTo: string
    dueData?: Date | string
    priority: $Enums.Priority
    completed: boolean
  }

  export type CheckListCreateOrConnectWithoutProjectInput = {
    where: CheckListWhereUniqueInput
    create: XOR<CheckListCreateWithoutProjectInput, CheckListUncheckedCreateWithoutProjectInput>
  }

  export type CheckListCreateManyProjectInputEnvelope = {
    data: CheckListCreateManyProjectInput | CheckListCreateManyProjectInput[]
  }

  export type DocumentsCreateWithoutProjectInput = {
    id?: string
    name: string
    date?: Date | string
  }

  export type DocumentsUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    date?: Date | string
  }

  export type DocumentsCreateOrConnectWithoutProjectInput = {
    where: DocumentsWhereUniqueInput
    create: XOR<DocumentsCreateWithoutProjectInput, DocumentsUncheckedCreateWithoutProjectInput>
  }

  export type DocumentsCreateManyProjectInputEnvelope = {
    data: DocumentsCreateManyProjectInput | DocumentsCreateManyProjectInput[]
  }

  export type TheIncomingLetterCreateWithoutProjectInput = {
    id?: string
    sender: string
    subject: string
    priority: $Enums.Priority
    status: $Enums.IncomingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TheIncomingLetterUncheckedCreateWithoutProjectInput = {
    id?: string
    sender: string
    subject: string
    priority: $Enums.Priority
    status: $Enums.IncomingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TheIncomingLetterCreateOrConnectWithoutProjectInput = {
    where: TheIncomingLetterWhereUniqueInput
    create: XOR<TheIncomingLetterCreateWithoutProjectInput, TheIncomingLetterUncheckedCreateWithoutProjectInput>
  }

  export type TheIncomingLetterCreateManyProjectInputEnvelope = {
    data: TheIncomingLetterCreateManyProjectInput | TheIncomingLetterCreateManyProjectInput[]
  }

  export type TheOutgoingLetterCreateWithoutProjectInput = {
    id?: string
    recipent: string
    subject: string
    status: $Enums.OutgoingStatus
    priority: $Enums.Priority
    createdAt?: Date | string
  }

  export type TheOutgoingLetterUncheckedCreateWithoutProjectInput = {
    id?: string
    recipent: string
    subject: string
    status: $Enums.OutgoingStatus
    priority: $Enums.Priority
    createdAt?: Date | string
  }

  export type TheOutgoingLetterCreateOrConnectWithoutProjectInput = {
    where: TheOutgoingLetterWhereUniqueInput
    create: XOR<TheOutgoingLetterCreateWithoutProjectInput, TheOutgoingLetterUncheckedCreateWithoutProjectInput>
  }

  export type TheOutgoingLetterCreateManyProjectInputEnvelope = {
    data: TheOutgoingLetterCreateManyProjectInput | TheOutgoingLetterCreateManyProjectInput[]
  }

  export type ReportCreateWithoutProjectInput = {
    id?: string
    publisher: string
    status: $Enums.reportStatus
    uploadedDate?: Date | string
    lastModified?: Date | string
    version: string
    downloadedUrl: string
    reportType: $Enums.reportType
  }

  export type ReportUncheckedCreateWithoutProjectInput = {
    id?: string
    publisher: string
    status: $Enums.reportStatus
    uploadedDate?: Date | string
    lastModified?: Date | string
    version: string
    downloadedUrl: string
    reportType: $Enums.reportType
  }

  export type ReportCreateOrConnectWithoutProjectInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutProjectInput, ReportUncheckedCreateWithoutProjectInput>
  }

  export type ReportCreateManyProjectInputEnvelope = {
    data: ReportCreateManyProjectInput | ReportCreateManyProjectInput[]
  }

  export type ConstructionSiteImageCreateWithoutProjectInput = {
    id?: string
    title: string
    imagesrc: string
    location: string
    date?: Date | string
    category: $Enums.category
  }

  export type ConstructionSiteImageUncheckedCreateWithoutProjectInput = {
    id?: string
    title: string
    imagesrc: string
    location: string
    date?: Date | string
    category: $Enums.category
  }

  export type ConstructionSiteImageCreateOrConnectWithoutProjectInput = {
    where: ConstructionSiteImageWhereUniqueInput
    create: XOR<ConstructionSiteImageCreateWithoutProjectInput, ConstructionSiteImageUncheckedCreateWithoutProjectInput>
  }

  export type ConstructionSiteImageCreateManyProjectInputEnvelope = {
    data: ConstructionSiteImageCreateManyProjectInput | ConstructionSiteImageCreateManyProjectInput[]
  }

  export type BudgetUpsertWithWhereUniqueWithoutProjectInput = {
    where: BudgetWhereUniqueInput
    update: XOR<BudgetUpdateWithoutProjectInput, BudgetUncheckedUpdateWithoutProjectInput>
    create: XOR<BudgetCreateWithoutProjectInput, BudgetUncheckedCreateWithoutProjectInput>
  }

  export type BudgetUpdateWithWhereUniqueWithoutProjectInput = {
    where: BudgetWhereUniqueInput
    data: XOR<BudgetUpdateWithoutProjectInput, BudgetUncheckedUpdateWithoutProjectInput>
  }

  export type BudgetUpdateManyWithWhereWithoutProjectInput = {
    where: BudgetScalarWhereInput
    data: XOR<BudgetUpdateManyMutationInput, BudgetUncheckedUpdateManyWithoutProjectInput>
  }

  export type BudgetScalarWhereInput = {
    AND?: BudgetScalarWhereInput | BudgetScalarWhereInput[]
    OR?: BudgetScalarWhereInput[]
    NOT?: BudgetScalarWhereInput | BudgetScalarWhereInput[]
    id?: StringFilter<"Budget"> | string
    total?: FloatFilter<"Budget"> | number
    spent?: FloatFilter<"Budget"> | number
    projectId?: StringFilter<"Budget"> | string
  }

  export type TeamUpsertWithWhereUniqueWithoutProjectInput = {
    where: TeamWhereUniqueInput
    update: XOR<TeamUpdateWithoutProjectInput, TeamUncheckedUpdateWithoutProjectInput>
    create: XOR<TeamCreateWithoutProjectInput, TeamUncheckedCreateWithoutProjectInput>
  }

  export type TeamUpdateWithWhereUniqueWithoutProjectInput = {
    where: TeamWhereUniqueInput
    data: XOR<TeamUpdateWithoutProjectInput, TeamUncheckedUpdateWithoutProjectInput>
  }

  export type TeamUpdateManyWithWhereWithoutProjectInput = {
    where: TeamScalarWhereInput
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyWithoutProjectInput>
  }

  export type TeamScalarWhereInput = {
    AND?: TeamScalarWhereInput | TeamScalarWhereInput[]
    OR?: TeamScalarWhereInput[]
    NOT?: TeamScalarWhereInput | TeamScalarWhereInput[]
    id?: StringFilter<"Team"> | string
    projectManger?: StringFilter<"Team"> | string
    siteManger?: StringFilter<"Team"> | string
    civilManger?: StringFilter<"Team"> | string
    architecturalLoad?: StringFilter<"Team"> | string
    totalWorker?: IntFilter<"Team"> | number
    projectId?: StringFilter<"Team"> | string
  }

  export type UpcomingMilstoneUpsertWithoutProjectInput = {
    update: XOR<UpcomingMilstoneUpdateWithoutProjectInput, UpcomingMilstoneUncheckedUpdateWithoutProjectInput>
    create: XOR<UpcomingMilstoneCreateWithoutProjectInput, UpcomingMilstoneUncheckedCreateWithoutProjectInput>
    where?: UpcomingMilstoneWhereInput
  }

  export type UpcomingMilstoneUpdateToOneWithWhereWithoutProjectInput = {
    where?: UpcomingMilstoneWhereInput
    data: XOR<UpcomingMilstoneUpdateWithoutProjectInput, UpcomingMilstoneUncheckedUpdateWithoutProjectInput>
  }

  export type UpcomingMilstoneUpdateWithoutProjectInput = {
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }

  export type UpcomingMilstoneUncheckedUpdateWithoutProjectInput = {
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }

  export type CheckListUpsertWithWhereUniqueWithoutProjectInput = {
    where: CheckListWhereUniqueInput
    update: XOR<CheckListUpdateWithoutProjectInput, CheckListUncheckedUpdateWithoutProjectInput>
    create: XOR<CheckListCreateWithoutProjectInput, CheckListUncheckedCreateWithoutProjectInput>
  }

  export type CheckListUpdateWithWhereUniqueWithoutProjectInput = {
    where: CheckListWhereUniqueInput
    data: XOR<CheckListUpdateWithoutProjectInput, CheckListUncheckedUpdateWithoutProjectInput>
  }

  export type CheckListUpdateManyWithWhereWithoutProjectInput = {
    where: CheckListScalarWhereInput
    data: XOR<CheckListUpdateManyMutationInput, CheckListUncheckedUpdateManyWithoutProjectInput>
  }

  export type CheckListScalarWhereInput = {
    AND?: CheckListScalarWhereInput | CheckListScalarWhereInput[]
    OR?: CheckListScalarWhereInput[]
    NOT?: CheckListScalarWhereInput | CheckListScalarWhereInput[]
    id?: StringFilter<"CheckList"> | string
    task?: EnumStatusFilter<"CheckList"> | $Enums.Status
    assignedTo?: StringFilter<"CheckList"> | string
    dueData?: DateTimeFilter<"CheckList"> | Date | string
    priority?: EnumPriorityFilter<"CheckList"> | $Enums.Priority
    completed?: BoolFilter<"CheckList"> | boolean
    projectId?: StringFilter<"CheckList"> | string
  }

  export type DocumentsUpsertWithWhereUniqueWithoutProjectInput = {
    where: DocumentsWhereUniqueInput
    update: XOR<DocumentsUpdateWithoutProjectInput, DocumentsUncheckedUpdateWithoutProjectInput>
    create: XOR<DocumentsCreateWithoutProjectInput, DocumentsUncheckedCreateWithoutProjectInput>
  }

  export type DocumentsUpdateWithWhereUniqueWithoutProjectInput = {
    where: DocumentsWhereUniqueInput
    data: XOR<DocumentsUpdateWithoutProjectInput, DocumentsUncheckedUpdateWithoutProjectInput>
  }

  export type DocumentsUpdateManyWithWhereWithoutProjectInput = {
    where: DocumentsScalarWhereInput
    data: XOR<DocumentsUpdateManyMutationInput, DocumentsUncheckedUpdateManyWithoutProjectInput>
  }

  export type DocumentsScalarWhereInput = {
    AND?: DocumentsScalarWhereInput | DocumentsScalarWhereInput[]
    OR?: DocumentsScalarWhereInput[]
    NOT?: DocumentsScalarWhereInput | DocumentsScalarWhereInput[]
    id?: StringFilter<"Documents"> | string
    name?: StringFilter<"Documents"> | string
    date?: DateTimeFilter<"Documents"> | Date | string
    projectId?: StringFilter<"Documents"> | string
  }

  export type TheIncomingLetterUpsertWithWhereUniqueWithoutProjectInput = {
    where: TheIncomingLetterWhereUniqueInput
    update: XOR<TheIncomingLetterUpdateWithoutProjectInput, TheIncomingLetterUncheckedUpdateWithoutProjectInput>
    create: XOR<TheIncomingLetterCreateWithoutProjectInput, TheIncomingLetterUncheckedCreateWithoutProjectInput>
  }

  export type TheIncomingLetterUpdateWithWhereUniqueWithoutProjectInput = {
    where: TheIncomingLetterWhereUniqueInput
    data: XOR<TheIncomingLetterUpdateWithoutProjectInput, TheIncomingLetterUncheckedUpdateWithoutProjectInput>
  }

  export type TheIncomingLetterUpdateManyWithWhereWithoutProjectInput = {
    where: TheIncomingLetterScalarWhereInput
    data: XOR<TheIncomingLetterUpdateManyMutationInput, TheIncomingLetterUncheckedUpdateManyWithoutProjectInput>
  }

  export type TheIncomingLetterScalarWhereInput = {
    AND?: TheIncomingLetterScalarWhereInput | TheIncomingLetterScalarWhereInput[]
    OR?: TheIncomingLetterScalarWhereInput[]
    NOT?: TheIncomingLetterScalarWhereInput | TheIncomingLetterScalarWhereInput[]
    id?: StringFilter<"TheIncomingLetter"> | string
    sender?: StringFilter<"TheIncomingLetter"> | string
    subject?: StringFilter<"TheIncomingLetter"> | string
    priority?: EnumPriorityFilter<"TheIncomingLetter"> | $Enums.Priority
    status?: EnumIncomingStatusFilter<"TheIncomingLetter"> | $Enums.IncomingStatus
    projectId?: StringFilter<"TheIncomingLetter"> | string
    createdAt?: DateTimeFilter<"TheIncomingLetter"> | Date | string
    updatedAt?: DateTimeFilter<"TheIncomingLetter"> | Date | string
  }

  export type TheOutgoingLetterUpsertWithWhereUniqueWithoutProjectInput = {
    where: TheOutgoingLetterWhereUniqueInput
    update: XOR<TheOutgoingLetterUpdateWithoutProjectInput, TheOutgoingLetterUncheckedUpdateWithoutProjectInput>
    create: XOR<TheOutgoingLetterCreateWithoutProjectInput, TheOutgoingLetterUncheckedCreateWithoutProjectInput>
  }

  export type TheOutgoingLetterUpdateWithWhereUniqueWithoutProjectInput = {
    where: TheOutgoingLetterWhereUniqueInput
    data: XOR<TheOutgoingLetterUpdateWithoutProjectInput, TheOutgoingLetterUncheckedUpdateWithoutProjectInput>
  }

  export type TheOutgoingLetterUpdateManyWithWhereWithoutProjectInput = {
    where: TheOutgoingLetterScalarWhereInput
    data: XOR<TheOutgoingLetterUpdateManyMutationInput, TheOutgoingLetterUncheckedUpdateManyWithoutProjectInput>
  }

  export type TheOutgoingLetterScalarWhereInput = {
    AND?: TheOutgoingLetterScalarWhereInput | TheOutgoingLetterScalarWhereInput[]
    OR?: TheOutgoingLetterScalarWhereInput[]
    NOT?: TheOutgoingLetterScalarWhereInput | TheOutgoingLetterScalarWhereInput[]
    id?: StringFilter<"TheOutgoingLetter"> | string
    recipent?: StringFilter<"TheOutgoingLetter"> | string
    subject?: StringFilter<"TheOutgoingLetter"> | string
    status?: EnumOutgoingStatusFilter<"TheOutgoingLetter"> | $Enums.OutgoingStatus
    priority?: EnumPriorityFilter<"TheOutgoingLetter"> | $Enums.Priority
    createdAt?: DateTimeFilter<"TheOutgoingLetter"> | Date | string
    projectId?: StringFilter<"TheOutgoingLetter"> | string
  }

  export type ReportUpsertWithWhereUniqueWithoutProjectInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutProjectInput, ReportUncheckedUpdateWithoutProjectInput>
    create: XOR<ReportCreateWithoutProjectInput, ReportUncheckedCreateWithoutProjectInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutProjectInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutProjectInput, ReportUncheckedUpdateWithoutProjectInput>
  }

  export type ReportUpdateManyWithWhereWithoutProjectInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutProjectInput>
  }

  export type ReportScalarWhereInput = {
    AND?: ReportScalarWhereInput | ReportScalarWhereInput[]
    OR?: ReportScalarWhereInput[]
    NOT?: ReportScalarWhereInput | ReportScalarWhereInput[]
    id?: StringFilter<"Report"> | string
    publisher?: StringFilter<"Report"> | string
    status?: EnumreportStatusFilter<"Report"> | $Enums.reportStatus
    uploadedDate?: DateTimeFilter<"Report"> | Date | string
    lastModified?: DateTimeFilter<"Report"> | Date | string
    version?: StringFilter<"Report"> | string
    downloadedUrl?: StringFilter<"Report"> | string
    reportType?: EnumreportTypeFilter<"Report"> | $Enums.reportType
    projectId?: StringFilter<"Report"> | string
  }

  export type ConstructionSiteImageUpsertWithWhereUniqueWithoutProjectInput = {
    where: ConstructionSiteImageWhereUniqueInput
    update: XOR<ConstructionSiteImageUpdateWithoutProjectInput, ConstructionSiteImageUncheckedUpdateWithoutProjectInput>
    create: XOR<ConstructionSiteImageCreateWithoutProjectInput, ConstructionSiteImageUncheckedCreateWithoutProjectInput>
  }

  export type ConstructionSiteImageUpdateWithWhereUniqueWithoutProjectInput = {
    where: ConstructionSiteImageWhereUniqueInput
    data: XOR<ConstructionSiteImageUpdateWithoutProjectInput, ConstructionSiteImageUncheckedUpdateWithoutProjectInput>
  }

  export type ConstructionSiteImageUpdateManyWithWhereWithoutProjectInput = {
    where: ConstructionSiteImageScalarWhereInput
    data: XOR<ConstructionSiteImageUpdateManyMutationInput, ConstructionSiteImageUncheckedUpdateManyWithoutProjectInput>
  }

  export type ConstructionSiteImageScalarWhereInput = {
    AND?: ConstructionSiteImageScalarWhereInput | ConstructionSiteImageScalarWhereInput[]
    OR?: ConstructionSiteImageScalarWhereInput[]
    NOT?: ConstructionSiteImageScalarWhereInput | ConstructionSiteImageScalarWhereInput[]
    id?: StringFilter<"ConstructionSiteImage"> | string
    title?: StringFilter<"ConstructionSiteImage"> | string
    imagesrc?: StringFilter<"ConstructionSiteImage"> | string
    location?: StringFilter<"ConstructionSiteImage"> | string
    date?: DateTimeFilter<"ConstructionSiteImage"> | Date | string
    category?: EnumcategoryFilter<"ConstructionSiteImage"> | $Enums.category
    projectId?: StringFilter<"ConstructionSiteImage"> | string
  }

  export type ProjectCreateWithoutBudgetInput = {
    id?: string
    projectName: string
    clientName: string
    location: string
    startDate?: Date | string
    dueDate?: Date | string
    progress: number
    createdAt?: Date | string
    updatedAt?: Date | string
    team?: TeamCreateNestedManyWithoutProjectInput
    upcomingMilstone?: UpcomingMilstoneCreateNestedOneWithoutProjectInput
    checkList?: CheckListCreateNestedManyWithoutProjectInput
    documents?: DocumentsCreateNestedManyWithoutProjectInput
    theIncomingLetter?: TheIncomingLetterCreateNestedManyWithoutProjectInput
    theOutgoingLetter?: TheOutgoingLetterCreateNestedManyWithoutProjectInput
    report?: ReportCreateNestedManyWithoutProjectInput
    constructionSiteImage?: ConstructionSiteImageCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutBudgetInput = {
    id?: string
    projectName: string
    clientName: string
    location: string
    startDate?: Date | string
    dueDate?: Date | string
    progress: number
    createdAt?: Date | string
    updatedAt?: Date | string
    team?: TeamUncheckedCreateNestedManyWithoutProjectInput
    upcomingMilstone?: UpcomingMilstoneUncheckedCreateNestedOneWithoutProjectInput
    checkList?: CheckListUncheckedCreateNestedManyWithoutProjectInput
    documents?: DocumentsUncheckedCreateNestedManyWithoutProjectInput
    theIncomingLetter?: TheIncomingLetterUncheckedCreateNestedManyWithoutProjectInput
    theOutgoingLetter?: TheOutgoingLetterUncheckedCreateNestedManyWithoutProjectInput
    report?: ReportUncheckedCreateNestedManyWithoutProjectInput
    constructionSiteImage?: ConstructionSiteImageUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutBudgetInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutBudgetInput, ProjectUncheckedCreateWithoutBudgetInput>
  }

  export type ProjectUpsertWithoutBudgetInput = {
    update: XOR<ProjectUpdateWithoutBudgetInput, ProjectUncheckedUpdateWithoutBudgetInput>
    create: XOR<ProjectCreateWithoutBudgetInput, ProjectUncheckedCreateWithoutBudgetInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutBudgetInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutBudgetInput, ProjectUncheckedUpdateWithoutBudgetInput>
  }

  export type ProjectUpdateWithoutBudgetInput = {
    projectName?: StringFieldUpdateOperationsInput | string
    clientName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateManyWithoutProjectNestedInput
    upcomingMilstone?: UpcomingMilstoneUpdateOneWithoutProjectNestedInput
    checkList?: CheckListUpdateManyWithoutProjectNestedInput
    documents?: DocumentsUpdateManyWithoutProjectNestedInput
    theIncomingLetter?: TheIncomingLetterUpdateManyWithoutProjectNestedInput
    theOutgoingLetter?: TheOutgoingLetterUpdateManyWithoutProjectNestedInput
    report?: ReportUpdateManyWithoutProjectNestedInput
    constructionSiteImage?: ConstructionSiteImageUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutBudgetInput = {
    projectName?: StringFieldUpdateOperationsInput | string
    clientName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUncheckedUpdateManyWithoutProjectNestedInput
    upcomingMilstone?: UpcomingMilstoneUncheckedUpdateOneWithoutProjectNestedInput
    checkList?: CheckListUncheckedUpdateManyWithoutProjectNestedInput
    documents?: DocumentsUncheckedUpdateManyWithoutProjectNestedInput
    theIncomingLetter?: TheIncomingLetterUncheckedUpdateManyWithoutProjectNestedInput
    theOutgoingLetter?: TheOutgoingLetterUncheckedUpdateManyWithoutProjectNestedInput
    report?: ReportUncheckedUpdateManyWithoutProjectNestedInput
    constructionSiteImage?: ConstructionSiteImageUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateWithoutTeamInput = {
    id?: string
    projectName: string
    clientName: string
    location: string
    startDate?: Date | string
    dueDate?: Date | string
    progress: number
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: BudgetCreateNestedManyWithoutProjectInput
    upcomingMilstone?: UpcomingMilstoneCreateNestedOneWithoutProjectInput
    checkList?: CheckListCreateNestedManyWithoutProjectInput
    documents?: DocumentsCreateNestedManyWithoutProjectInput
    theIncomingLetter?: TheIncomingLetterCreateNestedManyWithoutProjectInput
    theOutgoingLetter?: TheOutgoingLetterCreateNestedManyWithoutProjectInput
    report?: ReportCreateNestedManyWithoutProjectInput
    constructionSiteImage?: ConstructionSiteImageCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutTeamInput = {
    id?: string
    projectName: string
    clientName: string
    location: string
    startDate?: Date | string
    dueDate?: Date | string
    progress: number
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: BudgetUncheckedCreateNestedManyWithoutProjectInput
    upcomingMilstone?: UpcomingMilstoneUncheckedCreateNestedOneWithoutProjectInput
    checkList?: CheckListUncheckedCreateNestedManyWithoutProjectInput
    documents?: DocumentsUncheckedCreateNestedManyWithoutProjectInput
    theIncomingLetter?: TheIncomingLetterUncheckedCreateNestedManyWithoutProjectInput
    theOutgoingLetter?: TheOutgoingLetterUncheckedCreateNestedManyWithoutProjectInput
    report?: ReportUncheckedCreateNestedManyWithoutProjectInput
    constructionSiteImage?: ConstructionSiteImageUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutTeamInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutTeamInput, ProjectUncheckedCreateWithoutTeamInput>
  }

  export type ProjectUpsertWithoutTeamInput = {
    update: XOR<ProjectUpdateWithoutTeamInput, ProjectUncheckedUpdateWithoutTeamInput>
    create: XOR<ProjectCreateWithoutTeamInput, ProjectUncheckedCreateWithoutTeamInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutTeamInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutTeamInput, ProjectUncheckedUpdateWithoutTeamInput>
  }

  export type ProjectUpdateWithoutTeamInput = {
    projectName?: StringFieldUpdateOperationsInput | string
    clientName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: BudgetUpdateManyWithoutProjectNestedInput
    upcomingMilstone?: UpcomingMilstoneUpdateOneWithoutProjectNestedInput
    checkList?: CheckListUpdateManyWithoutProjectNestedInput
    documents?: DocumentsUpdateManyWithoutProjectNestedInput
    theIncomingLetter?: TheIncomingLetterUpdateManyWithoutProjectNestedInput
    theOutgoingLetter?: TheOutgoingLetterUpdateManyWithoutProjectNestedInput
    report?: ReportUpdateManyWithoutProjectNestedInput
    constructionSiteImage?: ConstructionSiteImageUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutTeamInput = {
    projectName?: StringFieldUpdateOperationsInput | string
    clientName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: BudgetUncheckedUpdateManyWithoutProjectNestedInput
    upcomingMilstone?: UpcomingMilstoneUncheckedUpdateOneWithoutProjectNestedInput
    checkList?: CheckListUncheckedUpdateManyWithoutProjectNestedInput
    documents?: DocumentsUncheckedUpdateManyWithoutProjectNestedInput
    theIncomingLetter?: TheIncomingLetterUncheckedUpdateManyWithoutProjectNestedInput
    theOutgoingLetter?: TheOutgoingLetterUncheckedUpdateManyWithoutProjectNestedInput
    report?: ReportUncheckedUpdateManyWithoutProjectNestedInput
    constructionSiteImage?: ConstructionSiteImageUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateWithoutUpcomingMilstoneInput = {
    id?: string
    projectName: string
    clientName: string
    location: string
    startDate?: Date | string
    dueDate?: Date | string
    progress: number
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: BudgetCreateNestedManyWithoutProjectInput
    team?: TeamCreateNestedManyWithoutProjectInput
    checkList?: CheckListCreateNestedManyWithoutProjectInput
    documents?: DocumentsCreateNestedManyWithoutProjectInput
    theIncomingLetter?: TheIncomingLetterCreateNestedManyWithoutProjectInput
    theOutgoingLetter?: TheOutgoingLetterCreateNestedManyWithoutProjectInput
    report?: ReportCreateNestedManyWithoutProjectInput
    constructionSiteImage?: ConstructionSiteImageCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutUpcomingMilstoneInput = {
    id?: string
    projectName: string
    clientName: string
    location: string
    startDate?: Date | string
    dueDate?: Date | string
    progress: number
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: BudgetUncheckedCreateNestedManyWithoutProjectInput
    team?: TeamUncheckedCreateNestedManyWithoutProjectInput
    checkList?: CheckListUncheckedCreateNestedManyWithoutProjectInput
    documents?: DocumentsUncheckedCreateNestedManyWithoutProjectInput
    theIncomingLetter?: TheIncomingLetterUncheckedCreateNestedManyWithoutProjectInput
    theOutgoingLetter?: TheOutgoingLetterUncheckedCreateNestedManyWithoutProjectInput
    report?: ReportUncheckedCreateNestedManyWithoutProjectInput
    constructionSiteImage?: ConstructionSiteImageUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutUpcomingMilstoneInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutUpcomingMilstoneInput, ProjectUncheckedCreateWithoutUpcomingMilstoneInput>
  }

  export type ProjectUpsertWithoutUpcomingMilstoneInput = {
    update: XOR<ProjectUpdateWithoutUpcomingMilstoneInput, ProjectUncheckedUpdateWithoutUpcomingMilstoneInput>
    create: XOR<ProjectCreateWithoutUpcomingMilstoneInput, ProjectUncheckedCreateWithoutUpcomingMilstoneInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutUpcomingMilstoneInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutUpcomingMilstoneInput, ProjectUncheckedUpdateWithoutUpcomingMilstoneInput>
  }

  export type ProjectUpdateWithoutUpcomingMilstoneInput = {
    projectName?: StringFieldUpdateOperationsInput | string
    clientName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: BudgetUpdateManyWithoutProjectNestedInput
    team?: TeamUpdateManyWithoutProjectNestedInput
    checkList?: CheckListUpdateManyWithoutProjectNestedInput
    documents?: DocumentsUpdateManyWithoutProjectNestedInput
    theIncomingLetter?: TheIncomingLetterUpdateManyWithoutProjectNestedInput
    theOutgoingLetter?: TheOutgoingLetterUpdateManyWithoutProjectNestedInput
    report?: ReportUpdateManyWithoutProjectNestedInput
    constructionSiteImage?: ConstructionSiteImageUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutUpcomingMilstoneInput = {
    projectName?: StringFieldUpdateOperationsInput | string
    clientName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: BudgetUncheckedUpdateManyWithoutProjectNestedInput
    team?: TeamUncheckedUpdateManyWithoutProjectNestedInput
    checkList?: CheckListUncheckedUpdateManyWithoutProjectNestedInput
    documents?: DocumentsUncheckedUpdateManyWithoutProjectNestedInput
    theIncomingLetter?: TheIncomingLetterUncheckedUpdateManyWithoutProjectNestedInput
    theOutgoingLetter?: TheOutgoingLetterUncheckedUpdateManyWithoutProjectNestedInput
    report?: ReportUncheckedUpdateManyWithoutProjectNestedInput
    constructionSiteImage?: ConstructionSiteImageUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateWithoutCheckListInput = {
    id?: string
    projectName: string
    clientName: string
    location: string
    startDate?: Date | string
    dueDate?: Date | string
    progress: number
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: BudgetCreateNestedManyWithoutProjectInput
    team?: TeamCreateNestedManyWithoutProjectInput
    upcomingMilstone?: UpcomingMilstoneCreateNestedOneWithoutProjectInput
    documents?: DocumentsCreateNestedManyWithoutProjectInput
    theIncomingLetter?: TheIncomingLetterCreateNestedManyWithoutProjectInput
    theOutgoingLetter?: TheOutgoingLetterCreateNestedManyWithoutProjectInput
    report?: ReportCreateNestedManyWithoutProjectInput
    constructionSiteImage?: ConstructionSiteImageCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutCheckListInput = {
    id?: string
    projectName: string
    clientName: string
    location: string
    startDate?: Date | string
    dueDate?: Date | string
    progress: number
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: BudgetUncheckedCreateNestedManyWithoutProjectInput
    team?: TeamUncheckedCreateNestedManyWithoutProjectInput
    upcomingMilstone?: UpcomingMilstoneUncheckedCreateNestedOneWithoutProjectInput
    documents?: DocumentsUncheckedCreateNestedManyWithoutProjectInput
    theIncomingLetter?: TheIncomingLetterUncheckedCreateNestedManyWithoutProjectInput
    theOutgoingLetter?: TheOutgoingLetterUncheckedCreateNestedManyWithoutProjectInput
    report?: ReportUncheckedCreateNestedManyWithoutProjectInput
    constructionSiteImage?: ConstructionSiteImageUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutCheckListInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutCheckListInput, ProjectUncheckedCreateWithoutCheckListInput>
  }

  export type ProjectUpsertWithoutCheckListInput = {
    update: XOR<ProjectUpdateWithoutCheckListInput, ProjectUncheckedUpdateWithoutCheckListInput>
    create: XOR<ProjectCreateWithoutCheckListInput, ProjectUncheckedCreateWithoutCheckListInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutCheckListInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutCheckListInput, ProjectUncheckedUpdateWithoutCheckListInput>
  }

  export type ProjectUpdateWithoutCheckListInput = {
    projectName?: StringFieldUpdateOperationsInput | string
    clientName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: BudgetUpdateManyWithoutProjectNestedInput
    team?: TeamUpdateManyWithoutProjectNestedInput
    upcomingMilstone?: UpcomingMilstoneUpdateOneWithoutProjectNestedInput
    documents?: DocumentsUpdateManyWithoutProjectNestedInput
    theIncomingLetter?: TheIncomingLetterUpdateManyWithoutProjectNestedInput
    theOutgoingLetter?: TheOutgoingLetterUpdateManyWithoutProjectNestedInput
    report?: ReportUpdateManyWithoutProjectNestedInput
    constructionSiteImage?: ConstructionSiteImageUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutCheckListInput = {
    projectName?: StringFieldUpdateOperationsInput | string
    clientName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: BudgetUncheckedUpdateManyWithoutProjectNestedInput
    team?: TeamUncheckedUpdateManyWithoutProjectNestedInput
    upcomingMilstone?: UpcomingMilstoneUncheckedUpdateOneWithoutProjectNestedInput
    documents?: DocumentsUncheckedUpdateManyWithoutProjectNestedInput
    theIncomingLetter?: TheIncomingLetterUncheckedUpdateManyWithoutProjectNestedInput
    theOutgoingLetter?: TheOutgoingLetterUncheckedUpdateManyWithoutProjectNestedInput
    report?: ReportUncheckedUpdateManyWithoutProjectNestedInput
    constructionSiteImage?: ConstructionSiteImageUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateWithoutDocumentsInput = {
    id?: string
    projectName: string
    clientName: string
    location: string
    startDate?: Date | string
    dueDate?: Date | string
    progress: number
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: BudgetCreateNestedManyWithoutProjectInput
    team?: TeamCreateNestedManyWithoutProjectInput
    upcomingMilstone?: UpcomingMilstoneCreateNestedOneWithoutProjectInput
    checkList?: CheckListCreateNestedManyWithoutProjectInput
    theIncomingLetter?: TheIncomingLetterCreateNestedManyWithoutProjectInput
    theOutgoingLetter?: TheOutgoingLetterCreateNestedManyWithoutProjectInput
    report?: ReportCreateNestedManyWithoutProjectInput
    constructionSiteImage?: ConstructionSiteImageCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutDocumentsInput = {
    id?: string
    projectName: string
    clientName: string
    location: string
    startDate?: Date | string
    dueDate?: Date | string
    progress: number
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: BudgetUncheckedCreateNestedManyWithoutProjectInput
    team?: TeamUncheckedCreateNestedManyWithoutProjectInput
    upcomingMilstone?: UpcomingMilstoneUncheckedCreateNestedOneWithoutProjectInput
    checkList?: CheckListUncheckedCreateNestedManyWithoutProjectInput
    theIncomingLetter?: TheIncomingLetterUncheckedCreateNestedManyWithoutProjectInput
    theOutgoingLetter?: TheOutgoingLetterUncheckedCreateNestedManyWithoutProjectInput
    report?: ReportUncheckedCreateNestedManyWithoutProjectInput
    constructionSiteImage?: ConstructionSiteImageUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutDocumentsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutDocumentsInput, ProjectUncheckedCreateWithoutDocumentsInput>
  }

  export type ProjectUpsertWithoutDocumentsInput = {
    update: XOR<ProjectUpdateWithoutDocumentsInput, ProjectUncheckedUpdateWithoutDocumentsInput>
    create: XOR<ProjectCreateWithoutDocumentsInput, ProjectUncheckedCreateWithoutDocumentsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutDocumentsInput, ProjectUncheckedUpdateWithoutDocumentsInput>
  }

  export type ProjectUpdateWithoutDocumentsInput = {
    projectName?: StringFieldUpdateOperationsInput | string
    clientName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: BudgetUpdateManyWithoutProjectNestedInput
    team?: TeamUpdateManyWithoutProjectNestedInput
    upcomingMilstone?: UpcomingMilstoneUpdateOneWithoutProjectNestedInput
    checkList?: CheckListUpdateManyWithoutProjectNestedInput
    theIncomingLetter?: TheIncomingLetterUpdateManyWithoutProjectNestedInput
    theOutgoingLetter?: TheOutgoingLetterUpdateManyWithoutProjectNestedInput
    report?: ReportUpdateManyWithoutProjectNestedInput
    constructionSiteImage?: ConstructionSiteImageUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutDocumentsInput = {
    projectName?: StringFieldUpdateOperationsInput | string
    clientName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: BudgetUncheckedUpdateManyWithoutProjectNestedInput
    team?: TeamUncheckedUpdateManyWithoutProjectNestedInput
    upcomingMilstone?: UpcomingMilstoneUncheckedUpdateOneWithoutProjectNestedInput
    checkList?: CheckListUncheckedUpdateManyWithoutProjectNestedInput
    theIncomingLetter?: TheIncomingLetterUncheckedUpdateManyWithoutProjectNestedInput
    theOutgoingLetter?: TheOutgoingLetterUncheckedUpdateManyWithoutProjectNestedInput
    report?: ReportUncheckedUpdateManyWithoutProjectNestedInput
    constructionSiteImage?: ConstructionSiteImageUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateWithoutTheIncomingLetterInput = {
    id?: string
    projectName: string
    clientName: string
    location: string
    startDate?: Date | string
    dueDate?: Date | string
    progress: number
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: BudgetCreateNestedManyWithoutProjectInput
    team?: TeamCreateNestedManyWithoutProjectInput
    upcomingMilstone?: UpcomingMilstoneCreateNestedOneWithoutProjectInput
    checkList?: CheckListCreateNestedManyWithoutProjectInput
    documents?: DocumentsCreateNestedManyWithoutProjectInput
    theOutgoingLetter?: TheOutgoingLetterCreateNestedManyWithoutProjectInput
    report?: ReportCreateNestedManyWithoutProjectInput
    constructionSiteImage?: ConstructionSiteImageCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutTheIncomingLetterInput = {
    id?: string
    projectName: string
    clientName: string
    location: string
    startDate?: Date | string
    dueDate?: Date | string
    progress: number
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: BudgetUncheckedCreateNestedManyWithoutProjectInput
    team?: TeamUncheckedCreateNestedManyWithoutProjectInput
    upcomingMilstone?: UpcomingMilstoneUncheckedCreateNestedOneWithoutProjectInput
    checkList?: CheckListUncheckedCreateNestedManyWithoutProjectInput
    documents?: DocumentsUncheckedCreateNestedManyWithoutProjectInput
    theOutgoingLetter?: TheOutgoingLetterUncheckedCreateNestedManyWithoutProjectInput
    report?: ReportUncheckedCreateNestedManyWithoutProjectInput
    constructionSiteImage?: ConstructionSiteImageUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutTheIncomingLetterInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutTheIncomingLetterInput, ProjectUncheckedCreateWithoutTheIncomingLetterInput>
  }

  export type ProjectUpsertWithoutTheIncomingLetterInput = {
    update: XOR<ProjectUpdateWithoutTheIncomingLetterInput, ProjectUncheckedUpdateWithoutTheIncomingLetterInput>
    create: XOR<ProjectCreateWithoutTheIncomingLetterInput, ProjectUncheckedCreateWithoutTheIncomingLetterInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutTheIncomingLetterInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutTheIncomingLetterInput, ProjectUncheckedUpdateWithoutTheIncomingLetterInput>
  }

  export type ProjectUpdateWithoutTheIncomingLetterInput = {
    projectName?: StringFieldUpdateOperationsInput | string
    clientName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: BudgetUpdateManyWithoutProjectNestedInput
    team?: TeamUpdateManyWithoutProjectNestedInput
    upcomingMilstone?: UpcomingMilstoneUpdateOneWithoutProjectNestedInput
    checkList?: CheckListUpdateManyWithoutProjectNestedInput
    documents?: DocumentsUpdateManyWithoutProjectNestedInput
    theOutgoingLetter?: TheOutgoingLetterUpdateManyWithoutProjectNestedInput
    report?: ReportUpdateManyWithoutProjectNestedInput
    constructionSiteImage?: ConstructionSiteImageUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutTheIncomingLetterInput = {
    projectName?: StringFieldUpdateOperationsInput | string
    clientName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: BudgetUncheckedUpdateManyWithoutProjectNestedInput
    team?: TeamUncheckedUpdateManyWithoutProjectNestedInput
    upcomingMilstone?: UpcomingMilstoneUncheckedUpdateOneWithoutProjectNestedInput
    checkList?: CheckListUncheckedUpdateManyWithoutProjectNestedInput
    documents?: DocumentsUncheckedUpdateManyWithoutProjectNestedInput
    theOutgoingLetter?: TheOutgoingLetterUncheckedUpdateManyWithoutProjectNestedInput
    report?: ReportUncheckedUpdateManyWithoutProjectNestedInput
    constructionSiteImage?: ConstructionSiteImageUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateWithoutTheOutgoingLetterInput = {
    id?: string
    projectName: string
    clientName: string
    location: string
    startDate?: Date | string
    dueDate?: Date | string
    progress: number
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: BudgetCreateNestedManyWithoutProjectInput
    team?: TeamCreateNestedManyWithoutProjectInput
    upcomingMilstone?: UpcomingMilstoneCreateNestedOneWithoutProjectInput
    checkList?: CheckListCreateNestedManyWithoutProjectInput
    documents?: DocumentsCreateNestedManyWithoutProjectInput
    theIncomingLetter?: TheIncomingLetterCreateNestedManyWithoutProjectInput
    report?: ReportCreateNestedManyWithoutProjectInput
    constructionSiteImage?: ConstructionSiteImageCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutTheOutgoingLetterInput = {
    id?: string
    projectName: string
    clientName: string
    location: string
    startDate?: Date | string
    dueDate?: Date | string
    progress: number
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: BudgetUncheckedCreateNestedManyWithoutProjectInput
    team?: TeamUncheckedCreateNestedManyWithoutProjectInput
    upcomingMilstone?: UpcomingMilstoneUncheckedCreateNestedOneWithoutProjectInput
    checkList?: CheckListUncheckedCreateNestedManyWithoutProjectInput
    documents?: DocumentsUncheckedCreateNestedManyWithoutProjectInput
    theIncomingLetter?: TheIncomingLetterUncheckedCreateNestedManyWithoutProjectInput
    report?: ReportUncheckedCreateNestedManyWithoutProjectInput
    constructionSiteImage?: ConstructionSiteImageUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutTheOutgoingLetterInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutTheOutgoingLetterInput, ProjectUncheckedCreateWithoutTheOutgoingLetterInput>
  }

  export type ProjectUpsertWithoutTheOutgoingLetterInput = {
    update: XOR<ProjectUpdateWithoutTheOutgoingLetterInput, ProjectUncheckedUpdateWithoutTheOutgoingLetterInput>
    create: XOR<ProjectCreateWithoutTheOutgoingLetterInput, ProjectUncheckedCreateWithoutTheOutgoingLetterInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutTheOutgoingLetterInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutTheOutgoingLetterInput, ProjectUncheckedUpdateWithoutTheOutgoingLetterInput>
  }

  export type ProjectUpdateWithoutTheOutgoingLetterInput = {
    projectName?: StringFieldUpdateOperationsInput | string
    clientName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: BudgetUpdateManyWithoutProjectNestedInput
    team?: TeamUpdateManyWithoutProjectNestedInput
    upcomingMilstone?: UpcomingMilstoneUpdateOneWithoutProjectNestedInput
    checkList?: CheckListUpdateManyWithoutProjectNestedInput
    documents?: DocumentsUpdateManyWithoutProjectNestedInput
    theIncomingLetter?: TheIncomingLetterUpdateManyWithoutProjectNestedInput
    report?: ReportUpdateManyWithoutProjectNestedInput
    constructionSiteImage?: ConstructionSiteImageUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutTheOutgoingLetterInput = {
    projectName?: StringFieldUpdateOperationsInput | string
    clientName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: BudgetUncheckedUpdateManyWithoutProjectNestedInput
    team?: TeamUncheckedUpdateManyWithoutProjectNestedInput
    upcomingMilstone?: UpcomingMilstoneUncheckedUpdateOneWithoutProjectNestedInput
    checkList?: CheckListUncheckedUpdateManyWithoutProjectNestedInput
    documents?: DocumentsUncheckedUpdateManyWithoutProjectNestedInput
    theIncomingLetter?: TheIncomingLetterUncheckedUpdateManyWithoutProjectNestedInput
    report?: ReportUncheckedUpdateManyWithoutProjectNestedInput
    constructionSiteImage?: ConstructionSiteImageUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateWithoutReportInput = {
    id?: string
    projectName: string
    clientName: string
    location: string
    startDate?: Date | string
    dueDate?: Date | string
    progress: number
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: BudgetCreateNestedManyWithoutProjectInput
    team?: TeamCreateNestedManyWithoutProjectInput
    upcomingMilstone?: UpcomingMilstoneCreateNestedOneWithoutProjectInput
    checkList?: CheckListCreateNestedManyWithoutProjectInput
    documents?: DocumentsCreateNestedManyWithoutProjectInput
    theIncomingLetter?: TheIncomingLetterCreateNestedManyWithoutProjectInput
    theOutgoingLetter?: TheOutgoingLetterCreateNestedManyWithoutProjectInput
    constructionSiteImage?: ConstructionSiteImageCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutReportInput = {
    id?: string
    projectName: string
    clientName: string
    location: string
    startDate?: Date | string
    dueDate?: Date | string
    progress: number
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: BudgetUncheckedCreateNestedManyWithoutProjectInput
    team?: TeamUncheckedCreateNestedManyWithoutProjectInput
    upcomingMilstone?: UpcomingMilstoneUncheckedCreateNestedOneWithoutProjectInput
    checkList?: CheckListUncheckedCreateNestedManyWithoutProjectInput
    documents?: DocumentsUncheckedCreateNestedManyWithoutProjectInput
    theIncomingLetter?: TheIncomingLetterUncheckedCreateNestedManyWithoutProjectInput
    theOutgoingLetter?: TheOutgoingLetterUncheckedCreateNestedManyWithoutProjectInput
    constructionSiteImage?: ConstructionSiteImageUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutReportInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutReportInput, ProjectUncheckedCreateWithoutReportInput>
  }

  export type ProjectUpsertWithoutReportInput = {
    update: XOR<ProjectUpdateWithoutReportInput, ProjectUncheckedUpdateWithoutReportInput>
    create: XOR<ProjectCreateWithoutReportInput, ProjectUncheckedCreateWithoutReportInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutReportInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutReportInput, ProjectUncheckedUpdateWithoutReportInput>
  }

  export type ProjectUpdateWithoutReportInput = {
    projectName?: StringFieldUpdateOperationsInput | string
    clientName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: BudgetUpdateManyWithoutProjectNestedInput
    team?: TeamUpdateManyWithoutProjectNestedInput
    upcomingMilstone?: UpcomingMilstoneUpdateOneWithoutProjectNestedInput
    checkList?: CheckListUpdateManyWithoutProjectNestedInput
    documents?: DocumentsUpdateManyWithoutProjectNestedInput
    theIncomingLetter?: TheIncomingLetterUpdateManyWithoutProjectNestedInput
    theOutgoingLetter?: TheOutgoingLetterUpdateManyWithoutProjectNestedInput
    constructionSiteImage?: ConstructionSiteImageUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutReportInput = {
    projectName?: StringFieldUpdateOperationsInput | string
    clientName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: BudgetUncheckedUpdateManyWithoutProjectNestedInput
    team?: TeamUncheckedUpdateManyWithoutProjectNestedInput
    upcomingMilstone?: UpcomingMilstoneUncheckedUpdateOneWithoutProjectNestedInput
    checkList?: CheckListUncheckedUpdateManyWithoutProjectNestedInput
    documents?: DocumentsUncheckedUpdateManyWithoutProjectNestedInput
    theIncomingLetter?: TheIncomingLetterUncheckedUpdateManyWithoutProjectNestedInput
    theOutgoingLetter?: TheOutgoingLetterUncheckedUpdateManyWithoutProjectNestedInput
    constructionSiteImage?: ConstructionSiteImageUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateWithoutConstructionSiteImageInput = {
    id?: string
    projectName: string
    clientName: string
    location: string
    startDate?: Date | string
    dueDate?: Date | string
    progress: number
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: BudgetCreateNestedManyWithoutProjectInput
    team?: TeamCreateNestedManyWithoutProjectInput
    upcomingMilstone?: UpcomingMilstoneCreateNestedOneWithoutProjectInput
    checkList?: CheckListCreateNestedManyWithoutProjectInput
    documents?: DocumentsCreateNestedManyWithoutProjectInput
    theIncomingLetter?: TheIncomingLetterCreateNestedManyWithoutProjectInput
    theOutgoingLetter?: TheOutgoingLetterCreateNestedManyWithoutProjectInput
    report?: ReportCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutConstructionSiteImageInput = {
    id?: string
    projectName: string
    clientName: string
    location: string
    startDate?: Date | string
    dueDate?: Date | string
    progress: number
    createdAt?: Date | string
    updatedAt?: Date | string
    budget?: BudgetUncheckedCreateNestedManyWithoutProjectInput
    team?: TeamUncheckedCreateNestedManyWithoutProjectInput
    upcomingMilstone?: UpcomingMilstoneUncheckedCreateNestedOneWithoutProjectInput
    checkList?: CheckListUncheckedCreateNestedManyWithoutProjectInput
    documents?: DocumentsUncheckedCreateNestedManyWithoutProjectInput
    theIncomingLetter?: TheIncomingLetterUncheckedCreateNestedManyWithoutProjectInput
    theOutgoingLetter?: TheOutgoingLetterUncheckedCreateNestedManyWithoutProjectInput
    report?: ReportUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutConstructionSiteImageInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutConstructionSiteImageInput, ProjectUncheckedCreateWithoutConstructionSiteImageInput>
  }

  export type ProjectUpsertWithoutConstructionSiteImageInput = {
    update: XOR<ProjectUpdateWithoutConstructionSiteImageInput, ProjectUncheckedUpdateWithoutConstructionSiteImageInput>
    create: XOR<ProjectCreateWithoutConstructionSiteImageInput, ProjectUncheckedCreateWithoutConstructionSiteImageInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutConstructionSiteImageInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutConstructionSiteImageInput, ProjectUncheckedUpdateWithoutConstructionSiteImageInput>
  }

  export type ProjectUpdateWithoutConstructionSiteImageInput = {
    projectName?: StringFieldUpdateOperationsInput | string
    clientName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: BudgetUpdateManyWithoutProjectNestedInput
    team?: TeamUpdateManyWithoutProjectNestedInput
    upcomingMilstone?: UpcomingMilstoneUpdateOneWithoutProjectNestedInput
    checkList?: CheckListUpdateManyWithoutProjectNestedInput
    documents?: DocumentsUpdateManyWithoutProjectNestedInput
    theIncomingLetter?: TheIncomingLetterUpdateManyWithoutProjectNestedInput
    theOutgoingLetter?: TheOutgoingLetterUpdateManyWithoutProjectNestedInput
    report?: ReportUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutConstructionSiteImageInput = {
    projectName?: StringFieldUpdateOperationsInput | string
    clientName?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budget?: BudgetUncheckedUpdateManyWithoutProjectNestedInput
    team?: TeamUncheckedUpdateManyWithoutProjectNestedInput
    upcomingMilstone?: UpcomingMilstoneUncheckedUpdateOneWithoutProjectNestedInput
    checkList?: CheckListUncheckedUpdateManyWithoutProjectNestedInput
    documents?: DocumentsUncheckedUpdateManyWithoutProjectNestedInput
    theIncomingLetter?: TheIncomingLetterUncheckedUpdateManyWithoutProjectNestedInput
    theOutgoingLetter?: TheOutgoingLetterUncheckedUpdateManyWithoutProjectNestedInput
    report?: ReportUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type BudgetCreateManyProjectInput = {
    id?: string
    total: number
    spent: number
  }

  export type TeamCreateManyProjectInput = {
    id?: string
    projectManger: string
    siteManger: string
    civilManger: string
    architecturalLoad: string
    totalWorker: number
  }

  export type CheckListCreateManyProjectInput = {
    id?: string
    task: $Enums.Status
    assignedTo: string
    dueData?: Date | string
    priority: $Enums.Priority
    completed: boolean
  }

  export type DocumentsCreateManyProjectInput = {
    id?: string
    name: string
    date?: Date | string
  }

  export type TheIncomingLetterCreateManyProjectInput = {
    id?: string
    sender: string
    subject: string
    priority: $Enums.Priority
    status: $Enums.IncomingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TheOutgoingLetterCreateManyProjectInput = {
    id?: string
    recipent: string
    subject: string
    status: $Enums.OutgoingStatus
    priority: $Enums.Priority
    createdAt?: Date | string
  }

  export type ReportCreateManyProjectInput = {
    id?: string
    publisher: string
    status: $Enums.reportStatus
    uploadedDate?: Date | string
    lastModified?: Date | string
    version: string
    downloadedUrl: string
    reportType: $Enums.reportType
  }

  export type ConstructionSiteImageCreateManyProjectInput = {
    id?: string
    title: string
    imagesrc: string
    location: string
    date?: Date | string
    category: $Enums.category
  }

  export type BudgetUpdateWithoutProjectInput = {
    total?: FloatFieldUpdateOperationsInput | number
    spent?: FloatFieldUpdateOperationsInput | number
  }

  export type BudgetUncheckedUpdateWithoutProjectInput = {
    total?: FloatFieldUpdateOperationsInput | number
    spent?: FloatFieldUpdateOperationsInput | number
  }

  export type BudgetUncheckedUpdateManyWithoutProjectInput = {
    total?: FloatFieldUpdateOperationsInput | number
    spent?: FloatFieldUpdateOperationsInput | number
  }

  export type TeamUpdateWithoutProjectInput = {
    projectManger?: StringFieldUpdateOperationsInput | string
    siteManger?: StringFieldUpdateOperationsInput | string
    civilManger?: StringFieldUpdateOperationsInput | string
    architecturalLoad?: StringFieldUpdateOperationsInput | string
    totalWorker?: IntFieldUpdateOperationsInput | number
  }

  export type TeamUncheckedUpdateWithoutProjectInput = {
    projectManger?: StringFieldUpdateOperationsInput | string
    siteManger?: StringFieldUpdateOperationsInput | string
    civilManger?: StringFieldUpdateOperationsInput | string
    architecturalLoad?: StringFieldUpdateOperationsInput | string
    totalWorker?: IntFieldUpdateOperationsInput | number
  }

  export type TeamUncheckedUpdateManyWithoutProjectInput = {
    projectManger?: StringFieldUpdateOperationsInput | string
    siteManger?: StringFieldUpdateOperationsInput | string
    civilManger?: StringFieldUpdateOperationsInput | string
    architecturalLoad?: StringFieldUpdateOperationsInput | string
    totalWorker?: IntFieldUpdateOperationsInput | number
  }

  export type CheckListUpdateWithoutProjectInput = {
    task?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    assignedTo?: StringFieldUpdateOperationsInput | string
    dueData?: DateTimeFieldUpdateOperationsInput | Date | string
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    completed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CheckListUncheckedUpdateWithoutProjectInput = {
    task?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    assignedTo?: StringFieldUpdateOperationsInput | string
    dueData?: DateTimeFieldUpdateOperationsInput | Date | string
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    completed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CheckListUncheckedUpdateManyWithoutProjectInput = {
    task?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    assignedTo?: StringFieldUpdateOperationsInput | string
    dueData?: DateTimeFieldUpdateOperationsInput | Date | string
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    completed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DocumentsUpdateWithoutProjectInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentsUncheckedUpdateWithoutProjectInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentsUncheckedUpdateManyWithoutProjectInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TheIncomingLetterUpdateWithoutProjectInput = {
    sender?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumIncomingStatusFieldUpdateOperationsInput | $Enums.IncomingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TheIncomingLetterUncheckedUpdateWithoutProjectInput = {
    sender?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumIncomingStatusFieldUpdateOperationsInput | $Enums.IncomingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TheIncomingLetterUncheckedUpdateManyWithoutProjectInput = {
    sender?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumIncomingStatusFieldUpdateOperationsInput | $Enums.IncomingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TheOutgoingLetterUpdateWithoutProjectInput = {
    recipent?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    status?: EnumOutgoingStatusFieldUpdateOperationsInput | $Enums.OutgoingStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TheOutgoingLetterUncheckedUpdateWithoutProjectInput = {
    recipent?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    status?: EnumOutgoingStatusFieldUpdateOperationsInput | $Enums.OutgoingStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TheOutgoingLetterUncheckedUpdateManyWithoutProjectInput = {
    recipent?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    status?: EnumOutgoingStatusFieldUpdateOperationsInput | $Enums.OutgoingStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUpdateWithoutProjectInput = {
    publisher?: StringFieldUpdateOperationsInput | string
    status?: EnumreportStatusFieldUpdateOperationsInput | $Enums.reportStatus
    uploadedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: StringFieldUpdateOperationsInput | string
    downloadedUrl?: StringFieldUpdateOperationsInput | string
    reportType?: EnumreportTypeFieldUpdateOperationsInput | $Enums.reportType
  }

  export type ReportUncheckedUpdateWithoutProjectInput = {
    publisher?: StringFieldUpdateOperationsInput | string
    status?: EnumreportStatusFieldUpdateOperationsInput | $Enums.reportStatus
    uploadedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: StringFieldUpdateOperationsInput | string
    downloadedUrl?: StringFieldUpdateOperationsInput | string
    reportType?: EnumreportTypeFieldUpdateOperationsInput | $Enums.reportType
  }

  export type ReportUncheckedUpdateManyWithoutProjectInput = {
    publisher?: StringFieldUpdateOperationsInput | string
    status?: EnumreportStatusFieldUpdateOperationsInput | $Enums.reportStatus
    uploadedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastModified?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: StringFieldUpdateOperationsInput | string
    downloadedUrl?: StringFieldUpdateOperationsInput | string
    reportType?: EnumreportTypeFieldUpdateOperationsInput | $Enums.reportType
  }

  export type ConstructionSiteImageUpdateWithoutProjectInput = {
    title?: StringFieldUpdateOperationsInput | string
    imagesrc?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: EnumcategoryFieldUpdateOperationsInput | $Enums.category
  }

  export type ConstructionSiteImageUncheckedUpdateWithoutProjectInput = {
    title?: StringFieldUpdateOperationsInput | string
    imagesrc?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: EnumcategoryFieldUpdateOperationsInput | $Enums.category
  }

  export type ConstructionSiteImageUncheckedUpdateManyWithoutProjectInput = {
    title?: StringFieldUpdateOperationsInput | string
    imagesrc?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: EnumcategoryFieldUpdateOperationsInput | $Enums.category
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}