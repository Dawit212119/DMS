
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.5.0
 * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
 */
Prisma.prismaVersion = {
  client: "6.5.0",
  engine: "173f8d54f8d52e692c7e27e72a88314ec7aeff60"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  projectName: 'projectName',
  clientName: 'clientName',
  location: 'location',
  startDate: 'startDate',
  dueDate: 'dueDate',
  progress: 'progress',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BudgetScalarFieldEnum = {
  id: 'id',
  total: 'total',
  spent: 'spent',
  projectId: 'projectId'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  projectManger: 'projectManger',
  siteManger: 'siteManger',
  civilManger: 'civilManger',
  architecturalLoad: 'architecturalLoad',
  totalWorker: 'totalWorker',
  projectId: 'projectId'
};

exports.Prisma.UpcomingMilstoneScalarFieldEnum = {
  id: 'id',
  title: 'title',
  date: 'date',
  status: 'status',
  projectId: 'projectId'
};

exports.Prisma.CheckListScalarFieldEnum = {
  id: 'id',
  task: 'task',
  assignedTo: 'assignedTo',
  dueData: 'dueData',
  priority: 'priority',
  completed: 'completed',
  projectId: 'projectId'
};

exports.Prisma.DocumentsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  date: 'date',
  projectId: 'projectId'
};

exports.Prisma.TheIncomingLetterScalarFieldEnum = {
  id: 'id',
  sender: 'sender',
  subject: 'subject',
  priority: 'priority',
  status: 'status',
  projectId: 'projectId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TheOutgoingLetterScalarFieldEnum = {
  id: 'id',
  recipent: 'recipent',
  subject: 'subject',
  status: 'status',
  priority: 'priority',
  createdAt: 'createdAt',
  projectId: 'projectId'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  publisher: 'publisher',
  status: 'status',
  uploadedDate: 'uploadedDate',
  lastModified: 'lastModified',
  version: 'version',
  downloadedUrl: 'downloadedUrl',
  reportType: 'reportType',
  projectId: 'projectId'
};

exports.Prisma.ConstructionSiteImageScalarFieldEnum = {
  id: 'id',
  title: 'title',
  imagesrc: 'imagesrc',
  location: 'location',
  date: 'date',
  category: 'category',
  projectId: 'projectId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.Status = exports.$Enums.Status = {
  ontrack: 'ontrack',
  atrisk: 'atrisk'
};

exports.Priority = exports.$Enums.Priority = {
  high: 'high',
  medium: 'medium',
  low: 'low'
};

exports.IncomingStatus = exports.$Enums.IncomingStatus = {
  read: 'read',
  unread: 'unread'
};

exports.OutgoingStatus = exports.$Enums.OutgoingStatus = {
  sent: 'sent',
  draft: 'draft'
};

exports.reportStatus = exports.$Enums.reportStatus = {
  approved: 'approved',
  rejected: 'rejected'
};

exports.reportType = exports.$Enums.reportType = {
  daily: 'daily',
  weekly: 'weekly',
  monthly: 'monthly',
  annually: 'annually',
  quarterly: 'quarterly'
};

exports.category = exports.$Enums.category = {
  foundation: 'foundation',
  structural: 'structural',
  electrical: 'electrical',
  plumbing: 'plumbing',
  exterior: 'exterior',
  aerial: 'aerial'
};

exports.Prisma.ModelName = {
  User: 'User',
  Project: 'Project',
  Budget: 'Budget',
  Team: 'Team',
  UpcomingMilstone: 'UpcomingMilstone',
  CheckList: 'CheckList',
  Documents: 'Documents',
  TheIncomingLetter: 'TheIncomingLetter',
  TheOutgoingLetter: 'TheOutgoingLetter',
  Report: 'Report',
  ConstructionSiteImage: 'ConstructionSiteImage'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
