// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String   @unique
  password   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
   
}
model Project{
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
     projectName String 
     clientName  String
     location String
     startData  DateTime @default(now())
     dueData DateTime @default(now())
     progress Int
     budget Budget[]
     team Team[]
     upcomingMilstone UpcomingMilstone?
     createdAt DateTime @default(now())
     updatedAt DateTime @updatedAt
     checkList CheckList[]
     documents Documents[]
     theIncomingLetter TheIncomingLetter[]
     theOutgoingLetter TheOutgoingLetter[]
     report Report[]
     constructionSiteImage ConstructionSiteImage[]
      @@index([id])
}
model Budget{
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    total Float
    spent Float
    projectId String  @db.ObjectId
    project Project @relation(fields: [projectId],references: [id])
@@index([projectId])


}
model Team {
       id         String   @id @default(auto()) @map("_id") @db.ObjectId
       projectManger String
       siteManger String
       civilManger String
       architecturalLoad String
       totalWorker Int
       projectId String  @db.ObjectId
       project Project @relation(fields: [projectId],references: [id])
       @@index([projectId])
}

model UpcomingMilstone {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  date DateTime @default(now())
  status Status 
   projectId String @unique @db.ObjectId
    project Project @relation(fields: [projectId],references: [id])
}

enum Status {
  ontrack
  atrisk

}
model CheckList {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    task Status
    assignedTo String
    dueData DateTime @default(now())
    priority  Priority
    completed Boolean
    projectId String  @db.ObjectId
    project Project @relation(fields: [projectId],references: [id])
    @@index([projectId])
}
enum Priority {
  high 
  medium 
  low
}

model Documents{
      id String @id @default(auto()) @map("_id") @db.ObjectId
      name String 
      date DateTime @default(now())
      projectId String  @db.ObjectId
      project Project @relation(fields: [projectId],references: [id])
      @@index([projectId])
}    

model    TheIncomingLetter {
        id String @id @default(auto()) @map("_id") @db.ObjectId
        sender String
        subject String
        priority  Priority
        status IncomingStatus
        projectId String  @db.ObjectId
        project Project @relation(fields: [projectId],references: [id])
        createdAt DateTime @default(now())
        updatedAt DateTime @updatedAt
        @@index([projectId])


}
enum IncomingStatus{
  read
  unread
}

model TheOutgoingLetter {
          id String @id @default(auto()) @map("_id") @db.ObjectId
          recipent String
          subject String
          status OutgoingStatus
          priority  Priority
          createdAt DateTime @default(now())
          projectId String  @db.ObjectId
          project Project @relation(fields: [projectId],references: [id])
          @@index([projectId])

}
enum OutgoingStatus {
  sent 
  draft
}

model Report {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    publisher String
    status reportStatus
    uploadedDate DateTime @default(now())
    lastModified DateTime @default(now())
    version String
    downloadedUrl String
    reportType reportType
    projectId String  @db.ObjectId
    project Project @relation(fields: [projectId],references: [id])
    @@index([projectId])
}

enum reportStatus {
  approved
  rejected
}
enum reportType{
   daily
   weekly
   monthly
   annually
   quarterly
}

model ConstructionSiteImage{
      id String @id @default(auto()) @map("_id") @db.ObjectId
      title String
      imagesrc String
      location String
      date DateTime @default(now())
      category category
   projectId String  @db.ObjectId
    project Project @relation(fields: [projectId],references: [id])
    @@index([projectId])
}
enum category{
  foundation
  structural
  electrical
  plumbing
  exterior
  aerial
}